<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [debug\ble_proxr.out]</title></head>
<body><HR>
<H1>Static Call Graph for image debug\ble_proxr.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Wed Jun 21 14:14:53 2017
<BR><P>
<H3>Maximum Stack Usage =       2272 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
hci_le_rd_local_p256_public_key_cmd_handler &rArr; ecc_gen_new_public_key &rArr; ecc_generate_key256 &rArr; ecc_point_multiplication_uint8_256 &rArr; GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[66]">POWER_WakeupEntry</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[38]">ACMP0_DriverIRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ACMP0_DriverIRQHandler</a><BR>
 <LI><a href="#[26f]">assert_err</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26f]">assert_err</a><BR>
 <LI><a href="#[570]">smpc_tkdp_send_start</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[561]">smpc_tkdp_send_continue</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[38]">ACMP0_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[d]">ACMP0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[39]">ACMP1_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[e]">ACMP1_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[54]">ADC_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[29]">ADC_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[67]">APP_32kXtalWakeupTimerHandler</a> from app_ble_task.o(i.APP_32kXtalWakeupTimerHandler) referenced from power_manager.o(i.PM_SetPowerDownMode)
 <LI><a href="#[89]">APP_BassAddProfileTask</a> from app_bass.o(i.APP_BassAddProfileTask) referenced from app_ble.o(.constdata)
 <LI><a href="#[b0]">APP_BassBattLevelNtfCfgIndHandler</a> from app_bass.o(i.APP_BassBattLevelNtfCfgIndHandler) referenced from app_bass.o(.constdata)
 <LI><a href="#[b1]">APP_BassBattLevelUpdRspHandler</a> from app_bass.o(i.APP_BassBattLevelUpdRspHandler) referenced from app_bass.o(.constdata)
 <LI><a href="#[5e]">APP_BassBattLvlChkTimerHandler</a> from app_bass.o(i.APP_BassBattLvlChkTimerHandler) referenced from app_gap.o(i.APP_GapcConnectionReqIndHandler)
 <LI><a href="#[b2]">APP_BassEnableRspHandler</a> from app_bass.o(i.APP_BassEnableRspHandler) referenced from app_bass.o(.constdata)
 <LI><a href="#[5f]">APP_ButtonDownHandler</a> from app_ble_task.o(i.APP_ButtonDownHandler) referenced from app_ble.o(i.APP_Init)
 <LI><a href="#[a5]">APP_GapcBondIndHandler</a> from app_gap.o(i.APP_GapcBondIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a4]">APP_GapcBondReqIndHandler</a> from app_gap.o(i.APP_GapcBondReqIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[99]">APP_GapcCmpEvtHandler</a> from app_gap.o(i.APP_GapcCmpEvtHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[aa]">APP_GapcConChannelMapIndHandler</a> from app_gap.o(i.APP_GapcConChannelMapIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[9f]">APP_GapcConRssiIndHandler</a> from app_gap.o(i.APP_GapcConRssiIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[9a]">APP_GapcConnectionReqIndHandler</a> from app_gap.o(i.APP_GapcConnectionReqIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[9b]">APP_GapcDisconnectIndHandler</a> from app_gap.o(i.APP_GapcDisconnectIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a7]">APP_GapcEncryptIndHandler</a> from app_gap.o(i.APP_GapcEncryptIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a6]">APP_GapcEncryptReqIndHandler</a> from app_gap.o(i.APP_GapcEncryptReqIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a0]">APP_GapcGetDevInfoReqIndHandler</a> from app_gap.o(i.APP_GapcGetDevInfoReqIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[ab]">APP_GapcLePingToValIndHandler</a> from app_gap.o(i.APP_GapcLePingToValIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[ac]">APP_GapcLePktSizeIndHandler</a> from app_gap.o(i.APP_GapcLePktSizeIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a2]">APP_GapcParamUpdateReqIndHandler</a> from app_gap.o(i.APP_GapcParamUpdateReqIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a3]">APP_GapcParamUpdatedIndHandler</a> from app_gap.o(i.APP_GapcParamUpdatedIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[9c]">APP_GapcPeerAttInfoIndHandler</a> from app_gap.o(i.APP_GapcPeerAttInfoIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[9e]">APP_GapcPeerFeaturesIndHandler</a> from app_gap.o(i.APP_GapcPeerFeaturesIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[9d]">APP_GapcPeerVersionIndHandler</a> from app_gap.o(i.APP_GapcPeerVersionIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a8]">APP_GapcSecurityIndHandler</a> from app_gap.o(i.APP_GapcSecurityIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a1]">APP_GapcSetDevInfoReqIndHandler</a> from app_gap.o(i.APP_GapcSetDevInfoReqIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[a9]">APP_GapcSignCounterIndHandler</a> from app_gap.o(i.APP_GapcSignCounterIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[92]">APP_GapmAddrSolvedIndHandler</a> from app_gap.o(i.APP_GapmAddrSolvedIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[8b]">APP_GapmCmpEvtHandler</a> from app_gap.o(i.APP_GapmCmpEvtHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[8f]">APP_GapmDevAdvTxPowerIndHandler</a> from app_gap.o(i.APP_GapmDevAdvTxPowerIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[8e]">APP_GapmDevBdAddrIndHandler</a> from app_gap.o(i.APP_GapmDevBdAddrIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[8d]">APP_GapmDevVersionIndHandler</a> from app_gap.o(i.APP_GapmDevVersionIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[8c]">APP_GapmDeviceReadyIndHandler</a> from app_gap.o(i.APP_GapmDeviceReadyIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[96]">APP_GapmMaxDataLenIndHandler</a> from app_gap.o(i.APP_GapmMaxDataLenIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[91]">APP_GapmPeerNameIndHandler</a> from app_gap.o(i.APP_GapmPeerNameIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[94]">APP_GapmProfileAddedIndHandler</a> from app_gap.o(i.APP_GapmProfileAddedIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[98]">APP_GapmRalAddrIndHandler</a> from app_gap.o(i.APP_GapmRalAddrIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[97]">APP_GapmRalSizeIndHandler</a> from app_gap.o(i.APP_GapmRalSizeIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[95]">APP_GapmSuggDfltDataLenIndHandler</a> from app_gap.o(i.APP_GapmSuggDfltDataLenIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[93]">APP_GapmUseEncBlockIndHandler</a> from app_gap.o(i.APP_GapmUseEncBlockIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[90]">APP_GapmWhiteListSizeIndHandler</a> from app_gap.o(i.APP_GapmWhiteListSizeIndHandler) referenced from app_gap.o(.constdata)
 <LI><a href="#[ad]">APP_GattcCmpEvtHandler</a> from app_gatt.o(i.APP_GattcCmpEvtHandler) referenced from app_gatt.o(.constdata)
 <LI><a href="#[ae]">APP_GattcMtuChangedIndHandler</a> from app_gatt.o(i.APP_GattcMtuChangedIndHandler) referenced from app_gatt.o(.constdata)
 <LI><a href="#[af]">APP_GattcSvcChangedCfgIndHandler</a> from app_gatt.o(i.APP_GattcSvcChangedCfgIndHandler) referenced from app_gatt.o(.constdata)
 <LI><a href="#[23f]">APP_MsgHandler</a> from app_ble_task.o(i.APP_MsgHandler) referenced from app_ble_task.o(.data)
 <LI><a href="#[c6]">APP_PlfReset</a> from qnble.o(i.APP_PlfReset) referenced from qnble.o(.constdata)
 <LI><a href="#[8a]">APP_ProxrAddProfileTask</a> from app_proxr.o(i.APP_ProxrAddProfileTask) referenced from app_ble.o(.constdata)
 <LI><a href="#[b3]">APP_ProxrAlertIndHandler</a> from app_proxr.o(i.APP_ProxrAlertIndHandler) referenced from app_proxr.o(.constdata)
 <LI><a href="#[240]">APP_TimerCfgHandler</a> from app_ble_task.o(i.APP_TimerCfgHandler) referenced from app_ble_task.o(.data)
 <LI><a href="#[4b]">BLE_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[20]">BLE_IRQHandler</a> from rwble.o(i.BLE_IRQHandler) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[5d]">BOD_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[32]">BOD_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[5c]">CALIB_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[31]">CALIB_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[3d]">CS_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[12]">CS_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[3c]">CS_WAKEUP_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[11]">CS_WAKEUP_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[4f]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER0_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[24]">CTIMER0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[50]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER1_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[25]">CTIMER1_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[51]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER2_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[26]">CTIMER2_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[52]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(i.CTIMER3_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[27]">CTIMER3_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[55]">DAC_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[2a]">DAC_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[40]">DMA0_DriverIRQHandler</a> from fsl_dma.o(i.DMA0_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[15]">DMA0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[62]">DbgConsole_Putchar</a> from fsl_debug_console.o(i.DbgConsole_Putchar) referenced from fsl_debug_console.o(i.DbgConsole_Printf)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[d1]">EIF_FlowOff</a> from eif_adapter.o(i.EIF_FlowOff) referenced from qnble.o(.constdata)
 <LI><a href="#[d0]">EIF_FlowOn</a> from eif_adapter.o(i.EIF_FlowOn) referenced from qnble.o(.constdata)
 <LI><a href="#[ce]">EIF_Read</a> from eif_adapter.o(i.EIF_Read) referenced from qnble.o(.constdata)
 <LI><a href="#[63]">EIF_RxCallback</a> from eif_adapter.o(i.EIF_RxCallback) referenced from eif_adapter.o(i.EIF_Read)
 <LI><a href="#[64]">EIF_TxCallback</a> from eif_adapter.o(i.EIF_TxCallback) referenced from eif_adapter.o(i.EIF_Write)
 <LI><a href="#[cf]">EIF_Write</a> from eif_adapter.o(i.EIF_Write) referenced from qnble.o(.constdata)
 <LI><a href="#[36]">EXT_GPIO_WAKEUP_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[b]">EXT_GPIO_WAKEUP_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[57]">FLASH_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[2c]">FLASH_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[47]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[1c]">FLEXCOMM0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[48]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[1d]">FLEXCOMM1_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[49]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[1e]">FLEXCOMM2_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[4a]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler) referenced from startup_qn908x.o(.text)
 <LI><a href="#[1f]">FLEXCOMM3_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[4c]">FSP_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[21]">FSP_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[3e]">GPIOA_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[13]">GPIOA_IRQHandler</a> from button.o(i.GPIOA_IRQHandler) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[3f]">GPIOB_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[14]">GPIOB_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[65]">LED_BlinkTimerHandler</a> from led.o(i.LED_BlinkTimerHandler) referenced from led.o(i.LED_Blink)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[37]">OSC_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[45]">OSC_INT_LOW_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[1a]">OSC_INT_LOW_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[c]">OSC_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[41]">PIN_INT0_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[16]">PIN_INT0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[42]">PIN_INT1_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[17]">PIN_INT1_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[43]">PIN_INT2_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[18]">PIN_INT2_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[44]">PIN_INT3_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[19]">PIN_INT3_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[66]">POWER_WakeupEntry</a> from fsl_power_in_ram.o(in_ram) referenced from power_manager.o(i.PM_Init)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[4d]">QDEC0_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[22]">QDEC0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[4e]">QDEC1_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[23]">QDEC1_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[5b]">RNG_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[30]">RNG_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[5a]">RTC_CAP_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[2f]">RTC_CAP_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[3b]">RTC_FR_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[10]">RTC_FR_IRQHandler</a> from timer_adapter.o(i.RTC_FR_IRQHandler) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[3a]">RTC_SEC_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[f]">RTC_SEC_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[59]">SCT0_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[2e]">SCT0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[58]">SPIFI0_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[2d]">SPIFI0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_qn908x.o(i.SystemInit) referenced from startup_qn908x.o(.text)
 <LI><a href="#[69]">TM_CompareTargetTime</a> from timer_manager.o(i.TM_CompareTargetTime) referenced from timer_manager.o(i.TM_ExpiredTimerHandler)
 <LI><a href="#[69]">TM_CompareTargetTime</a> from timer_manager.o(i.TM_CompareTargetTime) referenced from timer_manager.o(i.TM_SetTimer)
 <LI><a href="#[68]">TM_CompareTimerId</a> from timer_manager.o(i.TM_CompareTimerId) referenced from timer_manager.o(i.TM_ClearTimer)
 <LI><a href="#[68]">TM_CompareTimerId</a> from timer_manager.o(i.TM_CompareTimerId) referenced from timer_manager.o(i.TM_SetTimer)
 <LI><a href="#[6a]">TM_ExpiredTimerHandler</a> from timer_manager.o(i.TM_ExpiredTimerHandler) referenced from timer_manager.o(i.TM_Init)
 <LI><a href="#[61]">USART_ReadBlocking</a> from fsl_usart.o(i.USART_ReadBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[60]">USART_WriteBlocking</a> from fsl_usart.o(i.USART_WriteBlocking) referenced from fsl_debug_console.o(i.DbgConsole_Init)
 <LI><a href="#[46]">USB0_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[1b]">USB0_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[53]">WDT_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[28]">WDT_IRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[56]">XTAL_READY_DriverIRQHandler</a> from startup_qn908x.o(.text) referenced from startup_qn908x.o(.text)
 <LI><a href="#[2b]">XTAL_READY_IRQHandler</a> from power_manager.o(i.XTAL_READY_IRQHandler) referenced from startup_qn908x.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_qn908x.o(.text)
 <LI><a href="#[6c]">ahi_ke_msg_tx_done</a> from ahi_task.o(i.ahi_ke_msg_tx_done) referenced from ahi_task.o(i.ahi_msg_send_handler)
 <LI><a href="#[d2]">ahi_msg_send_handler</a> from ahi_task.o(i.ahi_msg_send_handler) referenced from ahi_task.o(.constdata)
 <LI><a href="#[6d]">ahi_tx_done</a> from ahi.o(i.ahi_tx_done) referenced from ahi.o(i.ahi_send_msg)
 <LI><a href="#[6d]">ahi_tx_done</a> from ahi.o(i.ahi_tx_done) referenced from ahi.o(i.ahi_tx_done_evt_handler)
 <LI><a href="#[6b]">ahi_tx_done_evt_handler</a> from ahi.o(i.ahi_tx_done_evt_handler) referenced from ahi.o(i.ahi_init)
 <LI><a href="#[1b2]">attc_err_rsp_handler</a> from attc.o(i.attc_err_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1a8]">attc_exc_mtu_rsp_handler</a> from attc.o(i.attc_exc_mtu_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1b1]">attc_exe_wr_rsp_handler</a> from attc.o(i.attc_exe_wr_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1aa]">attc_find_by_type_rsp_handler</a> from attc.o(i.attc_find_by_type_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1a9]">attc_find_info_rsp_handler</a> from attc.o(i.attc_find_info_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1b3]">attc_hdl_val_ntf_ind_handler</a> from attc.o(i.attc_hdl_val_ntf_ind_handler) referenced 2 times from attc.o(.constdata)
 <LI><a href="#[1b0]">attc_prep_wr_rsp_handler</a> from attc.o(i.attc_prep_wr_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1ac]">attc_rd_by_grp_type_rsp_handler</a> from attc.o(i.attc_rd_by_grp_type_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1ab]">attc_rd_by_type_rsp_handler</a> from attc.o(i.attc_rd_by_type_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1ae]">attc_rd_mult_rsp_handler</a> from attc.o(i.attc_rd_mult_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1ad]">attc_rd_rsp_handler</a> from attc.o(i.attc_rd_rsp_handler) referenced 2 times from attc.o(.constdata)
 <LI><a href="#[1af]">attc_wr_rsp_handler</a> from attc.o(i.attc_wr_rsp_handler) referenced from attc.o(.constdata)
 <LI><a href="#[1c0]">atts_execute_write_req</a> from atts.o(i.atts_execute_write_req) referenced from atts.o(.constdata)
 <LI><a href="#[1b6]">atts_find_by_type_req</a> from atts.o(i.atts_find_by_type_req) referenced from atts.o(.constdata)
 <LI><a href="#[1b5]">atts_find_info_req</a> from atts.o(i.atts_find_info_req) referenced from atts.o(.constdata)
 <LI><a href="#[1c1]">atts_hdl_value_cfm</a> from atts.o(i.atts_hdl_value_cfm) referenced from atts.o(.constdata)
 <LI><a href="#[1b4]">atts_mtu_exc_req</a> from atts.o(i.atts_mtu_exc_req) referenced from atts.o(.constdata)
 <LI><a href="#[1bf]">atts_prepare_write_req</a> from atts.o(i.atts_prepare_write_req) referenced from atts.o(.constdata)
 <LI><a href="#[1ba]">atts_read_blob_req</a> from atts.o(i.atts_read_blob_req) referenced from atts.o(.constdata)
 <LI><a href="#[1b8]">atts_read_by_grp_type_req</a> from atts.o(i.atts_read_by_grp_type_req) referenced from atts.o(.constdata)
 <LI><a href="#[1b7]">atts_read_by_type_req</a> from atts.o(i.atts_read_by_type_req) referenced from atts.o(.constdata)
 <LI><a href="#[1bb]">atts_read_mult_req</a> from atts.o(i.atts_read_mult_req) referenced from atts.o(.constdata)
 <LI><a href="#[1b9]">atts_read_req</a> from atts.o(i.atts_read_req) referenced from atts.o(.constdata)
 <LI><a href="#[1bc]">atts_write_cmd</a> from atts.o(i.atts_write_cmd) referenced from atts.o(.constdata)
 <LI><a href="#[1bd]">atts_write_req</a> from atts.o(i.atts_write_req) referenced from atts.o(.constdata)
 <LI><a href="#[1be]">atts_write_signed</a> from atts.o(i.atts_write_signed) referenced from atts.o(.constdata)
 <LI><a href="#[b9]">bass_batt_level_upd_req_handler</a> from bass_task.o(i.bass_batt_level_upd_req_handler) referenced from bass_task.o(.constdata)
 <LI><a href="#[b7]">bass_cleanup</a> from bass.o(i.bass_cleanup) referenced from bass.o(.constdata)
 <LI><a href="#[b6]">bass_create</a> from bass.o(i.bass_create) referenced from bass.o(.constdata)
 <LI><a href="#[b5]">bass_destroy</a> from bass.o(i.bass_destroy) referenced from bass.o(.constdata)
 <LI><a href="#[b8]">bass_enable_req_handler</a> from bass_task.o(i.bass_enable_req_handler) referenced from bass_task.o(.constdata)
 <LI><a href="#[b4]">bass_init</a> from bass.o(i.bass_init) referenced from bass.o(.constdata)
 <LI><a href="#[7c]">cmp_abs_time</a> from ke_timer.o(i.cmp_abs_time) referenced from ke_timer.o(i.ke_timer_set)
 <LI><a href="#[78]">cmp_dest_id</a> from ke_task.o(i.cmp_dest_id) referenced from ke_task.o(i.ke_state_set)
 <LI><a href="#[7a]">cmp_timer_id</a> from ke_timer.o(i.cmp_timer_id) referenced from ke_timer.o(i.ke_timer_clear)
 <LI><a href="#[7a]">cmp_timer_id</a> from ke_timer.o(i.cmp_timer_id) referenced from ke_timer.o(i.ke_timer_set)
 <LI><a href="#[6e]">ecc_multiplication_event_handler</a> from ecc_p256.o(i.ecc_multiplication_event_handler) referenced from ecc_p256.o(i.ecc_init)
 <LI><a href="#[dd]">gapc_bond_cfm_handler</a> from gapc_task.o(i.gapc_bond_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[dc]">gapc_bond_cmd_handler</a> from gapc_task.o(i.gapc_bond_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[104]">gapc_cmp_evt_handler</a> from gapm_task.o(i.gapc_cmp_evt_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[d4]">gapc_connection_cfm_handler</a> from gapc_task.o(i.gapc_connection_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[d3]">gapc_disconnect_cmd_handler</a> from gapc_task.o(i.gapc_disconnect_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[df]">gapc_encrypt_cfm_handler</a> from gapc_task.o(i.gapc_encrypt_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[de]">gapc_encrypt_cmd_handler</a> from gapc_task.o(i.gapc_encrypt_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[e8]">gapc_gen_dh_key_ind_handler</a> from gapc_task.o(i.gapc_gen_dh_key_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[ed]">gapc_get_dev_info_cfm_handler</a> from gapc_task.o(i.gapc_get_dev_info_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[d5]">gapc_get_info_cmd_handler</a> from gapc_task.o(i.gapc_get_info_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[ef]">gapc_hci_handler</a> from gapc_hci.o(i.gapc_hci_handler) referenced 4 times from gapc_task.o(.constdata)
 <LI><a href="#[e9]">gapc_key_press_notification_cmd_handler</a> from gapc_task.o(i.gapc_key_press_notification_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[d9]">gapc_param_update_cfm_handler</a> from gapc_task.o(i.gapc_param_update_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[d8]">gapc_param_update_cmd_handler</a> from gapc_task.o(i.gapc_param_update_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[105]">gapc_peer_att_info_ind_handler</a> from gapm_task.o(i.gapc_peer_att_info_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[e0]">gapc_security_cmd_handler</a> from gapc_task.o(i.gapc_security_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[ee]">gapc_set_dev_info_cfm_handler</a> from gapc_task.o(i.gapc_set_dev_info_cfm_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f0]">gapc_set_le_ping_to_handler</a> from gapc_task.o(i.gapc_set_le_ping_to_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f1]">gapc_set_le_pkt_size_handler</a> from gapc_task.o(i.gapc_set_le_pkt_size_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f2]">gapc_set_phy_cmd_handler</a> from gapc_task.o(i.gapc_set_phy_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[e1]">gapc_sign_cmd_handler</a> from gapc_task.o(i.gapc_sign_cmd_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[127]">gapc_sign_ind_handler</a> from gattc_task.o(i.gapc_sign_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[e7]">gapc_smp_rep_attempts_timer_handler</a> from gapc_task.o(i.gapc_smp_rep_attempts_timer_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[e6]">gapc_smp_timeout_timer_ind_handler</a> from gapc_task.o(i.gapc_smp_timeout_timer_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[db]">gapc_update_conn_param_to_ind_handler</a> from gapc_task.o(i.gapc_update_conn_param_to_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[108]">gapm_addr_renew_to_ind_handler</a> from gapm_task.o(i.gapm_addr_renew_to_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[f5]">gapm_cancel_cmd_handler</a> from gapm_task.o(i.gapm_cancel_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[c5]">gapm_cmp_evt_handler</a> from proxr_task.o(i.gapm_cmp_evt_handler) referenced 3 times from proxr_task.o(.constdata)
 <LI><a href="#[106]">gapm_connection_cfm_handler</a> from gapm_task.o(i.gapm_connection_cfm_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[f3]">gapm_default_msg_handler</a> from gapm_task.o(i.gapm_default_msg_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[c4]">gapm_dev_adv_tx_power_ind_handler</a> from proxr_task.o(i.gapm_dev_adv_tx_power_ind_handler) referenced from proxr_task.o(.constdata)
 <LI><a href="#[fd]">gapm_gen_dh_key_cmd_handler</a> from gapm_task.o(i.gapm_gen_dh_key_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[fb]">gapm_gen_rand_addr_cmd_handler</a> from gapm_task.o(i.gapm_gen_rand_addr_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[e3]">gapm_gen_rand_nb_ind_handler</a> from gapc_task.o(i.gapm_gen_rand_nb_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f8]">gapm_get_dev_info_cmd_handler</a> from gapm_task.o(i.gapm_get_dev_info_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[10b]">gapm_hci_handler</a> from gapm_hci.o(i.gapm_hci_handler) referenced 3 times from gapm_task.o(.constdata)
 <LI><a href="#[10e]">gapm_lepsm_register_cmd_handler</a> from gapm_task.o(i.gapm_lepsm_register_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[10f]">gapm_lepsm_unregister_cmd_handler</a> from gapm_task.o(i.gapm_lepsm_unregister_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[100]">gapm_lim_disc_to_ind_handler</a> from gapm_task.o(i.gapm_lim_disc_to_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[109]">gapm_profile_task_add_cmd_handler</a> from gapm_task.o(i.gapm_profile_task_add_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[10c]">gapm_ral_mgt_cmd_handler</a> from gapm_task.o(i.gapm_ral_mgt_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[f4]">gapm_reset_cmd_handler</a> from gapm_task.o(i.gapm_reset_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[fa]">gapm_resolv_addr_cmd_handler</a> from gapm_task.o(i.gapm_resolv_addr_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[102]">gapm_scan_to_ind_handler</a> from gapm_task.o(i.gapm_scan_to_ind_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[f7]">gapm_set_channel_map_cmd_handler</a> from gapm_task.o(i.gapm_set_channel_map_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[f6]">gapm_set_dev_config_cmd_handler</a> from gapm_task.o(i.gapm_set_dev_config_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[10d]">gapm_set_irk_cmd_handler</a> from gapm_task.o(i.gapm_set_irk_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[fe]">gapm_start_advertise_cmd_handler</a> from gapm_task.o(i.gapm_start_advertise_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[103]">gapm_start_connection_cmd_handler</a> from gapm_task.o(i.gapm_start_connection_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[101]">gapm_start_scan_cmd_handler</a> from gapm_task.o(i.gapm_start_scan_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[10a]">gapm_unknown_task_msg_handler</a> from gapm_task.o(i.gapm_unknown_task_msg_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[ff]">gapm_update_advertise_data_cmd_handler</a> from gapm_task.o(i.gapm_update_advertise_data_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[fc]">gapm_use_enc_block_cmd_handler</a> from gapm_task.o(i.gapm_use_enc_block_cmd_handler) referenced 2 times from gapm_task.o(.constdata)
 <LI><a href="#[e4]">gapm_use_enc_block_ind_handler</a> from gapc_task.o(i.gapm_use_enc_block_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[f9]">gapm_white_list_mgt_cmd_handler</a> from gapm_task.o(i.gapm_white_list_mgt_cmd_handler) referenced from gapm_task.o(.constdata)
 <LI><a href="#[121]">gattc_att_info_cfm_handler</a> from gattc_task.o(i.gattc_att_info_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[ba]">gattc_att_info_req_ind_handler</a> from bass_task.o(i.gattc_att_info_req_ind_handler) referenced 3 times from bass_task.o(.constdata)
 <LI><a href="#[bd]">gattc_cmp_evt_handler</a> from bass_task.o(i.gattc_cmp_evt_handler) referenced 3 times from bass_task.o(.constdata)
 <LI><a href="#[110]">gattc_default_msg_handler</a> from gattc_task.o(i.gattc_default_msg_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[11e]">gattc_disc_char_desc_ind_handler</a> from gattc_task.o(i.gattc_disc_char_desc_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[11d]">gattc_disc_char_ind_handler</a> from gattc_task.o(i.gattc_disc_char_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[112]">gattc_disc_cmd_handler</a> from gattc_task.o(i.gattc_disc_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[11c]">gattc_disc_svc_incl_ind_handler</a> from gattc_task.o(i.gattc_disc_svc_incl_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[11b]">gattc_disc_svc_ind_handler</a> from gattc_task.o(i.gattc_disc_svc_ind_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[115]">gattc_event_cfm_handler</a> from gattc_task.o(i.gattc_event_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[111]">gattc_exc_mtu_cmd_handler</a> from gattc_task.o(i.gattc_exc_mtu_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[116]">gattc_execute_write_cmd_handler</a> from gattc_task.o(i.gattc_execute_write_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[11f]">gattc_read_cfm_handler</a> from gattc_task.o(i.gattc_read_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[113]">gattc_read_cmd_handler</a> from gattc_task.o(i.gattc_read_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[d6]">gattc_read_ind_handler</a> from gapc_task.o(i.gattc_read_ind_handler) referenced from gapc_task.o(.constdata)
 <LI><a href="#[bc]">gattc_read_req_ind_handler</a> from bass_task.o(i.gattc_read_req_ind_handler) referenced 4 times from bass_task.o(.constdata)
 <LI><a href="#[117]">gattc_reg_to_peer_evt_cmd_handler</a> from gattc_task.o(i.gattc_reg_to_peer_evt_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[119]">gattc_sdp_svc_disc_cmd_handler</a> from gattc_task.o(i.gattc_sdp_svc_disc_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[123]">gattc_send_evt_cmd_handler</a> from gattc_task.o(i.gattc_send_evt_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[122]">gattc_send_svc_changed_cmd_handler</a> from gattc_task.o(i.gattc_send_svc_changed_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[118]">gattc_timeout_handler</a> from gattc_task.o(i.gattc_timeout_handler) referenced 2 times from gattc_task.o(.constdata)
 <LI><a href="#[120]">gattc_write_cfm_handler</a> from gattc_task.o(i.gattc_write_cfm_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[114]">gattc_write_cmd_handler</a> from gattc_task.o(i.gattc_write_cmd_handler) referenced from gattc_task.o(.constdata)
 <LI><a href="#[bb]">gattc_write_req_ind_handler</a> from bass_task.o(i.gattc_write_req_ind_handler) referenced 4 times from bass_task.o(.constdata)
 <LI><a href="#[12c]">gattm_add_svc_req_handler</a> from gattm_task.o(i.gattm_add_svc_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[135]">gattm_att_get_info_req_handler</a> from gattm_task.o(i.gattm_att_get_info_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[12f]">gattm_att_get_permission_req_handler</a> from gattm_task.o(i.gattm_att_get_permission_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[131]">gattm_att_get_value_req_handler</a> from gattm_task.o(i.gattm_att_get_value_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[130]">gattm_att_set_permission_req_handler</a> from gattm_task.o(i.gattm_att_set_permission_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[132]">gattm_att_set_value_req_handler</a> from gattm_task.o(i.gattm_att_set_value_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[12b]">gattm_default_msg_handler</a> from gattm_task.o(i.gattm_default_msg_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[133]">gattm_destroy_db_req_handler</a> from gattm_task.o(i.gattm_destroy_db_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[134]">gattm_svc_get_list_req_handler</a> from gattm_task.o(i.gattm_svc_get_list_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[12d]">gattm_svc_get_permission_req_handler</a> from gattm_task.o(i.gattm_svc_get_permission_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[12e]">gattm_svc_set_permission_req_handler</a> from gattm_task.o(i.gattm_svc_set_permission_req_handler) referenced from gattm_task.o(.constdata)
 <LI><a href="#[74]">h4tl_cmd_hdr_rx_evt_handler</a> from h4tl.o(i.h4tl_cmd_hdr_rx_evt_handler) referenced from h4tl.o(i.h4tl_init)
 <LI><a href="#[75]">h4tl_cmd_pld_rx_evt_handler</a> from h4tl.o(i.h4tl_cmd_pld_rx_evt_handler) referenced from h4tl.o(i.h4tl_init)
 <LI><a href="#[72]">h4tl_rx_done</a> from h4tl.o(i.h4tl_rx_done) referenced from h4tl.o(i.h4tl_cmd_hdr_rx_evt_handler)
 <LI><a href="#[72]">h4tl_rx_done</a> from h4tl.o(i.h4tl_rx_done) referenced from h4tl.o(i.h4tl_cmd_pld_rx_evt_handler)
 <LI><a href="#[72]">h4tl_rx_done</a> from h4tl.o(i.h4tl_rx_done) referenced from h4tl.o(i.h4tl_init)
 <LI><a href="#[72]">h4tl_rx_done</a> from h4tl.o(i.h4tl_rx_done) referenced from h4tl.o(i.h4tl_out_of_sync)
 <LI><a href="#[72]">h4tl_rx_done</a> from h4tl.o(i.h4tl_rx_done) referenced from h4tl.o(i.h4tl_read_start)
 <LI><a href="#[72]">h4tl_rx_done</a> from h4tl.o(i.h4tl_rx_done) referenced from h4tl.o(i.h4tl_rx_done)
 <LI><a href="#[76]">h4tl_tx_done</a> from h4tl.o(i.h4tl_tx_done) referenced from h4tl.o(i.h4tl_write)
 <LI><a href="#[73]">h4tl_tx_evt_handler</a> from h4tl.o(i.h4tl_tx_evt_handler) referenced from h4tl.o(i.h4tl_init)
 <LI><a href="#[13f]">hci_acl_data_rx_handler</a> from l2cc_task.o(i.hci_acl_data_rx_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[18b]">hci_auth_payl_to_exp_evt_handler</a> from gapc_hci.o(i.hci_auth_payl_to_exp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[19b]">hci_basic_cmd_cmp_evt_addr_set_handler</a> from gapm_hci.o(i.hci_basic_cmd_cmp_evt_addr_set_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[199]">hci_basic_cmd_cmp_evt_adv_handler</a> from gapm_hci.o(i.hci_basic_cmd_cmp_evt_adv_handler) referenced 4 times from gapm_hci.o(.constdata)
 <LI><a href="#[18f]">hci_basic_cmd_cmp_evt_cfg_handler</a> from gapm_hci.o(i.hci_basic_cmd_cmp_evt_cfg_handler) referenced 5 times from gapm_hci.o(.constdata)
 <LI><a href="#[18e]">hci_basic_cmd_cmp_evt_connect_handler</a> from gapm_hci.o(i.hci_basic_cmd_cmp_evt_connect_handler) referenced 2 times from gapm_hci.o(.constdata)
 <LI><a href="#[1a1]">hci_basic_cmd_cmp_evt_rl_handler</a> from gapm_hci.o(i.hci_basic_cmd_cmp_evt_rl_handler) referenced 5 times from gapm_hci.o(.constdata)
 <LI><a href="#[19a]">hci_basic_cmd_cmp_evt_scan_handler</a> from gapm_hci.o(i.hci_basic_cmd_cmp_evt_scan_handler) referenced 2 times from gapm_hci.o(.constdata)
 <LI><a href="#[198]">hci_basic_cmd_cmp_evt_wl_handler</a> from gapm_hci.o(i.hci_basic_cmd_cmp_evt_wl_handler) referenced 3 times from gapm_hci.o(.constdata)
 <LI><a href="#[182]">hci_cmd_stat_event_handler</a> from gapc_hci.o(i.hci_cmd_stat_event_handler) referenced 4 times from gapc_hci.o(.constdata)
 <LI><a href="#[157]">hci_command_handler</a> from llm_hci.o(i.hci_command_handler) referenced 2 times from llm_task.o(.constdata)
 <LI><a href="#[237]">hci_dbg_assert_err_evt_pkupk</a> from hci_msg.o(i.hci_dbg_assert_err_evt_pkupk) referenced from hci_msg.o(.constdata)
 <LI><a href="#[15a]">hci_dbg_del_par_cmd_handler</a> from dbg_task.o(i.hci_dbg_del_par_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[15c]">hci_dbg_er_flash_cmd_handler</a> from dbg_task.o(i.hci_dbg_er_flash_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[165]">hci_dbg_hw_reg_rd_cmd_handler</a> from dbg_task.o(i.hci_dbg_hw_reg_rd_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[166]">hci_dbg_hw_reg_wr_cmd_handler</a> from dbg_task.o(i.hci_dbg_hw_reg_wr_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[15b]">hci_dbg_id_flash_cmd_handler</a> from dbg_task.o(i.hci_dbg_id_flash_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[169]">hci_dbg_llcp_discard_cmd_handler</a> from dbg_task.o(i.hci_dbg_llcp_discard_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[164]">hci_dbg_plf_reset_cmd_handler</a> from dbg_task.o(i.hci_dbg_plf_reset_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[239]">hci_dbg_rd_data_cmd_cmp_evt_pk</a> from hci_msg.o(i.hci_dbg_rd_data_cmd_cmp_evt_pk) referenced 3 times from hci_msg.o(.constdata)
 <LI><a href="#[15e]">hci_dbg_rd_flash_cmd_handler</a> from dbg_task.o(i.hci_dbg_rd_flash_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[161]">hci_dbg_rd_ke_stats_cmd_handler</a> from dbg_task.o(i.hci_dbg_rd_ke_stats_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[158]">hci_dbg_rd_mem_cmd_handler</a> from dbg_task.o(i.hci_dbg_rd_mem_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[16e]">hci_dbg_rd_mem_info_cmd_handler</a> from dbg_task.o(i.hci_dbg_rd_mem_info_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[15f]">hci_dbg_rd_par_cmd_handler</a> from dbg_task.o(i.hci_dbg_rd_par_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[16a]">hci_dbg_reset_rx_cnt_cmd_handler</a> from dbg_task.o(i.hci_dbg_reset_rx_cnt_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[16b]">hci_dbg_reset_tx_cnt_cmd_handler</a> from dbg_task.o(i.hci_dbg_reset_tx_cnt_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[162]">hci_dbg_rf_reg_rd_cmd_handler</a> from dbg_task.o(i.hci_dbg_rf_reg_rd_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[163]">hci_dbg_rf_reg_wr_cmd_handler</a> from dbg_task.o(i.hci_dbg_rf_reg_wr_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[167]">hci_dbg_set_bd_addr_cmd_handler</a> from dbg_task.o(i.hci_dbg_set_bd_addr_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[168]">hci_dbg_set_crc_cmd_handler</a> from dbg_task.o(i.hci_dbg_set_crc_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[16c]">hci_dbg_set_tx_pw_cmd_handler</a> from dbg_task.o(i.hci_dbg_set_tx_pw_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[16d]">hci_dbg_wlan_coex_cmd_handler</a> from dbg_task.o(i.hci_dbg_wlan_coex_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[16f]">hci_dbg_wr_dle_dft_value_cmd_handler</a> from dbg_task.o(i.hci_dbg_wr_dle_dft_value_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[15d]">hci_dbg_wr_flash_cmd_handler</a> from dbg_task.o(i.hci_dbg_wr_flash_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[23b]">hci_dbg_wr_flash_cmd_upk</a> from hci_msg.o(i.hci_dbg_wr_flash_cmd_upk) referenced from hci_msg.o(.constdata)
 <LI><a href="#[159]">hci_dbg_wr_mem_cmd_handler</a> from dbg_task.o(i.hci_dbg_wr_mem_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[23a]">hci_dbg_wr_mem_cmd_upk</a> from hci_msg.o(i.hci_dbg_wr_mem_cmd_upk) referenced from hci_msg.o(.constdata)
 <LI><a href="#[160]">hci_dbg_wr_par_cmd_handler</a> from dbg_task.o(i.hci_dbg_wr_par_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[23c]">hci_dbg_wr_par_cmd_upk</a> from hci_msg.o(i.hci_dbg_wr_par_cmd_upk) referenced from hci_msg.o(.constdata)
 <LI><a href="#[189]">hci_disc_cmp_evt_handler</a> from gapc_hci.o(i.hci_disc_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1ca]">hci_disconnect_cmd_handler</a> from llc_hci.o(i.hci_disconnect_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[18c]">hci_enc_chg_evt_handler</a> from gapc_hci.o(i.hci_enc_chg_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[18d]">hci_enc_key_refr_evt_handler</a> from gapc_hci.o(i.hci_enc_key_refr_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1cc]">hci_flush_cmd_handler</a> from llc_hci.o(i.hci_flush_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[20f]">hci_host_buf_size_cmd_handler</a> from llm_hci.o(i.hci_host_buf_size_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[210]">hci_host_nb_cmp_pkts_cmd_handler</a> from llm_hci.o(i.hci_host_nb_cmp_pkts_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[238]">hci_host_nb_cmp_pkts_cmd_pkupk</a> from hci_msg.o(i.hci_host_nb_cmp_pkts_cmd_pkupk) referenced from hci_msg.o(.constdata)
 <LI><a href="#[1a2]">hci_le_adv_report_evt_handler</a> from gapm_hci.o(i.hci_le_adv_report_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[23d]">hci_le_adv_report_evt_pkupk</a> from hci_msg.o(i.hci_le_adv_report_evt_pkupk) referenced from hci_msg.o(.constdata)
 <LI><a href="#[1a4]">hci_le_con_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_con_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[1d1]">hci_le_con_update_cmd_handler</a> from llc_hci.o(i.hci_le_con_update_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[185]">hci_le_con_update_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_con_update_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1fc]">hci_le_create_con_cancel_cmd_handler</a> from llm_hci.o(i.hci_le_create_con_cancel_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1fb]">hci_le_create_con_cmd_handler</a> from llm_hci.o(i.hci_le_create_con_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[187]">hci_le_data_len_chg_evt_handler</a> from gapc_hci.o(i.hci_le_data_len_chg_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1a3]">hci_le_dir_adv_report_evt_handler</a> from gapm_hci.o(i.hci_le_dir_adv_report_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[23e]">hci_le_dir_adv_report_evt_pkupk</a> from hci_msg.o(i.hci_le_dir_adv_report_evt_pkupk) referenced from hci_msg.o(.constdata)
 <LI><a href="#[19d]">hci_le_enc_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_enc_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[200]">hci_le_enc_cmd_handler</a> from llm_hci.o(i.hci_le_enc_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1a5]">hci_le_enh_con_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_enh_con_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[213]">hci_le_enh_privacy_info_cmd_handler</a> from llm_hci.o(i.hci_le_enh_privacy_info_cmd_handler) referenced 3 times from llm_hci.o(.constdata)
 <LI><a href="#[212]">hci_le_enh_privacy_mgmt_cmd_handler</a> from llm_hci.o(i.hci_le_enh_privacy_mgmt_cmd_handler) referenced 5 times from llm_hci.o(.constdata)
 <LI><a href="#[215]">hci_le_generate_dhkey_cmd_handler</a> from llm_hci.o(i.hci_le_generate_dhkey_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1a7]">hci_le_generate_dhkey_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_generate_dhkey_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[1d6]">hci_le_ltk_req_neg_reply_cmd_handler</a> from llc_hci.o(i.hci_le_ltk_req_neg_reply_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[1d5]">hci_le_ltk_req_reply_cmd_handler</a> from llc_hci.o(i.hci_le_ltk_req_reply_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[188]">hci_le_ltk_request_evt_handler</a> from gapc_hci.o(i.hci_le_ltk_request_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[19e]">hci_le_rand_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rand_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[201]">hci_le_rand_cmd_handler</a> from llm_hci.o(i.hci_le_rand_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1f5]">hci_le_rd_adv_ch_tx_pw_cmd_handler</a> from llm_hci.o(i.hci_le_rd_adv_ch_tx_pw_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[19c]">hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[190]">hci_le_rd_buff_size_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_buff_size_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[1f1]">hci_le_rd_buff_size_cmd_handler</a> from llm_hci.o(i.hci_le_rd_buff_size_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1d2]">hci_le_rd_chnl_map_cmd_handler</a> from llc_hci.o(i.hci_le_rd_chnl_map_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[214]">hci_le_rd_local_p256_public_key_cmd_handler</a> from llm_hci.o(i.hci_le_rd_local_p256_public_key_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1a6]">hci_le_rd_local_p256_public_key_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_local_p256_public_key_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[1f2]">hci_le_rd_local_supp_feats_cmd_handler</a> from llm_hci.o(i.hci_le_rd_local_supp_feats_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[196]">hci_le_rd_max_data_len_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_max_data_len_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[205]">hci_le_rd_max_data_len_cmd_handler</a> from llm_hci.o(i.hci_le_rd_max_data_len_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1a0]">hci_le_rd_ral_addr_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_ral_addr_cmd_cmp_evt_handler) referenced 2 times from gapm_hci.o(.constdata)
 <LI><a href="#[19f]">hci_le_rd_ral_size_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_ral_size_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[1d3]">hci_le_rd_rem_used_feats_cmd_handler</a> from llc_hci.o(i.hci_le_rd_rem_used_feats_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[184]">hci_le_rd_rem_used_feats_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_rd_rem_used_feats_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[195]">hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[203]">hci_le_rd_suggted_dft_data_len_cmd_handler</a> from llm_hci.o(i.hci_le_rd_suggted_dft_data_len_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[202]">hci_le_rd_supp_states_cmd_handler</a> from llm_hci.o(i.hci_le_rd_supp_states_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1fe]">hci_le_rd_wl_size_cmd_handler</a> from llm_hci.o(i.hci_le_rd_wl_size_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[197]">hci_le_rd_wlst_size_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_le_rd_wlst_size_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[186]">hci_le_rem_con_param_req_evt_handler</a> from gapc_hci.o(i.hci_le_rem_con_param_req_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1d8]">hci_le_rem_con_param_req_neg_reply_cmd_handler</a> from llc_hci.o(i.hci_le_rem_con_param_req_neg_reply_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[1d7]">hci_le_rem_con_param_req_reply_cmd_handler</a> from llc_hci.o(i.hci_le_rem_con_param_req_reply_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[1f6]">hci_le_set_adv_data_cmd_handler</a> from llm_hci.o(i.hci_le_set_adv_data_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1f7]">hci_le_set_adv_en_cmd_handler</a> from llm_hci.o(i.hci_le_set_adv_en_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1f4]">hci_le_set_adv_param_cmd_handler</a> from llm_hci.o(i.hci_le_set_adv_param_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[180]">hci_le_set_data_len_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_le_set_data_len_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1d9]">hci_le_set_data_len_cmd_handler</a> from llc_hci.o(i.hci_le_set_data_len_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[1f0]">hci_le_set_evt_mask_cmd_handler</a> from llm_hci.o(i.hci_le_set_evt_mask_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1fd]">hci_le_set_host_ch_class_cmd_handler</a> from llm_hci.o(i.hci_le_set_host_ch_class_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1f3]">hci_le_set_rand_add_cmd_handler</a> from llm_hci.o(i.hci_le_set_rand_add_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1fa]">hci_le_set_scan_en_cmd_handler</a> from llm_hci.o(i.hci_le_set_scan_en_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1f9]">hci_le_set_scan_param_cmd_handler</a> from llm_hci.o(i.hci_le_set_scan_param_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1f8]">hci_le_set_scan_rsp_data_cmd_handler</a> from llm_hci.o(i.hci_le_set_scan_rsp_data_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1d4]">hci_le_start_enc_cmd_handler</a> from llc_hci.o(i.hci_le_start_enc_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[183]">hci_le_start_enc_stat_evt_handler</a> from gapc_hci.o(i.hci_le_start_enc_stat_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[206]">hci_le_test_mode_mngt_cmd_handler</a> from llm_hci.o(i.hci_le_test_mode_mngt_cmd_handler) referenced 3 times from llm_hci.o(.constdata)
 <LI><a href="#[1ff]">hci_le_wl_mngt_cmd_handler</a> from llm_hci.o(i.hci_le_wl_mngt_cmd_handler) referenced 3 times from llm_hci.o(.constdata)
 <LI><a href="#[204]">hci_le_wr_suggted_dft_data_len_cmd_handler</a> from llm_hci.o(i.hci_le_wr_suggted_dft_data_len_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[13e]">hci_nb_cmp_pkts_evt_handler</a> from l2cc_task.o(i.hci_nb_cmp_pkts_evt_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[192]">hci_no_operation_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_no_operation_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[17e]">hci_rd_auth_payl_to_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_auth_payl_to_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1cf]">hci_rd_auth_payl_to_cmd_handler</a> from llc_hci.o(i.hci_rd_auth_payl_to_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[194]">hci_rd_bd_addr_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_rd_bd_addr_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[208]">hci_rd_bd_addr_cmd_handler</a> from llm_hci.o(i.hci_rd_bd_addr_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[191]">hci_rd_buff_size_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_rd_buff_size_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[211]">hci_rd_buff_size_cmd_handler</a> from llm_hci.o(i.hci_rd_buff_size_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[17d]">hci_rd_chnl_map_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_chnl_map_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[20a]">hci_rd_local_supp_cmds_cmd_handler</a> from llm_hci.o(i.hci_rd_local_supp_cmds_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[20b]">hci_rd_local_supp_feats_cmd_handler</a> from llm_hci.o(i.hci_rd_local_supp_feats_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[193]">hci_rd_local_ver_info_cmd_cmp_evt_handler</a> from gapm_hci.o(i.hci_rd_local_ver_info_cmd_cmp_evt_handler) referenced from gapm_hci.o(.constdata)
 <LI><a href="#[209]">hci_rd_local_ver_info_cmd_handler</a> from llm_hci.o(i.hci_rd_local_ver_info_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[1cb]">hci_rd_rem_ver_info_cmd_handler</a> from llc_hci.o(i.hci_rd_rem_ver_info_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[18a]">hci_rd_rem_ver_info_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_rem_ver_info_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[17c]">hci_rd_rssi_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_rd_rssi_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1ce]">hci_rd_rssi_cmd_handler</a> from llc_hci.o(i.hci_rd_rssi_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[1cd]">hci_rd_tx_pwr_lvl_cmd_handler</a> from llc_hci.o(i.hci_rd_tx_pwr_lvl_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[207]">hci_reset_cmd_handler</a> from llm_hci.o(i.hci_reset_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[20c]">hci_set_ctrl_to_host_flow_ctrl_cmd_handler</a> from llm_hci.o(i.hci_set_ctrl_to_host_flow_ctrl_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[20d]">hci_set_evt_mask_cmd_handler</a> from llm_hci.o(i.hci_set_evt_mask_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[20e]">hci_set_evt_mask_page_2_cmd_handler</a> from llm_hci.o(i.hci_set_evt_mask_page_2_cmd_handler) referenced from llm_hci.o(.constdata)
 <LI><a href="#[77]">hci_tx_done</a> from hci_tl.o(i.hci_tx_done) referenced from hci_tl.o(i.hci_tx_start)
 <LI><a href="#[170]">hci_user_ext_func_cmd_handler</a> from dbg_task.o(i.hci_user_ext_func_cmd_handler) referenced from dbg_task.o(.constdata)
 <LI><a href="#[17f]">hci_wr_auth_payl_to_cmd_cmp_evt_handler</a> from gapc_hci.o(i.hci_wr_auth_payl_to_cmd_cmp_evt_handler) referenced from gapc_hci.o(.constdata)
 <LI><a href="#[1d0]">hci_wr_auth_payl_to_cmd_handler</a> from llc_hci.o(i.hci_wr_auth_payl_to_cmd_handler) referenced from llc_hci.o(.constdata)
 <LI><a href="#[181]">ke_msg_discard</a> from ke_task.o(i.ke_msg_discard) referenced 2 times from gapc_hci.o(.constdata)
 <LI><a href="#[79]">ke_task_schedule</a> from ke_task.o(i.ke_task_schedule) referenced from ke_task.o(i.ke_task_init)
 <LI><a href="#[7b]">ke_timer_schedule</a> from ke_timer.o(i.ke_timer_schedule) referenced from ke_timer.o(i.ke_timer_init)
 <LI><a href="#[1c3]">l2c_code_conn_param_upd_req_handler</a> from l2cc_sig.o(i.l2c_code_conn_param_upd_req_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[70]">l2c_code_conn_param_upd_req_handler</a> from gapc_sig.o(i.l2c_code_conn_param_upd_req_handler) referenced from gapc_sig.o(i.gapc_sig_pdu_recv_handler)
 <LI><a href="#[1c4]">l2c_code_conn_param_upd_resp_handler</a> from l2cc_sig.o(i.l2c_code_conn_param_upd_resp_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[71]">l2c_code_conn_param_upd_resp_handler</a> from gapc_sig.o(i.l2c_code_conn_param_upd_resp_handler) referenced from gapc_sig.o(i.gapc_sig_pdu_recv_handler)
 <LI><a href="#[1c5]">l2c_code_disconnection_req_handler</a> from l2cc_sig.o(i.l2c_code_disconnection_req_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[1c6]">l2c_code_disconnection_resp_handler</a> from l2cc_sig.o(i.l2c_code_disconnection_resp_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[1c7]">l2c_code_le_cb_conn_req_handler</a> from l2cc_sig.o(i.l2c_code_le_cb_conn_req_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[1c8]">l2c_code_le_cb_conn_resp_handler</a> from l2cc_sig.o(i.l2c_code_le_cb_conn_resp_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[1c9]">l2c_code_le_flow_control_credit_handler</a> from l2cc_sig.o(i.l2c_code_le_flow_control_credit_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[1c2]">l2c_code_reject_handler</a> from l2cc_sig.o(i.l2c_code_reject_handler) referenced from l2cc_sig.o(.constdata)
 <LI><a href="#[6f]">l2c_code_reject_handler</a> from gapc_sig.o(i.l2c_code_reject_handler) referenced from gapc_sig.o(i.gapc_sig_pdu_recv_handler)
 <LI><a href="#[e2]">l2cc_cmp_evt_handler</a> from gapc_task.o(i.l2cc_cmp_evt_handler) referenced 2 times from gapc_task.o(.constdata)
 <LI><a href="#[138]">l2cc_dbg_pdu_send_cmd_handler</a> from l2cc_task.o(i.l2cc_dbg_pdu_send_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[13b]">l2cc_lecb_add_cmd_handler</a> from l2cc_task.o(i.l2cc_lecb_add_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[13a]">l2cc_lecb_connect_cfm_handler</a> from l2cc_task.o(i.l2cc_lecb_connect_cfm_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[139]">l2cc_lecb_connect_cmd_handler</a> from l2cc_task.o(i.l2cc_lecb_connect_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[13c]">l2cc_lecb_disconnect_cmd_handler</a> from l2cc_task.o(i.l2cc_lecb_disconnect_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[137]">l2cc_lecb_sdu_send_cmd_handler</a> from l2cc_task.o(i.l2cc_lecb_sdu_send_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[da]">l2cc_pdu_recv_ind_handler</a> from gapc_task.o(i.l2cc_pdu_recv_ind_handler) referenced 3 times from gapc_task.o(.constdata)
 <LI><a href="#[136]">l2cc_pdu_send_cmd_handler</a> from l2cc_task.o(i.l2cc_pdu_send_cmd_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[13d]">l2cc_signaling_trans_to_ind_handler</a> from l2cc_task.o(i.l2cc_signaling_trans_to_ind_handler) referenced from l2cc_task.o(.constdata)
 <LI><a href="#[7d]">l2cm_l2cap_tx_handler</a> from l2cm.o(i.l2cm_l2cap_tx_handler) referenced from l2cm.o(i.l2cm_init)
 <LI><a href="#[144]">llc_auth_payl_nearly_to_ind_handler</a> from llc_task.o(i.llc_auth_payl_nearly_to_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[145]">llc_auth_payl_real_to_ind_handler</a> from llc_task.o(i.llc_auth_payl_real_to_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[14b]">llc_chmap_update_req_ind_handler</a> from llc_task.o(i.llc_chmap_update_req_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[147]">llc_chnl_assess_timer_handler</a> from llc_task.o(i.llc_chnl_assess_timer_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[14a]">llc_con_upd_req_ind_handler</a> from llc_task.o(i.llc_con_upd_req_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[150]">llc_data_ind_handler</a> from llc_task.o(i.llc_data_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[141]">llc_dft_handler</a> from llc_task.o(i.llc_dft_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[148]">llc_enc_mgt_ind_handler</a> from llc_task.o(i.llc_enc_mgt_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[14f]">llc_hci_acl_data_tx_handler</a> from llc_hci.o(i.llc_hci_acl_data_tx_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[14e]">llc_hci_command_handler</a> from llc_hci.o(i.llc_hci_command_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[149]">llc_length_req_ind_handler</a> from llc_task.o(i.llc_length_req_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[143]">llc_link_sup_to_ind_handler</a> from llc_task.o(i.llc_link_sup_to_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[14d]">llc_llcp_recv_ind_handler</a> from llc_task.o(i.llc_llcp_recv_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[146]">llc_llcp_rsp_to_ind_handler</a> from llc_task.o(i.llc_llcp_rsp_to_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[1db]">llcp_channel_map_ind_handler</a> from llc_llcp.o(i.llcp_channel_map_ind_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e9]">llcp_con_param_req_handler</a> from llc_llcp.o(i.llcp_con_param_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1ea]">llcp_con_param_rsp_handler</a> from llc_llcp.o(i.llcp_con_param_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1da]">llcp_con_upd_ind_handler</a> from llc_llcp.o(i.llcp_con_upd_ind_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1dd]">llcp_enc_req_handler</a> from llc_llcp.o(i.llcp_enc_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1de]">llcp_enc_rsp_handler</a> from llc_llcp.o(i.llcp_enc_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e2]">llcp_feats_req_handler</a> from llc_llcp.o(i.llcp_feats_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e3]">llcp_feats_rsp_handler</a> from llc_llcp.o(i.llcp_feats_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1ee]">llcp_length_req_handler</a> from llc_llcp.o(i.llcp_length_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1ef]">llcp_length_rsp_handler</a> from llc_llcp.o(i.llcp_length_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e4]">llcp_pause_enc_req_handler</a> from llc_llcp.o(i.llcp_pause_enc_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e5]">llcp_pause_enc_rsp_handler</a> from llc_llcp.o(i.llcp_pause_enc_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1ec]">llcp_ping_req_handler</a> from llc_llcp.o(i.llcp_ping_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1ed]">llcp_ping_rsp_handler</a> from llc_llcp.o(i.llcp_ping_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1eb]">llcp_reject_ind_ext_handler</a> from llc_llcp.o(i.llcp_reject_ind_ext_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e7]">llcp_reject_ind_handler</a> from llc_llcp.o(i.llcp_reject_ind_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e8]">llcp_slave_feature_req_handler</a> from llc_llcp.o(i.llcp_slave_feature_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1df]">llcp_start_enc_req_handler</a> from llc_llcp.o(i.llcp_start_enc_req_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e0]">llcp_start_enc_rsp_handler</a> from llc_llcp.o(i.llcp_start_enc_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1dc]">llcp_terminate_ind_handler</a> from llc_llcp.o(i.llcp_terminate_ind_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e1]">llcp_unknown_rsp_handler</a> from llc_llcp.o(i.llcp_unknown_rsp_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[1e6]">llcp_vers_ind_handler</a> from llc_llcp.o(i.llcp_vers_ind_handler) referenced from llc_llcp.o(.constdata)
 <LI><a href="#[7f]">lld_evt_canceled</a> from lld_evt.o(i.lld_evt_canceled) referenced 2 times from lld.o(i.lld_con_start)
 <LI><a href="#[7f]">lld_evt_canceled</a> from lld_evt.o(i.lld_evt_canceled) referenced from lld_evt.o(i.lld_evt_adv_create)
 <LI><a href="#[7f]">lld_evt_canceled</a> from lld_evt.o(i.lld_evt_canceled) referenced from lld_evt.o(i.lld_evt_move_to_slave)
 <LI><a href="#[7f]">lld_evt_canceled</a> from lld_evt.o(i.lld_evt_canceled) referenced from lld_evt.o(i.lld_evt_scan_create)
 <LI><a href="#[81]">lld_evt_deffered_elt_handler</a> from lld_evt.o(i.lld_evt_deffered_elt_handler) referenced from lld_evt.o(i.lld_evt_init)
 <LI><a href="#[82]">lld_evt_delete_elt_handler</a> from lld_evt.o(i.lld_evt_delete_elt_handler) referenced from lld_evt.o(i.lld_evt_init)
 <LI><a href="#[80]">lld_evt_prevent_stop</a> from lld_evt.o(i.lld_evt_prevent_stop) referenced 2 times from lld.o(i.lld_con_start)
 <LI><a href="#[80]">lld_evt_prevent_stop</a> from lld_evt.o(i.lld_evt_prevent_stop) referenced from lld_evt.o(i.lld_evt_adv_create)
 <LI><a href="#[80]">lld_evt_prevent_stop</a> from lld_evt.o(i.lld_evt_prevent_stop) referenced from lld_evt.o(i.lld_evt_move_to_slave)
 <LI><a href="#[80]">lld_evt_prevent_stop</a> from lld_evt.o(i.lld_evt_prevent_stop) referenced from lld_evt.o(i.lld_evt_scan_create)
 <LI><a href="#[7e]">lld_evt_schedule</a> from lld_evt.o(i.lld_evt_schedule) referenced 2 times from lld.o(i.lld_con_start)
 <LI><a href="#[7e]">lld_evt_schedule</a> from lld_evt.o(i.lld_evt_schedule) referenced from lld_evt.o(i.lld_evt_adv_create)
 <LI><a href="#[7e]">lld_evt_schedule</a> from lld_evt.o(i.lld_evt_schedule) referenced from lld_evt.o(i.lld_evt_move_to_slave)
 <LI><a href="#[7e]">lld_evt_schedule</a> from lld_evt.o(i.lld_evt_schedule) referenced from lld_evt.o(i.lld_evt_scan_create)
 <LI><a href="#[232]">lld_pdu_cntl_aligned_unpk</a> from lld_pdu.o(i.lld_pdu_cntl_aligned_unpk) referenced 18 times from lld_pdu.o(.constdata)
 <LI><a href="#[233]">lld_pdu_llcp_con_param_req_unpk</a> from lld_pdu.o(i.lld_pdu_llcp_con_param_req_unpk) referenced from lld_pdu.o(.constdata)
 <LI><a href="#[234]">lld_pdu_llcp_con_param_rsp_unpk</a> from lld_pdu.o(i.lld_pdu_llcp_con_param_rsp_unpk) referenced from lld_pdu.o(.constdata)
 <LI><a href="#[235]">lld_pdu_llcp_length_req_unpk</a> from lld_pdu.o(i.lld_pdu_llcp_length_req_unpk) referenced from lld_pdu.o(.constdata)
 <LI><a href="#[236]">lld_pdu_llcp_length_rsp_unpk</a> from lld_pdu.o(i.lld_pdu_llcp_length_rsp_unpk) referenced from lld_pdu.o(.constdata)
 <LI><a href="#[142]">lld_stop_ind_handler</a> from llc_task.o(i.lld_stop_ind_handler) referenced 3 times from llc_task.o(.constdata)
 <LI><a href="#[151]">llm_dft_handler</a> from llm_task.o(i.llm_dft_handler) referenced from llm_task.o(.constdata)
 <LI><a href="#[155]">llm_ecc_result_ind_handler</a> from llm_task.o(i.llm_ecc_result_ind_handler) referenced from llm_task.o(.constdata)
 <LI><a href="#[14c]">llm_enc_ind_handler</a> from llc_task.o(i.llm_enc_ind_handler) referenced from llc_task.o(.constdata)
 <LI><a href="#[154]">llm_enc_req_handler</a> from llm_task.o(i.llm_enc_req_handler) referenced from llm_task.o(.constdata)
 <LI><a href="#[83]">llm_encryption_done</a> from llm.o(i.llm_encryption_done) referenced from llm.o(i.llm_init)
 <LI><a href="#[156]">llm_le_enh_priv_addr_renew_timer_handler</a> from llm_task.o(i.llm_le_enh_priv_addr_renew_timer_handler) referenced from llm_task.o(.constdata)
 <LI><a href="#[153]">llm_le_set_host_ch_class_cmd_sto_handler</a> from llm_task.o(i.llm_le_set_host_ch_class_cmd_sto_handler) referenced from llm_task.o(.constdata)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[176]">nvds_del</a> from nvds.o(i.nvds_del) referenced 2 times from nvds.o(.constdata)
 <LI><a href="#[174]">nvds_erase</a> from nvds.o(i.nvds_erase) referenced from nvds.o(.constdata)
 <LI><a href="#[175]">nvds_get</a> from nvds.o(i.nvds_get) referenced 2 times from nvds.o(.constdata)
 <LI><a href="#[177]">nvds_lock</a> from nvds.o(i.nvds_lock) referenced 2 times from nvds.o(.constdata)
 <LI><a href="#[17b]">nvds_null_erase</a> from nvds.o(i.nvds_null_erase) referenced from nvds.o(.constdata)
 <LI><a href="#[179]">nvds_null_read</a> from nvds.o(i.nvds_null_read) referenced from nvds.o(.constdata)
 <LI><a href="#[17a]">nvds_null_write</a> from nvds.o(i.nvds_null_write) referenced from nvds.o(.constdata)
 <LI><a href="#[178]">nvds_put</a> from nvds.o(i.nvds_put) referenced 2 times from nvds.o(.constdata)
 <LI><a href="#[172]">nvds_read</a> from nvds.o(i.nvds_read) referenced from nvds.o(.constdata)
 <LI><a href="#[173]">nvds_write</a> from nvds.o(i.nvds_write) referenced from nvds.o(.constdata)
 <LI><a href="#[cc]">prf_add_profile</a> from prf.o(i.prf_add_profile) referenced from qnble.o(.constdata)
 <LI><a href="#[c8]">prf_cleanup</a> from prf.o(i.prf_cleanup) referenced from qnble.o(.constdata)
 <LI><a href="#[c9]">prf_create</a> from prf.o(i.prf_create) referenced from qnble.o(.constdata)
 <LI><a href="#[cd]">prf_env_get</a> from prf.o(i.prf_env_get) referenced from qnble.o(.constdata)
 <LI><a href="#[ca]">prf_get_id_from_task</a> from prf.o(i.prf_get_id_from_task) referenced from qnble.o(.constdata)
 <LI><a href="#[cb]">prf_get_task_from_id</a> from prf.o(i.prf_get_task_from_id) referenced from qnble.o(.constdata)
 <LI><a href="#[c7]">prf_init</a> from prf.o(i.prf_init) referenced from qnble.o(.constdata)
 <LI><a href="#[c1]">proxr_cleanup</a> from proxr.o(i.proxr_cleanup) referenced from proxr.o(.constdata)
 <LI><a href="#[c0]">proxr_create</a> from proxr.o(i.proxr_create) referenced from proxr.o(.constdata)
 <LI><a href="#[bf]">proxr_destroy</a> from proxr.o(i.proxr_destroy) referenced from proxr.o(.constdata)
 <LI><a href="#[be]">proxr_init</a> from proxr.o(i.proxr_init) referenced from proxr.o(.constdata)
 <LI><a href="#[86]">rf_force_agc_enable</a> from rf.o(i.rf_force_agc_enable) referenced from rf.o(i.rf_init)
 <LI><a href="#[88]">rf_reset</a> from rf.o(i.rf_reset) referenced from rf.o(i.rf_init)
 <LI><a href="#[85]">rf_rssi_convert</a> from rf.o(i.rf_rssi_convert) referenced from rf.o(i.rf_init)
 <LI><a href="#[87]">rf_sleep</a> from rf.o(i.rf_sleep) referenced from rf.o(i.rf_init)
 <LI><a href="#[84]">rf_txpwr_dbm_get</a> from rf.o(i.rf_txpwr_dbm_get) referenced from rf.o(i.rf_init)
 <LI><a href="#[222]">smpc_construct_dhkey_check_pdu</a> from smpc_util.o(i.smpc_construct_dhkey_check_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[21b]">smpc_construct_enc_info_pdu</a> from smpc_util.o(i.smpc_construct_enc_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[21e]">smpc_construct_id_addr_info_pdu</a> from smpc_util.o(i.smpc_construct_id_addr_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[21d]">smpc_construct_id_info_pdu</a> from smpc_util.o(i.smpc_construct_id_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[223]">smpc_construct_keypress_notification_pdu</a> from smpc_util.o(i.smpc_construct_keypress_notification_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[21c]">smpc_construct_mst_id_pdu</a> from smpc_util.o(i.smpc_construct_mst_id_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[218]">smpc_construct_pair_cfm_pdu</a> from smpc_util.o(i.smpc_construct_pair_cfm_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[21a]">smpc_construct_pair_fail_pdu</a> from smpc_util.o(i.smpc_construct_pair_fail_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[219]">smpc_construct_pair_rand_pdu</a> from smpc_util.o(i.smpc_construct_pair_rand_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[216]">smpc_construct_pair_req_pdu</a> from smpc_util.o(i.smpc_construct_pair_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[217]">smpc_construct_pair_rsp_pdu</a> from smpc_util.o(i.smpc_construct_pair_rsp_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[221]">smpc_construct_public_key_pdu</a> from smpc_util.o(i.smpc_construct_public_key_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[220]">smpc_construct_sec_req_pdu</a> from smpc_util.o(i.smpc_construct_sec_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[21f]">smpc_construct_sign_info_pdu</a> from smpc_util.o(i.smpc_construct_sign_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[230]">smpc_recv_dhkey_check_pdu</a> from smpc_util.o(i.smpc_recv_dhkey_check_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[229]">smpc_recv_enc_info_pdu</a> from smpc_util.o(i.smpc_recv_enc_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[22c]">smpc_recv_id_addr_info_pdu</a> from smpc_util.o(i.smpc_recv_id_addr_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[22b]">smpc_recv_id_info_pdu</a> from smpc_util.o(i.smpc_recv_id_info_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[231]">smpc_recv_keypress_notification_pdu</a> from smpc_util.o(i.smpc_recv_keypress_notification_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[22a]">smpc_recv_mst_id_pdu</a> from smpc_util.o(i.smpc_recv_mst_id_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[226]">smpc_recv_pair_cfm_pdu</a> from smpc_util.o(i.smpc_recv_pair_cfm_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[228]">smpc_recv_pair_fail_pdu</a> from smpc_util.o(i.smpc_recv_pair_fail_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[227]">smpc_recv_pair_rand_pdu</a> from smpc_util.o(i.smpc_recv_pair_rand_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[224]">smpc_recv_pair_req_pdu</a> from smpc_util.o(i.smpc_recv_pair_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[225]">smpc_recv_pair_rsp_pdu</a> from smpc_util.o(i.smpc_recv_pair_rsp_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[22f]">smpc_recv_public_key_pdu</a> from smpc_util.o(i.smpc_recv_public_key_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[22e]">smpc_recv_sec_req_pdu</a> from smpc_util.o(i.smpc_recv_sec_req_pdu) referenced from smpc_util.o(.constdata)
 <LI><a href="#[22d]">smpc_recv_sign_info_pdu</a> from smpc_util.o(i.smpc_recv_sign_info_pdu) referenced from smpc_util.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[571]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[249]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[25f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[572]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[573]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[574]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[575]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[576]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXT_GPIO_WAKEUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>OSC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_SEC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CS_WAKEUP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CS_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>OSC_INT_LOW_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FSP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>QDEC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>QDEC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>WDT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>ADC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DAC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPIFI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_CAP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CALIB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>ACMP0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_DriverIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>ACMP1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>ADC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>BLE_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>BOD_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>CALIB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>CS_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>CS_WAKEUP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>DAC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>EXT_GPIO_WAKEUP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>FLASH_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[4c]"></a>FSP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>GPIOA_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOB_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>OSC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>OSC_INT_LOW_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>QDEC0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>QDEC1_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>RNG_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>RTC_CAP_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_FR_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_SEC_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>SPIFI0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>WDT_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>XTAL_READY_DriverIRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_qn908x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[24c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFRGClock
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
</UL>

<P><STRONG><a name="[29f]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SecGenTk
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SecGenLtk
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SecGenKey
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_handler
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_set_timeout
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_disconnect_cmd_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_add_cmd_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
</UL>

<P><STRONG><a name="[2ad]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConstructAdvData
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddBondedDev
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmStartAdvertiseCmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmSetDevConfigCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResolvAddrCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmAddrSolvedIndHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcGetDevInfoReqIndHandler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCfm
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionCfm
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondIndHandler
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCfm
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_pack
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_pdu_pack
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_pack
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_hdl_val_ntf_ind_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_supp_cmds_cmd_handler
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_rsp_data
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_data
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ecc_result_ind_handler
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_unpack
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_pdu_unpack
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_unpack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_value_req_handler
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_incl_ind_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_ind_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_desc_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_send_generate_dh_key
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_connect_op
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connect_op_sanity
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ral_mgt_cmd_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_dh_key_check_complete
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_util_unpack
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_util_pack
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_pack
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_cntl_aligned_unpk
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConstructAdvData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcGetDevInfoReqIndHandler
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
</UL>

<P><STRONG><a name="[577]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_reass_ch
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_get_local_ch_map
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_null_read
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[578]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[579]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_add_to_filter
</UL>

<P><STRONG><a name="[299]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_InitEnv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_reass_ch
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
</UL>

<P><STRONG><a name="[57a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e4]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_assert_err_evt_pkupk
</UL>

<P><STRONG><a name="[281]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByPeerKey
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByLocalKey
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_add
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connection_cfm_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_filtered
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_add_to_filter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[25b]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[25e]"></a>__aeabi_d2lz</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfixl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[2dc]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[2e0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[2de]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[251]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[57b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[57c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[57d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[57e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[253]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[338]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[57f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[580]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[261]"></a>ADAPTER_UartReceiveInt</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, uart_adapter.o(i.ADAPTER_UartReceiveInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = ADAPTER_UartReceiveInt &rArr; USART_TransferReceiveNonBlocking &rArr; USART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_Read
</UL>

<P><STRONG><a name="[263]"></a>ADAPTER_UartTransmitInt</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, uart_adapter.o(i.ADAPTER_UartTransmitInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ADAPTER_UartTransmitInt &rArr; USART_TransferSendNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferSendNonBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_Write
</UL>

<P><STRONG><a name="[265]"></a>ADXL362_GetRegisterValue</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, adxl362.o(i.ADXL362_GetRegisterValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ADXL362_GetRegisterValue &rArr; ADXL362_SPI_Read &rArr; SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_SPI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362ReadReg
</UL>

<P><STRONG><a name="[266]"></a>ADXL362_SPI_Read</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, spi_for_accel.o(i.ADXL362_SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ADXL362_SPI_Read &rArr; SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_GetRegisterValue
</UL>

<P><STRONG><a name="[67]"></a>APP_32kXtalWakeupTimerHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_ble_task.o(i.APP_32kXtalWakeupTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = APP_32kXtalWakeupTimerHandler &rArr; CLOCK_AttachClk
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ble_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> power_manager.o(i.PM_SetPowerDownMode)
</UL>
<P><STRONG><a name="[26b]"></a>APP_AddBondedDev</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, app_ble.o(i.APP_AddBondedDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_AddBondedDev &rArr; APP_FindBondedDevByAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByAddr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondIndHandler
</UL>

<P><STRONG><a name="[26e]"></a>APP_AddPrfTask</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, app_ble.o(i.APP_AddPrfTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = APP_AddPrfTask &rArr; APP_BleReadyCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleReadyCallback
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmProfileAddedIndHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
</UL>

<P><STRONG><a name="[241]"></a>APP_AdvertisingStopCallback</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.APP_AdvertisingStopCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = APP_AdvertisingStopCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
</UL>

<P><STRONG><a name="[89]"></a>APP_BassAddProfileTask</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, app_bass.o(i.APP_BassAddProfileTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_BassAddProfileTask &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>APP_BassBattLevelNtfCfgIndHandler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_bass.o(i.APP_BassBattLevelNtfCfgIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_BassBattLevelNtfCfgIndHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_bass.o(.constdata)
</UL>
<P><STRONG><a name="[274]"></a>APP_BassBattLevelUpdReq</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app_bass.o(i.APP_BassBattLevelUpdReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_BassBattLevelUpdReq &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLvlChkTimerHandler
</UL>

<P><STRONG><a name="[b1]"></a>APP_BassBattLevelUpdRspHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_bass.o(i.APP_BassBattLevelUpdRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_BassBattLevelUpdRspHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_bass.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>APP_BassBattLvlChkTimerHandler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, app_bass.o(i.APP_BassBattLvlChkTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_BassBattLvlChkTimerHandler &rArr; APP_BassBattLevelUpdReq &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_GetBatteryLevel
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLevelUpdReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(i.APP_GapcConnectionReqIndHandler)
</UL>
<P><STRONG><a name="[277]"></a>APP_BassEnableReq</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_bass.o(i.APP_BassEnableReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_BassEnableReq &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
</UL>

<P><STRONG><a name="[b2]"></a>APP_BassEnableRspHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_bass.o(i.APP_BassEnableRspHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_BassEnableRspHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_bass.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>APP_BleReadyCallback</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, main.o(i.APP_BleReadyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = APP_BleReadyCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmStartAdvertiseCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddPrfTask
</UL>

<P><STRONG><a name="[243]"></a>APP_ButtonDownCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.APP_ButtonDownCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = APP_ButtonDownCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ButtonDownHandler
</UL>

<P><STRONG><a name="[5f]"></a>APP_ButtonDownHandler</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, app_ble_task.o(i.APP_ButtonDownHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = APP_ButtonDownHandler &rArr; APP_ButtonDownCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ButtonDownCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_Init)
</UL>
<P><STRONG><a name="[244]"></a>APP_ConnectionEstablishedCallback</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main.o(i.APP_ConnectionEstablishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = APP_ConnectionEstablishedCallback &rArr; APP_ProxrStopAlert &rArr; LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrStopAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
</UL>

<P><STRONG><a name="[245]"></a>APP_ConnectionTerminatedCallback</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, main.o(i.APP_ConnectionTerminatedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = APP_ConnectionTerminatedCallback &rArr; APP_ProxrStopAlert &rArr; LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmStartAdvertiseCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrStopAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
</UL>

<P><STRONG><a name="[27d]"></a>APP_ConstructAdvData</STRONG> (Thumb, 356 bytes, Stack size 280 bytes, app_ble.o(i.APP_ConstructAdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = APP_ConstructAdvData &rArr; nvds_get
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_InitEnv
</UL>

<P><STRONG><a name="[26c]"></a>APP_FindBondedDevByAddr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, app_ble.o(i.APP_FindBondedDevByAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_FindBondedDevByAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddBondedDev
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
</UL>

<P><STRONG><a name="[280]"></a>APP_FindBondedDevByLocalKey</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, app_ble.o(i.APP_FindBondedDevByLocalKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = APP_FindBondedDevByLocalKey &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptReqIndHandler
</UL>

<P><STRONG><a name="[282]"></a>APP_FindBondedDevByPeerKey</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, app_ble.o(i.APP_FindBondedDevByPeerKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = APP_FindBondedDevByPeerKey &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmAddrSolvedIndHandler
</UL>

<P><STRONG><a name="[246]"></a>APP_GapSetDevCfgCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.APP_GapSetDevCfgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = APP_GapSetDevCfgCallback &rArr; APP_GapmSetDevConfigCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmSetDevConfigCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
</UL>

<P><STRONG><a name="[284]"></a>APP_GapcBondCfm</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcBondCfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_GapcBondCfm &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondReqIndHandler
</UL>

<P><STRONG><a name="[285]"></a>APP_GapcBondCmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_gap.o(i.APP_GapcBondCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_GapcBondCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcSecurityIndHandler
</UL>

<P><STRONG><a name="[a5]"></a>APP_GapcBondIndHandler</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, app_gap.o(i.APP_GapcBondIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = APP_GapcBondIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddBondedDev
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>APP_GapcBondReqIndHandler</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, app_gap.o(i.APP_GapcBondReqIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = APP_GapcBondReqIndHandler &rArr; APP_TkExchangeCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SecGenTk
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SecGenLtk
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SecGenKey
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TkExchangeCallback
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>APP_GapcCmpEvtHandler</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcCmpEvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcCmpEvtHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>APP_GapcConChannelMapIndHandler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcConChannelMapIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcConChannelMapIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>APP_GapcConRssiIndHandler</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcConRssiIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcConRssiIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[289]"></a>APP_GapcConnectionCfm</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, app_gap.o(i.APP_GapcConnectionCfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_GapcConnectionCfm &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmAddrSolvedIndHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptReqIndHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
</UL>

<P><STRONG><a name="[9a]"></a>APP_GapcConnectionReqIndHandler</STRONG> (Thumb, 420 bytes, Stack size 192 bytes, app_gap.o(i.APP_GapcConnectionReqIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = APP_GapcConnectionReqIndHandler &rArr; APP_ConnectionEstablishedCallback &rArr; APP_ProxrStopAlert &rArr; LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetLinkInfoByConhdl
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByAddr
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConnectionEstablishedCallback
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassEnableReq
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResolvAddrCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionCfm
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>APP_GapcDisconnectIndHandler</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, app_gap.o(i.APP_GapcDisconnectIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = APP_GapcDisconnectIndHandler &rArr; APP_ConnectionTerminatedCallback &rArr; APP_ProxrStopAlert &rArr; LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetLinkInfoByConhdl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPeerBdAddrByConhdl
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByAddr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConnectionTerminatedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[28e]"></a>APP_GapcEncryptCfm</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcEncryptCfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_GapcEncryptCfm &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptReqIndHandler
</UL>

<P><STRONG><a name="[28f]"></a>APP_GapcEncryptCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_gap.o(i.APP_GapcEncryptCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_GapcEncryptCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcSecurityIndHandler
</UL>

<P><STRONG><a name="[a7]"></a>APP_GapcEncryptIndHandler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcEncryptIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcEncryptIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>APP_GapcEncryptReqIndHandler</STRONG> (Thumb, 234 bytes, Stack size 112 bytes, app_gap.o(i.APP_GapcEncryptReqIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = APP_GapcEncryptReqIndHandler &rArr; APP_GapcConnectionCfm &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByLocalKey
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionCfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>APP_GapcGetDevInfoReqIndHandler</STRONG> (Thumb, 272 bytes, Stack size 280 bytes, app_gap.o(i.APP_GapcGetDevInfoReqIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = APP_GapcGetDevInfoReqIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>APP_GapcLePingToValIndHandler</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcLePingToValIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcLePingToValIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>APP_GapcLePktSizeIndHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcLePktSizeIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcLePktSizeIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[290]"></a>APP_GapcParamUpdateCfm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_gap.o(i.APP_GapcParamUpdateCfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_GapcParamUpdateCfm &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcParamUpdateReqIndHandler
</UL>

<P><STRONG><a name="[a2]"></a>APP_GapcParamUpdateReqIndHandler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcParamUpdateReqIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = APP_GapcParamUpdateReqIndHandler &rArr; APP_GapcParamUpdateCfm &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcParamUpdateCfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>APP_GapcParamUpdatedIndHandler</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcParamUpdatedIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcParamUpdatedIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>APP_GapcPeerAttInfoIndHandler</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, app_gap.o(i.APP_GapcPeerAttInfoIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = APP_GapcPeerAttInfoIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>APP_GapcPeerFeaturesIndHandler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcPeerFeaturesIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcPeerFeaturesIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>APP_GapcPeerVersionIndHandler</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcPeerVersionIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcPeerVersionIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>APP_GapcSecurityIndHandler</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, app_gap.o(i.APP_GapcSecurityIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_GapcSecurityIndHandler &rArr; APP_GapcEncryptCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCmd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>APP_GapcSetDevInfoReqIndHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcSetDevInfoReqIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcSetDevInfoReqIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>APP_GapcSignCounterIndHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapcSignCounterIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapcSignCounterIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>APP_GapmAddrSolvedIndHandler</STRONG> (Thumb, 256 bytes, Stack size 112 bytes, app_gap.o(i.APP_GapmAddrSolvedIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = APP_GapmAddrSolvedIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByPeerKey
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionCfm
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>APP_GapmCmpEvtHandler</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, app_gap.o(i.APP_GapmCmpEvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = APP_GapmCmpEvtHandler &rArr; APP_AddPrfTask &rArr; APP_BleReadyCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddPrfTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapSetDevCfgCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdvertisingStopCallback
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmGetDevBdAddr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionCfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>APP_GapmDevAdvTxPowerIndHandler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmDevAdvTxPowerIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmDevAdvTxPowerIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>APP_GapmDevBdAddrIndHandler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, app_gap.o(i.APP_GapmDevBdAddrIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = APP_GapmDevBdAddrIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>APP_GapmDevVersionIndHandler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmDevVersionIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmDevVersionIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>APP_GapmDeviceReadyIndHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmDeviceReadyIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = APP_GapmDeviceReadyIndHandler &rArr; APP_GapmResetCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResetCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[291]"></a>APP_GapmGetDevBdAddr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_gap.o(i.APP_GapmGetDevBdAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = APP_GapmGetDevBdAddr &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
</UL>

<P><STRONG><a name="[96]"></a>APP_GapmMaxDataLenIndHandler</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmMaxDataLenIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmMaxDataLenIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>APP_GapmPeerNameIndHandler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmPeerNameIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmPeerNameIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>APP_GapmProfileAddedIndHandler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmProfileAddedIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = APP_GapmProfileAddedIndHandler &rArr; APP_AddPrfTask &rArr; APP_BleReadyCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddPrfTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>APP_GapmRalAddrIndHandler</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, app_gap.o(i.APP_GapmRalAddrIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = APP_GapmRalAddrIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>APP_GapmRalSizeIndHandler</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmRalSizeIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmRalSizeIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[293]"></a>APP_GapmResetCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_gap.o(i.APP_GapmResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = APP_GapmResetCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmDeviceReadyIndHandler
</UL>

<P><STRONG><a name="[28c]"></a>APP_GapmResolvAddrCmd</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmResolvAddrCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_GapmResolvAddrCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
</UL>

<P><STRONG><a name="[283]"></a>APP_GapmSetDevConfigCmd</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmSetDevConfigCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_GapmSetDevConfigCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapSetDevCfgCallback
</UL>

<P><STRONG><a name="[278]"></a>APP_GapmStartAdvertiseCmd</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, app_gap.o(i.APP_GapmStartAdvertiseCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = APP_GapmStartAdvertiseCmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleReadyCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConnectionTerminatedCallback
</UL>

<P><STRONG><a name="[95]"></a>APP_GapmSuggDfltDataLenIndHandler</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmSuggDfltDataLenIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmSuggDfltDataLenIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>APP_GapmUseEncBlockIndHandler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmUseEncBlockIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmUseEncBlockIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>APP_GapmWhiteListSizeIndHandler</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_gap.o(i.APP_GapmWhiteListSizeIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GapmWhiteListSizeIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(.constdata)
</UL>
<P><STRONG><a name="[28d]"></a>APP_GetPeerBdAddrByConhdl</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, app_ble.o(i.APP_GetPeerBdAddrByConhdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = APP_GetPeerBdAddrByConhdl
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
</UL>

<P><STRONG><a name="[295]"></a>APP_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_ble.o(i.APP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = APP_Init &rArr; APP_InitEnv &rArr; APP_ConstructAdvData &rArr; nvds_get
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RegisterMessageHandler
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_InitEnv
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ae]"></a>APP_InitBleCfg</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, qnble.o(i.APP_InitBleCfg))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[23f]"></a>APP_MsgHandler</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, app_ble_task.o(i.APP_MsgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_MsgHandler &rArr; APP_GetHandler &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble_task.o(.data)
</UL>
<P><STRONG><a name="[29b]"></a>APP_MsgSend</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(i.APP_MsgSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = APP_MsgSend &rArr; ke_msg_send &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleSoftwareWakeup
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleIsActive
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>APP_PlfReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qnble.o(i.APP_PlfReset))
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>APP_ProxrAddProfileTask</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_proxr.o(i.APP_ProxrAddProfileTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = APP_ProxrAddProfileTask &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(.constdata)
</UL>
<P><STRONG><a name="[247]"></a>APP_ProxrAlertCallback</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, main.o(i.APP_ProxrAlertCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = APP_ProxrAlertCallback &rArr; APP_ProxrStopAlert &rArr; LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrStopAlert
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAlertIndHandler
</UL>

<P><STRONG><a name="[b3]"></a>APP_ProxrAlertIndHandler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, app_proxr.o(i.APP_ProxrAlertIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = APP_ProxrAlertIndHandler &rArr; APP_ProxrAlertCallback &rArr; APP_ProxrStopAlert &rArr; LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAlertCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_proxr.o(.constdata)
</UL>
<P><STRONG><a name="[298]"></a>APP_RegisterMessageHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_ble.o(i.APP_RegisterMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = APP_RegisterMessageHandler &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[30d]"></a>APP_RestoreBleReg</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rwble.o(i.APP_RestoreBleReg))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[307]"></a>APP_SaveBleReg</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, rwble.o(i.APP_SaveBleReg))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[287]"></a>APP_SecGenKey</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_ble.o(i.APP_SecGenKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_SecGenKey
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_InitSmp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondReqIndHandler
</UL>

<P><STRONG><a name="[288]"></a>APP_SecGenLtk</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, app_ble.o(i.APP_SecGenLtk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_SecGenLtk
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondReqIndHandler
</UL>

<P><STRONG><a name="[286]"></a>APP_SecGenTk</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_ble.o(i.APP_SecGenTk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_SecGenTk
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondReqIndHandler
</UL>

<P><STRONG><a name="[28b]"></a>APP_SetLinkInfoByConhdl</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, app_ble.o(i.APP_SetLinkInfoByConhdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = APP_SetLinkInfoByConhdl
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
</UL>

<P><STRONG><a name="[28a]"></a>APP_TimerCfg</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_ble.o(i.APP_TimerCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = APP_TimerCfg &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RegisterMessageHandler
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MsgSend
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleIsActive
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionReqIndHandler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[240]"></a>APP_TimerCfgHandler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_ble_task.o(i.APP_TimerCfgHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = APP_TimerCfgHandler &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble_task.o(.data)
</UL>
<P><STRONG><a name="[248]"></a>APP_TkExchangeCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.APP_TkExchangeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = APP_TkExchangeCallback &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondReqIndHandler
</UL>

<P><STRONG><a name="[31b]"></a>Add2SelfBigHex256</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ecc_p256.o(i.Add2SelfBigHex256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Add2SelfBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
</UL>

<P><STRONG><a name="[2f0]"></a>AddBigHex256</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, ecc_p256.o(i.AddBigHex256))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AddBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
</UL>

<P><STRONG><a name="[2a1]"></a>AddPdiv2_256</STRONG> (Thumb, 290 bytes, Stack size 72 bytes, ecc_p256.o(i.AddPdiv2_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AddPdiv2_256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
</UL>

<P><STRONG><a name="[276]"></a>BATT_GetBatteryLevel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, battery.o(i.BATT_GetBatteryLevel))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLvlChkTimerHandler
</UL>

<P><STRONG><a name="[20]"></a>BLE_IRQHandler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, rwble.o(i.BLE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BLE_IRQHandler &rArr; lld_evt_end_isr &rArr; lld_evt_end &rArr; lld_pdu_rx_handler &rArr; llc_llcp_recv_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_timer_isr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_crypt_isr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_sw_isr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_finetimer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2ac]"></a>BLE_Init</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, qnble.o(i.BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BLE_Init &rArr; rwip_init &rArr; rwble_init &rArr; lld_init &rArr; lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ble_sleep
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_InitBleCfg
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unloaded_area_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rwip_ext_wakeup
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b3]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, clock_config.o(i.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_AttachClk
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b5]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, board.o(i.BOARD_InitDebugConsole))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = BOARD_InitDebugConsole &rArr; DbgConsole_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFRGClock
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b9]"></a>BOARD_InitPins</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pin_mux.o(i.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BOARD_InitPins &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bb]"></a>BOARD_WakeupRestore</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(i.BOARD_WakeupRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = BOARD_WakeupRestore &rArr; accel_spi_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_spi_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[2bc]"></a>BUTTON_EnableInterrupt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, button.o(i.BUTTON_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_WakeupRestore
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Init
</UL>

<P><STRONG><a name="[2c0]"></a>BUTTON_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, button.o(i.BUTTON_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = BUTTON_Init &rArr; TM_AllocateTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_AllocateTimer
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52b]"></a>BUTTON_SetGpioWakeupLevel</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, button.o(i.BUTTON_SetGpioWakeupLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUTTON_SetGpioWakeupLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c8]"></a>CALIB_SystemCalib</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, fsl_calibration.o(i.CALIB_SystemCalib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CALIB_SystemCalib &rArr; CALIB_HFRCO &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_RC
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_PowerOn
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_LFRCO
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_HFXO
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_HFRCO
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[268]"></a>CLOCK_AttachClk</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWdtConfig
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkSysConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkBleConfig
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk32KConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_32kXtalWakeupTimerHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[2ce]"></a>CLOCK_EnableClock</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_clock.o(i.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterPowerDown
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d7]"></a>CLOCK_GetFRGInputClock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFRGInputClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLOCK_GetFRGInputClock &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFRGClock
</UL>

<P><STRONG><a name="[29d]"></a>CLOCK_GetFreq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetXinFreq
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtFreq
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRco32MFreq
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetApbClkFreq
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbClkFreq
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Get32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAlertCallback
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_spi_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_WakeupRestore
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[2b4]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[2b6]"></a>CLOCK_SetFRGClock</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, fsl_clock.o(i.CLOCK_SetFRGClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLOCK_SetFRGClock &rArr; CLOCK_GetFRGInputClock &rArr; CLOCK_GetFreq &rArr; CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFRGInputClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[4f]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(i.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[2d9]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, fsl_ctimer.o(i.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[40]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, fsl_dma.o(i.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[2b7]"></a>DbgConsole_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = DbgConsole_Init &rArr; USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[271]"></a>DbgConsole_Printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ButtonDownCallback
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleReadyCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAlertIndHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GattcSvcChangedCfgIndHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GattcMtuChangedIndHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GattcCmpEvtHandler
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TkExchangeCallback
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConnectionEstablishedCallback
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AdvertisingStopCallback
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmWhiteListSizeIndHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmUseEncBlockIndHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmSuggDfltDataLenIndHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmRalSizeIndHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmRalAddrIndHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmPeerNameIndHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmMaxDataLenIndHandler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmDevVersionIndHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmDevBdAddrIndHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmDevAdvTxPowerIndHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmAddrSolvedIndHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcSignCounterIndHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcSetDevInfoReqIndHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcPeerVersionIndHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcPeerFeaturesIndHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcPeerAttInfoIndHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcParamUpdatedIndHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcLePktSizeIndHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcLePingToValIndHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcGetDevInfoReqIndHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptIndHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConRssiIndHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConChannelMapIndHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcCmpEvtHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondReqIndHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondIndHandler
</UL>

<P><STRONG><a name="[62]"></a>DbgConsole_Putchar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_debug_console.o(i.DbgConsole_Putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DbgConsole_Putchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[d1]"></a>EIF_FlowOff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eif_adapter.o(i.EIF_FlowOff))
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>EIF_FlowOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eif_adapter.o(i.EIF_FlowOn))
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>EIF_Read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, eif_adapter.o(i.EIF_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = EIF_Read &rArr; ADAPTER_UartReceiveInt &rArr; USART_TransferReceiveNonBlocking &rArr; USART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAPTER_UartReceiveInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>EIF_Write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, eif_adapter.o(i.EIF_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = EIF_Write &rArr; ADAPTER_UartTransmitInt &rArr; USART_TransferSendNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAPTER_UartTransmitInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[2e6]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[2e7]"></a>FLEXCOMM_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2e8]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_flexcomm.o(i.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLEXCOMM_SetPeriph &rArr; FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[2ea]"></a>GF_Jacobian_Point_Addition256</STRONG> (Thumb, 1644 bytes, Stack size 704 bytes, ecc_p256.o(i.GF_Jacobian_Point_Addition256))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notEqual256
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexByUint32_256
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_multiplication_uint8_256
</UL>

<P><STRONG><a name="[2ef]"></a>GF_Jacobian_Point_Double256</STRONG> (Thumb, 450 bytes, Stack size 528 bytes, ecc_p256.o(i.GF_Jacobian_Point_Double256))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex256
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex256
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexByUint32_256
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_multiplication_uint8_256
</UL>

<P><STRONG><a name="[13]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, button.o(i.GPIOA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOA_IRQHandler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MsgSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[2c1]"></a>GPIO_PinInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fsl_gpio.o(i.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Init
</UL>

<P><STRONG><a name="[29e]"></a>LED_Blink</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, led.o(i.LED_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAlertCallback
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrStopAlert
</UL>

<P><STRONG><a name="[2f7]"></a>LED_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LED_Init &rArr; TM_AllocateTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_AllocateTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ee]"></a>MultiplyBigHexByUint32_256</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, ecc_p256.o(i.MultiplyBigHexByUint32_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MultiplyBigHexByUint32_256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
</UL>

<P><STRONG><a name="[2ec]"></a>MultiplyBigHexModP256</STRONG> (Thumb, 510 bytes, Stack size 176 bytes, ecc_p256.o(i.MultiplyBigHexModP256))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[2fc]"></a>PM_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, power_manager.o(i.PM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PM_Init &rArr; POWER_EnablePD &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_RegisterWakeupEntry (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fe]"></a>PM_PowerManagement</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, power_manager.o(i.PM_PowerManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = PM_PowerManagement &rArr; PM_SetPowerDownMode &rArr; BOARD_WakeupRestore &rArr; accel_spi_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_GpioActiveRequest
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterSleep
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetReq
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_ClrReq
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30f]"></a>POWER_DisablePD</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_power.o(i.POWER_DisablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_DisablePD &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
</UL>

<P><STRONG><a name="[312]"></a>POWER_EnableDCDC</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fsl_power.o(i.POWER_EnableDCDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_EnableDCDC &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a6]"></a>POWER_EnablePD</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fsl_power.o(i.POWER_EnablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_EnablePD &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[308]"></a>POWER_EnableSwdWakeup</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, fsl_power.o(i.POWER_EnableSwdWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = POWER_EnableSwdWakeup &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[30a]"></a>POWER_EnterPowerDown</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, fsl_power.o(i.POWER_EnterPowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = POWER_EnterPowerDown &rArr; CLOCK_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterPowerDownInRam (via Veneer)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[302]"></a>POWER_EnterSleep</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fsl_power.o(i.POWER_EnterSleep))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[2ff]"></a>POWER_GpioActiveRequest</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fsl_power.o(i.POWER_GpioActiveRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_GpioActiveRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
</UL>

<P><STRONG><a name="[309]"></a>POWER_LatchIO</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_power.o(i.POWER_LatchIO))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[30b]"></a>POWER_RestoreIO</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fsl_power.o(i.POWER_RestoreIO))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[30c]"></a>POWER_RestoreSwd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fsl_power.o(i.POWER_RestoreSwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = POWER_RestoreSwd &rArr; IOCON_PinMuxSet
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[269]"></a>POWER_WritePmuCtrl1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_power.o(i.POWER_WritePmuCtrl1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_LFRCO
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_HFXO
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_HFRCO
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableDCDC
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_32kXtalWakeupTimerHandler
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[529]"></a>RF_ConfigRxMode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_rf.o(i.RF_ConfigRxMode))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31e]"></a>RTC_EnableInterrupts</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_Init
</UL>

<P><STRONG><a name="[10]"></a>RTC_FR_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer_adapter.o(i.RTC_FR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_FR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[321]"></a>RTC_FreeRunningEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_FreeRunningEnable))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StopTimer
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StartTimer
</UL>

<P><STRONG><a name="[320]"></a>RTC_SetFreeRunningInterruptThreshold</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_rtc.o(i.RTC_SetFreeRunningInterruptThreshold))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StartTimer
</UL>

<P><STRONG><a name="[315]"></a>SPI_GetInstance</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fsl_spi.o(i.SPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTransferBlocking
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[316]"></a>SPI_MasterGetDefaultConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_spi.o(i.SPI_MasterGetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SPI_MasterGetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_spi_init
</UL>

<P><STRONG><a name="[317]"></a>SPI_MasterInit</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, fsl_spi.o(i.SPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_spi_init
</UL>

<P><STRONG><a name="[318]"></a>SPI_MasterSetBaud</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fsl_spi.o(i.SPI_MasterSetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = SPI_MasterSetBaud &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[267]"></a>SPI_MasterTransferBlocking</STRONG> (Thumb, 510 bytes, Stack size 56 bytes, fsl_spi.o(i.SPI_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_SPI_Read
</UL>

<P><STRONG><a name="[2a2]"></a>SubtractBigHex256</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, ecc_p256.o(i.SubtractBigHex256))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SubtractBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2_256
</UL>

<P><STRONG><a name="[2ed]"></a>SubtractBigHexMod256</STRONG> (Thumb, 286 bytes, Stack size 68 bytes, ecc_p256.o(i.SubtractBigHexMod256))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SubtractBigHexMod256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex256
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex256
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
</UL>

<P><STRONG><a name="[2f1]"></a>SubtractFromSelfBigHex256</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ecc_p256.o(i.SubtractFromSelfBigHex256))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SubtractFromSelfBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHexMod256
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
</UL>

<P><STRONG><a name="[31a]"></a>SubtractFromSelfBigHexSign256</STRONG> (Thumb, 224 bytes, Stack size 68 bytes, ecc_p256.o(i.SubtractFromSelfBigHexSign256))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex256
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex256
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add2SelfBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, system_qn908x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(.text)
</UL>
<P><STRONG><a name="[322]"></a>TA_GetTimestamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_adapter.o(i.TA_GetTimestamp))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StartTimer
</UL>

<P><STRONG><a name="[31c]"></a>TA_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, timer_adapter.o(i.TA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnableInterrupts
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Init
</UL>

<P><STRONG><a name="[31f]"></a>TA_StartTimer</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timer_adapter.o(i.TA_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TA_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetFreeRunningInterruptThreshold
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FreeRunningEnable
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_GetTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearTimer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ExpiredTimerHandler
</UL>

<P><STRONG><a name="[323]"></a>TA_StopTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer_adapter.o(i.TA_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TA_StopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FreeRunningEnable
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearTimer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ExpiredTimerHandler
</UL>

<P><STRONG><a name="[2c2]"></a>TM_AllocateTimer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timer_manager.o(i.TM_AllocateTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = TM_AllocateTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimerStatus
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Init
</UL>

<P><STRONG><a name="[2f6]"></a>TM_ClearTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timer_manager.o(i.TM_ClearTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TM_ClearTimer &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_extract
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StopTimer
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BlinkTimerHandler
</UL>

<P><STRONG><a name="[32b]"></a>TM_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_manager.o(i.TM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_Init &rArr; TA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f4]"></a>TM_SetTimer</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, timer_manager.o(i.TM_SetTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_insert
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_extract
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimerStatus
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetTimerEntryAddress
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StartTimer
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_GetTimestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
</UL>

<P><STRONG><a name="[2f5]"></a>TM_UpdateInterval</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timer_manager.o(i.TM_UpdateInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = TM_UpdateInterval &rArr; TM_GetTimerEntryAddress &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetTimerEntryAddress
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BlinkTimerHandler
</UL>

<P><STRONG><a name="[2bd]"></a>USART_GetDefaultConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fsl_usart.o(i.USART_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = USART_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_WakeupRestore
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[2be]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = USART_Init &rArr; USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_WakeupRestore
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Init
</UL>

<P><STRONG><a name="[61]"></a>USART_ReadBlocking</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fsl_usart.o(i.USART_ReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = USART_ReadBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[32d]"></a>USART_SetBaudRate</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, fsl_usart.o(i.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[262]"></a>USART_TransferReceiveNonBlocking</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, fsl_usart.o(i.USART_TransferReceiveNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = USART_TransferReceiveNonBlocking &rArr; USART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAPTER_UartReceiveInt
</UL>

<P><STRONG><a name="[264]"></a>USART_TransferSendNonBlocking</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_TransferSendNonBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = USART_TransferSendNonBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADAPTER_UartTransmitInt
</UL>

<P><STRONG><a name="[60]"></a>USART_WriteBlocking</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = USART_WriteBlocking &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(i.DbgConsole_Init)
</UL>
<P><STRONG><a name="[2b]"></a>XTAL_READY_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, power_manager.o(i.XTAL_READY_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XTAL_READY_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_qn908x.o(RESET)
</UL>
<P><STRONG><a name="[437]"></a>__ARM_common_memclr4_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hci_fc.o(i.__ARM_common_memclr4_10))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_init
</UL>

<P><STRONG><a name="[3da]"></a>__ARM_common_memclr4_6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm_util.o(i.__ARM_common_memclr4_6))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_get_rpa
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_filtered
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
</UL>

<P><STRONG><a name="[51f]"></a>__ARM_common_memclr4_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llm.o(i.__ARM_common_memclr4_7))
<BR><BR>[Called By]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
</UL>

<P><STRONG><a name="[3ed]"></a>__ARM_common_memclr4_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm_util.o(i.__ARM_common_memclr4_8))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_supp_feats_cmd_handler
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[3f5]"></a>__ARM_common_memcpy4_5</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gapm_task.o(i.__ARM_common_memcpy4_5))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_chnl_map_cmd_handler
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_ind
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_host_ch_class_cmd_handler
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_update_channel_map
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_channel_map
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
</UL>

<P><STRONG><a name="[4c4]"></a>__ARM_common_memcpy4_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, llc.o(i.__ARM_common_memcpy4_6))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
</UL>

<P><STRONG><a name="[55e]"></a>__ARM_common_memcpy4_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smpc.o(i.__ARM_common_memcpy4_8))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
</UL>

<P><STRONG><a name="[339]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2b8]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_common.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterTransferBlocking
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterGetDefaultConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferSendNonBlocking
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadBlocking
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetDefaultConfig
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferGetRxRingBufferLength
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_AllocateTimer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimerStatus
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetTimerEntryAddress
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ExpiredTimerHandler
</UL>

<P><STRONG><a name="[2dd]"></a>__hardfp_modf</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __hardfp_modf &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[2df]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
</UL>

<P><STRONG><a name="[337]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[331]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[32f]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[335]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[332]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[336]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[581]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[582]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[583]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[330]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[33a]"></a>accelInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, accel_spi.o(i.accelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = accelInit &rArr; accel_SelfTest &rArr; adxl362ReadReg &rArr; ADXL362_GetRegisterValue &rArr; ADXL362_SPI_Read &rArr; SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_spi_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_SelfTest
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelPowerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33c]"></a>accel_SelfTest</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adxl362_spi.o(i.accel_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = accel_SelfTest &rArr; adxl362ReadReg &rArr; ADXL362_GetRegisterValue &rArr; ADXL362_SPI_Read &rArr; SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adxl362ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelInit
</UL>

<P><STRONG><a name="[2bf]"></a>accel_spi_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, spi_for_accel.o(i.accel_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = accel_spi_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterGetDefaultConfig
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelInit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_WakeupRestore
</UL>

<P><STRONG><a name="[33d]"></a>adxl362ReadReg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adxl362_spi.o(i.adxl362ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = adxl362ReadReg &rArr; ADXL362_GetRegisterValue &rArr; ADXL362_SPI_Read &rArr; SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_GetRegisterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_SelfTest
</UL>

<P><STRONG><a name="[33f]"></a>ahi_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ahi.o(i.ahi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ahi_init &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[343]"></a>ahi_send_msg</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ahi.o(i.ahi_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ahi_send_msg &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_send_handler
</UL>

<P><STRONG><a name="[50e]"></a>app_pkt_statistic</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lld_pdu.o(i.app_pkt_statistic))
<BR><BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
</UL>

<P><STRONG><a name="[26f]"></a>assert_err</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, dbg_assert.o(i.assert_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetHandler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RegisterMessageHandler
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConstructAdvData
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddPrfTask
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleSoftwareWakeup
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_create
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_cleanup
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLevelUpdReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmStartAdvertiseCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResolvAddrCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmProfileAddedIndHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmDeviceReadyIndHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcCmpEvtHandler
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCfm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_Write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_Read
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleSoftwareWakeup
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_TxCallback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_RxCallback
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleSoftwareWakeup
</UL>

<P><STRONG><a name="[352]"></a>attc_l2cc_pdu_recv_handler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, attc.o(i.attc_l2cc_pdu_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = attc_l2cc_pdu_recv_handler &rArr; ke_timer_clear &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[358]"></a>attc_send_att_req</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, attc.o(i.attc_send_att_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = attc_send_att_req &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
</UL>

<P><STRONG><a name="[359]"></a>attc_send_execute</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, attc.o(i.attc_send_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = attc_send_execute &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_execute_write_cmd_handler
</UL>

<P><STRONG><a name="[35a]"></a>attc_send_hdl_cfm</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, attc.o(i.attc_send_hdl_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attc_send_hdl_cfm &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cfm_handler
</UL>

<P><STRONG><a name="[357]"></a>attc_send_read_ind</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, attc.o(i.attc_send_read_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = attc_send_read_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
</UL>

<P><STRONG><a name="[35b]"></a>attm_att_set_permission</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, attm.o(i.attm_att_set_permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = attm_att_set_permission &rArr; attmdb_get_attribute
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_set_permission_req_handler
</UL>

<P><STRONG><a name="[35e]"></a>attm_att_set_value</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, attm.o(i.attm_att_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = attm_att_set_value &rArr; attmdb_get_attribute
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_set_value_req_handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
</UL>

<P><STRONG><a name="[35f]"></a>attm_att_update_perm</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, attm.o(i.attm_att_update_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = attm_att_update_perm &rArr; attmdb_get_attribute
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[360]"></a>attm_convert_to128</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, attm.o(i.attm_convert_to128))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
</UL>

<P><STRONG><a name="[361]"></a>attm_get_value</STRONG> (Thumb, 374 bytes, Stack size 96 bytes, attm.o(i.attm_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_value_req_handler
</UL>

<P><STRONG><a name="[363]"></a>attm_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, attm.o(i.attm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attm_init &rArr; attmdb_destroy &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[365]"></a>attm_is_bt16_uuid</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, attm.o(i.attm_is_bt16_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = attm_is_bt16_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>

<P><STRONG><a name="[366]"></a>attm_is_bt32_uuid</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, attm.o(i.attm_is_bt32_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>

<P><STRONG><a name="[367]"></a>attm_svc_create_db</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, attm.o(i.attm_svc_create_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = attm_svc_create_db &rArr; attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_attr
</UL>

<P><STRONG><a name="[369]"></a>attm_svc_get_permission</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, attm.o(i.attm_svc_get_permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attm_svc_get_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_permission_req_handler
</UL>

<P><STRONG><a name="[36b]"></a>attm_svc_set_permission</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, attm.o(i.attm_svc_set_permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attm_svc_set_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_set_permission_req_handler
</UL>

<P><STRONG><a name="[36c]"></a>attm_uuid16_comp</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, attm.o(i.attm_uuid16_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = attm_uuid16_comp &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
</UL>

<P><STRONG><a name="[353]"></a>attm_uuid_comp</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, attm.o(i.attm_uuid_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid16_comp
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt32_uuid
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt16_uuid
</UL>

<P><STRONG><a name="[368]"></a>attmdb_add_service</STRONG> (Thumb, 1100 bytes, Stack size 40 bytes, attm_db.o(i.attmdb_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid16_comp
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt32_uuid
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_is_bt16_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_add_svc_req_handler
</UL>

<P><STRONG><a name="[36d]"></a>attmdb_att_get_permission</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, attm_db.o(i.attmdb_att_get_permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attmdb_att_get_permission &rArr; attm_svc_get_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_get_permission
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_permission_req_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_info_req_handler
</UL>

<P><STRONG><a name="[364]"></a>attmdb_destroy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, attm_db.o(i.attmdb_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = attmdb_destroy &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_destroy_db_req_handler
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[35c]"></a>attmdb_get_attribute</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, attm_db.o(i.attmdb_get_attribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = attmdb_get_attribute
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_info_req_handler
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_update_perm
</UL>

<P><STRONG><a name="[36e]"></a>attmdb_get_max_len</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, attm_db.o(i.attmdb_get_max_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = attmdb_get_max_len
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
</UL>

<P><STRONG><a name="[416]"></a>attmdb_get_nb_svc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, attm_db.o(i.attmdb_get_nb_svc))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_list_req_handler
</UL>

<P><STRONG><a name="[377]"></a>attmdb_get_next_att</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, attm_db.o(i.attmdb_get_next_att))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = attmdb_get_next_att
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
</UL>

<P><STRONG><a name="[36a]"></a>attmdb_get_service</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, attm_db.o(i.attmdb_get_service))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_set_permission
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_get_permission
</UL>

<P><STRONG><a name="[36f]"></a>attmdb_get_svc_info</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, attm_db.o(i.attmdb_get_svc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = attmdb_get_svc_info &rArr; gapm_get_id_from_task
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_id_from_task
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_list_req_handler
</UL>

<P><STRONG><a name="[362]"></a>attmdb_get_uuid</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, attm_db.o(i.attmdb_get_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_info_req_handler
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
</UL>

<P><STRONG><a name="[35d]"></a>attmdb_uuid16_comp</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, attm_db.o(i.attmdb_uuid16_comp))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_max_len
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_update_perm
</UL>

<P><STRONG><a name="[370]"></a>atts_clear_prep_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, atts.o(i.atts_clear_prep_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atts_clear_prep_data &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
</UL>

<P><STRONG><a name="[371]"></a>atts_clear_read_cache</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, atts.o(i.atts_clear_read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atts_clear_read_cache &rArr; ke_msg_free &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
</UL>

<P><STRONG><a name="[372]"></a>atts_clear_rsp_data</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, atts.o(i.atts_clear_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
</UL>

<P><STRONG><a name="[37d]"></a>atts_l2cc_pdu_recv_handler</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, atts.o(i.atts_l2cc_pdu_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atts_l2cc_pdu_recv_handler &rArr; atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[37f]"></a>atts_send_error</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, atts.o(i.atts_send_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atts_send_error &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler
</UL>

<P><STRONG><a name="[380]"></a>atts_send_event</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, atts.o(i.atts_send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = atts_send_event &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
</UL>

<P><STRONG><a name="[381]"></a>atts_write_rsp_send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, atts.o(i.atts_write_rsp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atts_write_rsp_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
</UL>

<P><STRONG><a name="[382]"></a>atts_write_signed_cfm</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, atts.o(i.atts_write_signed_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atts_write_signed_cfm &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attm_svc_get_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
</UL>

<P><STRONG><a name="[383]"></a>bass_exe_operation</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, bass.o(i.bass_exe_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
</UL>

<P><STRONG><a name="[387]"></a>bass_get_att_handle</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, bass.o(i.bass_get_att_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bass_get_att_handle &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
</UL>

<P><STRONG><a name="[388]"></a>bass_get_att_idx</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bass.o(i.bass_get_att_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bass_get_att_idx &rArr; prf_env_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
</UL>

<P><STRONG><a name="[532]"></a>bass_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bass.o(i.bass_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[389]"></a>bigHexInversion256</STRONG> (Thumb, 726 bytes, Stack size 220 bytes, ecc_p256.o(i.bigHexInversion256))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = bigHexInversion256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;specialModP256
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex256
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddPdiv2_256
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
</UL>

<P><STRONG><a name="[27f]"></a>co_bdaddr_compare</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, co_utils.o(i.co_bdaddr_compare))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FindBondedDevByAddr
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_rand_add_cmd_handler
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_address_validity
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_wl_position
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_wl
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
</UL>

<P><STRONG><a name="[390]"></a>co_list_extract</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, co_list.o(i.co_list_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = co_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_msg_flush
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_remove
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_unregister_cmd_handler
</UL>

<P><STRONG><a name="[38c]"></a>co_list_extract_after</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, co_list.o(i.co_list_extract_after))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_cancel
</UL>

<P><STRONG><a name="[4f8]"></a>co_list_find</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, co_list.o(i.co_list_find))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
</UL>

<P><STRONG><a name="[32c]"></a>co_list_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, co_list.o(i.co_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_init
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
</UL>

<P><STRONG><a name="[38d]"></a>co_list_insert_after</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, co_list.o(i.co_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = co_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_cancel
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
</UL>

<P><STRONG><a name="[37e]"></a>co_list_insert_before</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, co_list.o(i.co_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = co_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
</UL>

<P><STRONG><a name="[50d]"></a>co_list_merge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, co_list.o(i.co_list_merge))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[327]"></a>co_list_pop_front</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, co_list.o(i.co_list_pop_front))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearTimer
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ExpiredTimerHandler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_le_psm_cleanup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_tx_done_evt_handler
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_schedule
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_sw_isr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_finetimer_isr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_done
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_send_packet
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush_list
</UL>

<P><STRONG><a name="[345]"></a>co_list_push_back</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, co_list.o(i.co_list_push_back))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_data_send
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_tx_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_flow_control_credit_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_handler
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_insert
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_enc_req_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_hci_acl_data_tx_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_send_cmd_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_ind_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_register_cmd_handler
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_send_msg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_finetimer_isr
</UL>

<P><STRONG><a name="[391]"></a>co_list_push_front</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, co_list.o(i.co_list_push_front))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[376]"></a>co_list_size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, co_list.o(i.co_list_size))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
</UL>

<P><STRONG><a name="[38a]"></a>dbg_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dbg.o(i.dbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dbg_init &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[2c7]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_calibration.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_RC
</UL>

<P><STRONG><a name="[38b]"></a>ea_elt_cancel</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, ea.o(i.ea_elt_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ea_elt_cancel &rArr; co_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_insert_after
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract_after
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
</UL>

<P><STRONG><a name="[38e]"></a>ea_elt_create</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ea.o(i.ea_elt_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ea_elt_create &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
</UL>

<P><STRONG><a name="[38f]"></a>ea_elt_insert</STRONG> (Thumb, 818 bytes, Stack size 48 bytes, ea.o(i.ea_elt_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ea_elt_insert &rArr; ea_elt_cancel &rArr; co_list_insert_after
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_cancel
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_prog_timer
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
</UL>

<P><STRONG><a name="[393]"></a>ea_elt_remove</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ea.o(i.ea_elt_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ea_elt_remove &rArr; ea_prog_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_prog_timer
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
</UL>

<P><STRONG><a name="[2a5]"></a>ea_finetimer_isr</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ea.o(i.ea_finetimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ea_finetimer_isr &rArr; ea_prog_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_prog_timer
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[394]"></a>ea_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ea.o(i.ea_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ea_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[395]"></a>ea_interval_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ea.o(i.ea_interval_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ea_interval_create &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
</UL>

<P><STRONG><a name="[4e8]"></a>ea_interval_duration_req</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, ea.o(i.ea_interval_duration_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ea_interval_duration_req
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req
</UL>

<P><STRONG><a name="[396]"></a>ea_interval_insert</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ea.o(i.ea_interval_insert))
<BR><BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
</UL>

<P><STRONG><a name="[397]"></a>ea_interval_remove</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ea.o(i.ea_interval_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ea_interval_remove &rArr; co_list_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
</UL>

<P><STRONG><a name="[4e9]"></a>ea_offset_req</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, ea.o(i.ea_offset_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ea_offset_req
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req
</UL>

<P><STRONG><a name="[53a]"></a>ea_sleep_check</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, ea.o(i.ea_sleep_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ea_sleep_check
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[2a9]"></a>ea_sw_isr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ea.o(i.ea_sw_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ea_sw_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[484]"></a>ea_time_get_halfslot_rounded</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ea.o(i.ea_time_get_halfslot_rounded))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_sleep_check
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_schedule
</UL>

<P><STRONG><a name="[398]"></a>ecc_gen_new_public_key</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ecc_p256.o(i.ecc_gen_new_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = ecc_gen_new_public_key &rArr; ecc_generate_key256 &rArr; ecc_point_multiplication_uint8_256 &rArr; GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmd_handler
</UL>

<P><STRONG><a name="[39a]"></a>ecc_gen_new_secret_key</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ecc_p256.o(i.ecc_gen_new_secret_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecc_gen_new_secret_key
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmd_handler
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
</UL>

<P><STRONG><a name="[399]"></a>ecc_generate_key256</STRONG> (Thumb, 676 bytes, Stack size 328 bytes, ecc_p256.o(i.ecc_generate_key256))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232<LI>Call Chain = ecc_generate_key256 &rArr; ecc_point_multiplication_uint8_256 &rArr; GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_multiplication_uint8_256
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_public_key
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmd_handler
</UL>

<P><STRONG><a name="[39c]"></a>ecc_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ecc_p256.o(i.ecc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecc_init &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[39d]"></a>em_buf_init</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, em_buf.o(i.em_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = em_buf_init &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[422]"></a>em_buf_rx_buff_addr_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, em_buf.o(i.em_buf_rx_buff_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[429]"></a>em_buf_rx_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, em_buf.o(i.em_buf_rx_free))
<BR><BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_done
</UL>

<P><STRONG><a name="[39e]"></a>em_buf_tx_free</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, em_buf.o(i.em_buf_tx_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = em_buf_tx_free
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush_list
</UL>

<P><STRONG><a name="[26a]"></a>enable_ble_sleep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwip.o(i.enable_ble_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_32kXtalWakeupTimerHandler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[2b2]"></a>enable_rwip_ext_wakeup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwip.o(i.enable_rwip_ext_wakeup))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[334]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[52e]"></a>flash_erase</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, flash_qn908x.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
</UL>

<P><STRONG><a name="[52d]"></a>flash_write</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, flash_qn908x.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_erase
</UL>

<P><STRONG><a name="[560]"></a>gapc_auth_get</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, gapc.o(i.gapc_auth_get))
<BR><BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[3b4]"></a>gapc_auth_set</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, gapc.o(i.gapc_auth_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_auth_set
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_cfm_handler
</UL>

<P><STRONG><a name="[3b2]"></a>gapc_con_cleanup</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gapc.o(i.gapc_con_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gapc_con_cleanup &rArr; gapc_cleanup &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[3b3]"></a>gapc_con_create</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, gapc.o(i.gapc_con_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapc_con_create &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[37c]"></a>gapc_enc_keysize_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapc.o(i.gapc_enc_keysize_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
</UL>

<P><STRONG><a name="[553]"></a>gapc_enc_keysize_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gapc.o(i.gapc_enc_keysize_set))
<BR><BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start
</UL>

<P><STRONG><a name="[3c5]"></a>gapc_get_bdaddr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_bdaddr))
<BR><BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
</UL>

<P><STRONG><a name="[384]"></a>gapc_get_conhdl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_conhdl))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
</UL>

<P><STRONG><a name="[433]"></a>gapc_get_conidx</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_conidx))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_cmp_evt_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_key_refr_evt_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_chg_evt_handler
</UL>

<P><STRONG><a name="[55c]"></a>gapc_get_csrk</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_csrk))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
</UL>

<P><STRONG><a name="[3c1]"></a>gapc_get_operation</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_operation))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_nb_ind_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmp_evt_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[3c0]"></a>gapc_get_operation_ptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
</UL>

<P><STRONG><a name="[3bd]"></a>gapc_get_requester</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_requester))
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmp_evt_handler
</UL>

<P><STRONG><a name="[3a7]"></a>gapc_get_role</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_role))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_check
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_timeout_timer_ind_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cfm_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_key_refr_evt_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_chg_evt_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sign_info_pdu
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_fail_pdu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_info_pdu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_addr_info_pdu
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_enc_info_pdu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu
</UL>

<P><STRONG><a name="[56d]"></a>gapc_get_sign_counter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gapc.o(i.gapc_get_sign_counter))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
</UL>

<P><STRONG><a name="[ef]"></a>gapc_hci_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gapc_hci.o(i.gapc_hci_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_hci_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[3be]"></a>gapc_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gapc.o(i.gapc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapc_init &rArr; gapc_cleanup &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>

<P><STRONG><a name="[37b]"></a>gapc_is_sec_set</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gapc.o(i.gapc_is_sec_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
</UL>

<P><STRONG><a name="[55f]"></a>gapc_link_encrypted</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gapc.o(i.gapc_link_encrypted))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[37a]"></a>gapc_lk_sec_lvl_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gapc.o(i.gapc_lk_sec_lvl_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
</UL>

<P><STRONG><a name="[3c3]"></a>gapc_param_update_sanity</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gapc.o(i.gapc_param_update_sanity))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
</UL>

<P><STRONG><a name="[3a9]"></a>gapc_process_op</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, gapc_task.o(i.gapc_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapc_process_op &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_operation_ptr
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_cmd_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_phy_cmd_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
</UL>

<P><STRONG><a name="[3c8]"></a>gapc_reschedule_operation</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gapc.o(i.gapc_reschedule_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapc_reschedule_operation &rArr; ke_msg_forward &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[3ac]"></a>gapc_send_complete_evt</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, gapc.o(i.gapc_send_complete_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_clear_timeout_timer
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_cmd_handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_phy_cmd_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_stat_evt_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_cmp_evt_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmp_evt_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[3cb]"></a>gapc_send_disconect_ind</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapc.o(i.gapc_send_disconect_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapc_send_disconect_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
</UL>

<P><STRONG><a name="[3b6]"></a>gapc_send_error_evt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapc.o(i.gapc_send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
</UL>

<P><STRONG><a name="[3c6]"></a>gapc_set_operation_ptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gapc.o(i.gapc_set_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>

<P><STRONG><a name="[49f]"></a>gapc_sig_pdu_recv_handler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gapc_sig.o(i.gapc_sig_pdu_recv_handler))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[3c2]"></a>gapc_sig_send_param_resp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gapc_sig.o(i.gapc_sig_send_param_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_sig_send_param_resp &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
</UL>

<P><STRONG><a name="[40e]"></a>gapc_svc_chg_ccc_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gapc.o(i.gapc_svc_chg_ccc_get))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[413]"></a>gapc_svc_chg_ccc_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gapc.o(i.gapc_svc_chg_ccc_set))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[3c7]"></a>gapc_update_state</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gapc.o(i.gapc_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[3cd]"></a>gapm_add_to_filter</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, gapm_util.o(i.gapm_add_to_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapm_add_to_filter &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
</UL>

<P><STRONG><a name="[3f6]"></a>gapm_addr_check</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gapm.o(i.gapm_addr_check))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[3fc]"></a>gapm_adv_op_sanity</STRONG> (Thumb, 490 bytes, Stack size 68 bytes, gapm_util.o(i.gapm_adv_op_sanity))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gapm_adv_op_sanity
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler
</UL>

<P><STRONG><a name="[3ce]"></a>gapm_basic_hci_cmd_send</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gapm_util.o(i.gapm_basic_hci_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapm_basic_hci_cmd_send &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_white_list_mgt_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ral_mgt_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
</UL>

<P><STRONG><a name="[3d0]"></a>gapm_con_cleanup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gapm.o(i.gapm_con_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gapm_con_cleanup &rArr; l2cm_cleanup &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_cleanup
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_cleanup
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
</UL>

<P><STRONG><a name="[3d3]"></a>gapm_con_create</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gapm.o(i.gapm_con_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gapm_con_create &rArr; gapc_con_create &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_create
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_setup_conn
</UL>

<P><STRONG><a name="[3b5]"></a>gapm_con_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gapm.o(i.gapm_con_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gapm_con_enable &rArr; gattc_con_enable &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_con_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_cfm_handler
</UL>

<P><STRONG><a name="[3d7]"></a>gapm_connect_op_sanity</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, gapm_util.o(i.gapm_connect_op_sanity))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapm_connect_op_sanity &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_connection_cmd_handler
</UL>

<P><STRONG><a name="[49e]"></a>gapm_dbg_mode_en</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gapm.o(i.gapm_dbg_mode_en))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
</UL>

<P><STRONG><a name="[3f7]"></a>gapm_dle_val_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gapm.o(i.gapm_dle_val_check))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[3d9]"></a>gapm_execute_adv_op</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, gapm_util.o(i.gapm_execute_adv_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapm_execute_adv_op &rArr; gapm_set_address_op &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler
</UL>

<P><STRONG><a name="[3dc]"></a>gapm_execute_connect_op</STRONG> (Thumb, 566 bytes, Stack size 16 bytes, gapm_util.o(i.gapm_execute_connect_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_execute_connect_op &rArr; gapm_set_address_op &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_connection_cmd_handler
</UL>

<P><STRONG><a name="[3dd]"></a>gapm_execute_scan_op</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, gapm_util.o(i.gapm_execute_scan_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_execute_scan_op &rArr; gapm_set_address_op &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_scan_cmd_handler
</UL>

<P><STRONG><a name="[440]"></a>gapm_get_ad_type_flag</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gapm_util.o(i.gapm_get_ad_type_flag))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
</UL>

<P><STRONG><a name="[3d8]"></a>gapm_get_address_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_address_type))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connection_cfm_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_address_op_state
</UL>

<P><STRONG><a name="[43f]"></a>gapm_get_adv_mode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gapm_util.o(i.gapm_get_adv_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_dir_adv_report_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
</UL>

<P><STRONG><a name="[3bc]"></a>gapm_get_att_handle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_att_handle))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler
</UL>

<P><STRONG><a name="[558]"></a>gapm_get_bdaddr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm_util.o(i.gapm_get_bdaddr))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_construct_id_addr_info_pdu
</UL>

<P><STRONG><a name="[342]"></a>gapm_get_id_from_task</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gapm.o(i.gapm_get_id_from_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_get_id_from_task
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_svc_info
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_msg_send_handler
</UL>

<P><STRONG><a name="[454]"></a>gapm_get_irk</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm_util.o(i.gapm_get_irk))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
</UL>

<P><STRONG><a name="[54b]"></a>gapm_get_local_public_key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_local_public_key))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[49a]"></a>gapm_get_max_mps</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_max_mps))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
</UL>

<P><STRONG><a name="[34c]"></a>gapm_get_max_mtu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_max_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_pack
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
</UL>

<P><STRONG><a name="[3b0]"></a>gapm_get_operation</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_operation))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_advertise_data_cmd_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connection_cfm_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cancel_cmd_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_to_ind_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_cmp_evt_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_dir_adv_report_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_wl_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_cfg_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_addr_set_handler
</UL>

<P><STRONG><a name="[3c4]"></a>gapm_get_requester</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gapm.o(i.gapm_get_requester))
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_dir_adv_report_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_addr_set_handler
</UL>

<P><STRONG><a name="[3f4]"></a>gapm_get_role</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm_util.o(i.gapm_get_role))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
</UL>

<P><STRONG><a name="[3e3]"></a>gapm_get_task_from_id</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gapm.o(i.gapm_get_task_from_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_get_task_from_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_check
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_add_svc_req_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_register_cmd_handler
</UL>

<P><STRONG><a name="[10b]"></a>gapm_hci_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gapm_hci.o(i.gapm_hci_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapm_hci_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[3e5]"></a>gapm_init</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, gapm.o(i.gapm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gapm_init &rArr; gapc_init &rArr; gapc_cleanup &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[3e6]"></a>gapm_init_attr</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gapm.o(i.gapm_init_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = gapm_init_attr &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[410]"></a>gapm_is_disc_connection</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_disc_connection))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler
</UL>

<P><STRONG><a name="[41c]"></a>gapm_is_embedded_host</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_embedded_host))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_out_of_sync
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>

<P><STRONG><a name="[3e7]"></a>gapm_is_filtered</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gapm_util.o(i.gapm_is_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gapm_is_filtered &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
</UL>

<P><STRONG><a name="[566]"></a>gapm_is_legacy_pairing_supp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_legacy_pairing_supp))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[40d]"></a>gapm_is_pref_con_param_pres</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_pref_con_param_pres))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[565]"></a>gapm_is_sec_con_pairing_supp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_is_sec_con_pairing_supp))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[3e8]"></a>gapm_le_psm_cleanup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gapm.o(i.gapm_le_psm_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gapm_le_psm_cleanup &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[3e9]"></a>gapm_le_psm_find</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gapm.o(i.gapm_le_psm_find))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_unregister_cmd_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_register_cmd_handler
</UL>

<P><STRONG><a name="[48b]"></a>gapm_le_psm_get_info</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, gapm.o(i.gapm_le_psm_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_le_psm_get_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
</UL>

<P><STRONG><a name="[48d]"></a>gapm_lecb_register</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, gapm.o(i.gapm_lecb_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = gapm_lecb_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
</UL>

<P><STRONG><a name="[49d]"></a>gapm_lecb_unregister</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gapm.o(i.gapm_lecb_unregister))
<BR><BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
</UL>

<P><STRONG><a name="[3ea]"></a>gapm_op_reset_continue</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, gapm_util.o(i.gapm_op_reset_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_get_nb_buffer_available
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_buff_size_cmd_cmp_evt_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_cmp_evt_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_buff_size_cmd_cmp_evt_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_cfg_handler
</UL>

<P><STRONG><a name="[3ec]"></a>gapm_op_setup_continue</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, gapm_util.o(i.gapm_op_setup_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_cmp_evt_handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmp_evt_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_cfg_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_addr_set_handler
</UL>

<P><STRONG><a name="[3ef]"></a>gapm_reschedule_operation</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapm.o(i.gapm_reschedule_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gapm_reschedule_operation &rArr; ke_msg_forward &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_wl_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_handler
</UL>

<P><STRONG><a name="[3fd]"></a>gapm_scan_op_sanity</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, gapm_util.o(i.gapm_scan_op_sanity))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_scan_cmd_handler
</UL>

<P><STRONG><a name="[3e1]"></a>gapm_send_complete_evt</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gapm.o(i.gapm_send_complete_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_white_list_mgt_cmd_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_advertise_data_cmd_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_scan_cmd_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_connection_cmd_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_irk_cmd_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_resolv_addr_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ral_mgt_cmd_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_unregister_cmd_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_register_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_addr_cmd_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_wl_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_cfg_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
</UL>

<P><STRONG><a name="[3cf]"></a>gapm_send_error_evt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gapm.o(i.gapm_send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cancel_cmd_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
</UL>

<P><STRONG><a name="[3f3]"></a>gapm_set_adv_data</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gapm_util.o(i.gapm_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapm_set_adv_data &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_advertise_data_cmd_handler
</UL>

<P><STRONG><a name="[421]"></a>gapm_set_embedded_host</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapm.o(i.gapm_set_embedded_host))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
</UL>

<P><STRONG><a name="[3fa]"></a>gapm_set_max_mps</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gapm.o(i.gapm_set_max_mps))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[3f9]"></a>gapm_set_max_mtu</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gapm.o(i.gapm_set_max_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[414]"></a>gapm_set_svc_start_hdl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapm.o(i.gapm_set_svc_start_hdl))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_destroy_db_req_handler
</UL>

<P><STRONG><a name="[3fb]"></a>gapm_setup_conn</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gapm_util.o(i.gapm_setup_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gapm_setup_conn &rArr; gapm_con_create &rArr; gapc_con_create &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_con_cmp_evt_handler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_cmp_evt_handler
</UL>

<P><STRONG><a name="[40f]"></a>gapm_svc_chg_en</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gapm.o(i.gapm_svc_chg_en))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
</UL>

<P><STRONG><a name="[3b1]"></a>gapm_update_air_op_state</STRONG> (Thumb, 896 bytes, Stack size 24 bytes, gapm_util.o(i.gapm_update_air_op_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_address_op_state
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reschedule_operation
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_scan_cmd_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_connection_cmd_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_to_ind_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lim_disc_to_ind_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connection_cfm_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cancel_cmd_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_to_ind_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_setup_conn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_scan_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_connect_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_addr_set_handler
</UL>

<P><STRONG><a name="[3ee]"></a>gapm_update_state</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gapm.o(i.gapm_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gapm_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>

<P><STRONG><a name="[404]"></a>gattc_cleanup</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, gattc.o(i.gattc_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattc_cleanup &rArr; atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_cleanup
</UL>

<P><STRONG><a name="[3d6]"></a>gattc_con_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gattc.o(i.gattc_con_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_con_enable &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_enable
</UL>

<P><STRONG><a name="[406]"></a>gattc_create</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, gattc.o(i.gattc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattc_create &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_create
</UL>

<P><STRONG><a name="[356]"></a>gattc_get_mtu</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_mtu))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
</UL>

<P><STRONG><a name="[34e]"></a>gattc_get_operation</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_operation))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_hdl_value_cfm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_wr_rsp_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exe_wr_rsp_handler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_ind_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_svc_incl_ind_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_ind_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_char_desc_ind_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
</UL>

<P><STRONG><a name="[34f]"></a>gattc_get_operation_ptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exe_wr_rsp_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
</UL>

<P><STRONG><a name="[350]"></a>gattc_get_requester</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gattc.o(i.gattc_get_requester))
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[408]"></a>gattc_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, gattc.o(i.gattc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gattc_init &rArr; gattc_cleanup &rArr; atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
</UL>

<P><STRONG><a name="[351]"></a>gattc_reschedule_operation</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, gattc.o(i.gattc_reschedule_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_reschedule_operation &rArr; ke_msg_forward &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
</UL>

<P><STRONG><a name="[34b]"></a>gattc_send_complete_evt</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gattc.o(i.gattc_send_complete_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_hdl_value_cfm
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_wr_rsp_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_prep_wr_rsp_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exe_wr_rsp_handler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_err_rsp_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
</UL>

<P><STRONG><a name="[40a]"></a>gattc_send_error_evt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gattc.o(i.gattc_send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>

<P><STRONG><a name="[34d]"></a>gattc_set_mtu</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gattc.o(i.gattc_set_mtu))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattc_set_mtu &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_exc_mtu_rsp_handler
</UL>

<P><STRONG><a name="[40b]"></a>gattc_set_operation_ptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gattc.o(i.gattc_set_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>

<P><STRONG><a name="[374]"></a>gattc_update_state</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gattc.o(i.gattc_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>

<P><STRONG><a name="[3d2]"></a>gattm_cleanup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gattm.o(i.gattm_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattm_cleanup &rArr; gattc_cleanup &rArr; atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[3d5]"></a>gattm_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gattm.o(i.gattm_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gattm_create &rArr; gattc_create &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[415]"></a>gattm_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gattm.o(i.gattm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gattm_init &rArr; gattc_init &rArr; gattc_cleanup &rArr; atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[3f8]"></a>gattm_init_attr</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, gattm.o(i.gattm_init_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = gattm_init_attr &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_svc_chg_en
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
</UL>

<P><STRONG><a name="[403]"></a>gattm_svc_get_start_hdl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gattm.o(i.gattm_svc_get_start_hdl))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
</UL>

<P><STRONG><a name="[41b]"></a>h4tl_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, h4tl.o(i.h4tl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = h4tl_init &rArr; rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[53e]"></a>h4tl_start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, h4tl.o(i.h4tl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = h4tl_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[53b]"></a>h4tl_stop</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, h4tl.o(i.h4tl_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = h4tl_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[346]"></a>h4tl_write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, h4tl.o(i.h4tl_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = h4tl_write &rArr; rwip_prevent_sleep_set
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_send_msg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_tx_done_evt_handler
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[41f]"></a>hci_acl_tx_data_alloc</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, hci_tl.o(i.hci_acl_tx_data_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_acl_tx_data_alloc &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
</UL>

<P><STRONG><a name="[420]"></a>hci_acl_tx_data_received</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, hci_tl.o(i.hci_acl_tx_data_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hci_acl_tx_data_received &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
</UL>

<P><STRONG><a name="[417]"></a>hci_cmd_get_max_param_size</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hci_tl.o(i.hci_cmd_get_max_param_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hci_cmd_get_max_param_size &rArr; hci_look_for_cmd_desc
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
</UL>

<P><STRONG><a name="[418]"></a>hci_cmd_received</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, hci_tl.o(i.hci_cmd_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hci_cmd_received &rArr; hci_cmd_reject &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_util_unpack
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_reject
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
</UL>

<P><STRONG><a name="[157]"></a>hci_command_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, llm_hci.o(i.hci_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_command_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.constdata)
</UL>
<P><STRONG><a name="[472]"></a>hci_evt_mask_set</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, hci.o(i.hci_evt_mask_set))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_evt_mask_page_2_cmd_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_evt_mask_cmd_handler
</UL>

<P><STRONG><a name="[43a]"></a>hci_fc_acl_buf_size_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci_fc.o(i.hci_fc_acl_buf_size_set))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_host_buf_size_cmd_handler
</UL>

<P><STRONG><a name="[435]"></a>hci_fc_acl_en</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hci_fc.o(i.hci_fc_acl_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_fc_acl_en
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_ctrl_to_host_flow_ctrl_cmd_handler
</UL>

<P><STRONG><a name="[474]"></a>hci_fc_acl_packet_sent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hci_fc.o(i.hci_fc_acl_packet_sent))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_done
</UL>

<P><STRONG><a name="[475]"></a>hci_fc_check_host_available_nb_acl_packets</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hci_fc.o(i.hci_fc_check_host_available_nb_acl_packets))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[43c]"></a>hci_fc_host_nb_acl_pkts_complete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hci_fc.o(i.hci_fc_host_nb_acl_pkts_complete))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_host_nb_cmp_pkts_cmd_handler
</UL>

<P><STRONG><a name="[436]"></a>hci_fc_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci_fc.o(i.hci_fc_init))
<BR><BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_10
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[43d]"></a>hci_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hci.o(i.hci_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_init &rArr; hci_tl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[42a]"></a>hci_look_for_cmd_desc</STRONG> (Thumb, 118 bytes, Stack size 4 bytes, hci_msg.o(i.hci_look_for_cmd_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_look_for_cmd_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_get_max_param_size
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[477]"></a>hci_look_for_dbg_evt_desc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hci_msg.o(i.hci_look_for_dbg_evt_desc))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[46f]"></a>hci_look_for_evt_desc</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, hci_msg.o(i.hci_look_for_evt_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_look_for_evt_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[470]"></a>hci_look_for_le_evt_desc</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, hci_msg.o(i.hci_look_for_le_evt_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hci_look_for_le_evt_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[46d]"></a>hci_reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hci.o(i.hci_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_reset &rArr; hci_tl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_init
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[3b7]"></a>hci_send_2_controller</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hci.o(i.hci_send_2_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hci_send_2_controller &rArr; ke_msg_send &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_embedded_host
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_use_enc_block
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_send_generate_dh_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_resolv_addr
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_gen_rand_nb
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_gen_rand_addr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_scan_op
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_connect_op
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_basic_hci_cmd_send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_white_list_mgt_cmd_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ral_mgt_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_send_encrypt_req
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_setup_conn
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
</UL>

<P><STRONG><a name="[41d]"></a>hci_send_2_host</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, hci.o(i.hci_send_2_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_le_evt_desc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_evt_desc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_embedded_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_tx_pwr_lvl_cmd_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_chnl_map_cmd_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_flush_cmd_handler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_nb_of_pkt_comp_evt_send
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_flush_occurred_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_status_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_complete_send
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_out_of_sync
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_supp_feats_cmd_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_supp_cmds_cmd_handler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_buff_size_cmd_handler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wl_size_cmd_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_supp_states_cmd_handler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_handler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_supp_feats_cmd_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_buff_size_cmd_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_ch_tx_pw_cmd_handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_info_cmd_handler
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_status_send
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ecc_result_ind_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_version_rd_event_send
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ltk_req_send
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_discon_event_complete_send
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_key_ref_comp_evt_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_real_to_ind_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_ext_func_cmd_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_par_cmd_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_mem_cmd_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_flash_cmd_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_dle_dft_value_cmd_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wlan_coex_cmd_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_tx_pw_cmd_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_crc_cmd_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_bd_addr_cmd_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_reset_tx_cnt_cmd_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_reset_rx_cnt_cmd_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_par_cmd_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_mem_info_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_mem_cmd_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_ke_stats_cmd_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_flash_cmd_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_plf_reset_cmd_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_llcp_discard_cmd_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_id_flash_cmd_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_hw_reg_wr_cmd_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_hw_reg_rd_cmd_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_er_flash_cmd_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_del_par_cmd_handler
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ble_ready
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_reject
</UL>

<P><STRONG><a name="[43e]"></a>hci_tl_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hci_tl.o(i.hci_tl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hci_tl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
</UL>

<P><STRONG><a name="[471]"></a>hci_tl_send</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, hci_tl.o(i.hci_tl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>

<P><STRONG><a name="[476]"></a>hci_util_pack</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, hci_util.o(i.hci_util_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
</UL>

<P><STRONG><a name="[42c]"></a>hci_util_unpack</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, hci_util.o(i.hci_util_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hci_util_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_reject
</UL>

<P><STRONG><a name="[405]"></a>ke_check_malloc</STRONG> (Thumb, 168 bytes, Stack size 36 bytes, ke_mem.o(i.ke_check_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ke_check_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
</UL>

<P><STRONG><a name="[340]"></a>ke_event_callback_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ke_event.o(i.ke_event_callback_set))
<BR><BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
</UL>

<P><STRONG><a name="[348]"></a>ke_event_clear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ke_event.o(i.ke_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ke_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_l2cap_tx_handler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_tx_evt_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_tx_done_evt_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_schedule
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule
</UL>

<P><STRONG><a name="[47b]"></a>ke_event_flush</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ke_event.o(i.ke_event_flush))
<BR><BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
</UL>

<P><STRONG><a name="[481]"></a>ke_event_get_all</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ke_event.o(i.ke_event_get_all))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check
</UL>

<P><STRONG><a name="[479]"></a>ke_event_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ke_event.o(i.ke_event_init))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
</UL>

<P><STRONG><a name="[538]"></a>ke_event_schedule</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ke_event.o(i.ke_event_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ke_event_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
</UL>

<P><STRONG><a name="[347]"></a>ke_event_set</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ke_event.o(i.ke_event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ke_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_l2cap_tx_handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_tx_done
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_nb_cmp_pkts_evt_handler
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_tx_done
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_timer_isr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_crypt_isr
</UL>

<P><STRONG><a name="[47a]"></a>ke_flush</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ke.o(i.ke_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ke_flush &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_flush
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[349]"></a>ke_free</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ke_mem.o(i.ke_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_destroy
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_destroy
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_complete
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_complete
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_complete
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_complete
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_le_psm_cleanup
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_unregister_cmd_handler
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_tx_done_evt_handler
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_schedule
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush_list
</UL>

<P><STRONG><a name="[47c]"></a>ke_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ke.o(i.ke_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ke_init &rArr; ke_task_init &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_init
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_init
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[483]"></a>ke_is_free</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ke_mem.o(i.ke_is_free))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule
</UL>

<P><STRONG><a name="[344]"></a>ke_malloc</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, ke_mem.o(i.ke_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_init
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_data_send
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_rsp_data
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_param
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_data
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_create
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_register_cmd_handler
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_send_msg
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_add_to_filter
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
</UL>

<P><STRONG><a name="[47d]"></a>ke_mem_init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ke_mem.o(i.ke_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ke_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
</UL>

<P><STRONG><a name="[272]"></a>ke_msg_alloc</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ke_msg.o(i.ke_msg_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAddProfileTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassAddProfileTask
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dev_adv_tx_power_ind_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_cleanup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLevelUpdReq
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassEnableReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmStartAdvertiseCmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmSetDevConfigCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResolvAddrCmd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResetCmd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmGetDevBdAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcSetDevInfoReqIndHandler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcParamUpdateCfm
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcGetDevInfoReqIndHandler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionCfm
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCfm
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_IRQHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_tx_pwr_lvl_cmd_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_chnl_map_cmd_handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmd_handler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_flush_cmd_handler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_nb_of_pkt_comp_evt_send
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_flush_occurred_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_status_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_complete_send
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_flow_control_credit_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_resp_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_hdl_val_ntf_ind_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_key_press_notification_ind
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_out_of_sync
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_supp_feats_cmd_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_supp_cmds_cmd_handler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_buff_size_cmd_handler
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_bd_addr_cmd_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wl_size_cmd_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_supp_states_cmd_handler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_handler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_handler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_supp_feats_cmd_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_buff_size_cmd_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_ch_tx_pw_cmd_handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_info_cmd_handler
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_status_send
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ecc_result_ind_handler
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_version_rd_event_send
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ltk_req_send
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_discon_event_complete_send
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_key_ref_comp_evt_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_real_to_ind_handler
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_error_evt
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_init_disconnect
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_set_permission_req_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_permission_req_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_list_req_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_destroy_db_req_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_set_value_req_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_set_permission_req_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_value_req_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_permission_req_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_info_req_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_add_svc_req_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_use_enc_block
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_send_generate_dh_key
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_resolv_addr
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_gen_rand_nb
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_gen_rand_addr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_scan_op
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_connect_op
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connect_op_sanity
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_basic_hci_cmd_send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_white_list_mgt_cmd_handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_unknown_task_msg_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ral_mgt_cmd_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start_handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_pkt_size_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_le_ping_to_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_send_encrypt_req
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_setup_conn
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_dir_adv_report_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_addr_set_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_evt_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmp_evt_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_len_chg_evt_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_user_ext_func_cmd_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_par_cmd_handler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_mem_cmd_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_flash_cmd_handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_dle_dft_value_cmd_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wlan_coex_cmd_handler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_tx_pw_cmd_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_crc_cmd_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_bd_addr_cmd_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_reset_tx_cnt_cmd_handler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_reset_rx_cnt_cmd_handler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_par_cmd_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_mem_info_cmd_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_mem_cmd_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_ke_stats_cmd_handler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_flash_cmd_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_plf_reset_cmd_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_llcp_discard_cmd_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_id_flash_cmd_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_hw_reg_wr_cmd_handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_hw_reg_rd_cmd_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_er_flash_cmd_handler
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_del_par_cmd_handler
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ble_ready
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_reject
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[181]"></a>ke_msg_discard</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ke_task.o(i.ke_msg_discard))
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[3c9]"></a>ke_msg_forward</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ke_msg.o(i.ke_msg_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ke_msg_forward &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cfm_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reschedule_operation
</UL>

<P><STRONG><a name="[341]"></a>ke_msg_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ke_msg.o(i.ke_msg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ke_msg_free &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_msg_flush
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_adv_data_update
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cfm_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connect_op_sanity
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_ke_msg_tx_done
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_done
</UL>

<P><STRONG><a name="[373]"></a>ke_msg_in_queue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ke_msg.o(i.ke_msg_in_queue))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_operation_cleanup
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>

<P><STRONG><a name="[273]"></a>ke_msg_send</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ke_msg.o(i.ke_msg_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ke_msg_send &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAddProfileTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassAddProfileTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MsgSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dev_adv_tx_power_ind_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_cleanup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLevelUpdReq
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassEnableReq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmStartAdvertiseCmd
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmSetDevConfigCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResolvAddrCmd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmResetCmd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmGetDevBdAddr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcSetDevInfoReqIndHandler
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcParamUpdateCfm
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcGetDevInfoReqIndHandler
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcEncryptCfm
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcConnectionCfm
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcBondCfm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmd_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_flow_control_credit_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_resp_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_rsp_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_mult_rsp_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_grp_type_rsp_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_hdl_val_ntf_ind_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_info_rsp_handler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_find_by_type_rsp_handler
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_key_press_notification_ind
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_error_evt
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_init_disconnect
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_set_permission_req_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_permission_req_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_list_req_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_destroy_db_req_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_set_value_req_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_set_permission_req_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_value_req_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_permission_req_handler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_att_get_info_req_handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_add_svc_req_handler
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_connect_op
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_unknown_task_msg_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start_handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_info_cmd_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_dir_adv_report_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_addr_set_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_evt_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmp_evt_handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_len_chg_evt_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[411]"></a>ke_msg_send_basic</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ke_msg.o(i.ke_msg_send_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ke_msg_send_basic &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_req_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_acl_tx_ack_defer
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_enc_ind_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_no_operation_cmd_cmp_evt_handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_auth_payl_to_exp_evt_handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_schedule
</UL>

<P><STRONG><a name="[3af]"></a>ke_msg_src_id_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ke_msg.o(i.ke_msg_src_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reschedule_operation
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[328]"></a>ke_queue_extract</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ke_queue.o(i.ke_queue_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ke_queue_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearTimer
</UL>

<P><STRONG><a name="[329]"></a>ke_queue_insert</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ke_queue.o(i.ke_queue_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ke_queue_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ExpiredTimerHandler
</UL>

<P><STRONG><a name="[480]"></a>ke_sleep_check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ke.o(i.ke_sleep_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ke_sleep_check
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_get_all
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[292]"></a>ke_state_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ke_task.o(i.ke_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dev_adv_tx_power_ind_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmDeviceReadyIndHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapmCmpEvtHandler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_req_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_rsp_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_handler
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_tx_pwr_lvl_cmd_handler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmd_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_chnl_map_cmd_handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmd_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_finished
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_acl_en
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_wl_mngt_cmd_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_param_cmd_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_en_cmd_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cmd_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cancel_cmd_handler
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_get_free_conhdl
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_bw_mgt
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enh_priv_addr_renew_timer_handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_hci_acl_data_tx_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_enc_ind_handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_link_sup_to_ind_handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_real_to_ind_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_update_state
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_signaling_trans_to_ind_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_send_cmd_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cfm_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_timeout_handler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_svc_changed_cmd_handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cfm_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_event_cfm_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_default_msg_handler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_cfm_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_to_ind_handler
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lim_disc_to_ind_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connection_cfm_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_renew_to_ind_handler
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_peer_att_info_ind_handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cmp_evt_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_ind_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cmp_evt_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_att_info_req_ind_handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_nb_ind_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_conn_param_to_ind_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_timeout_timer_ind_handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_rep_attempts_timer_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_set_dev_info_cfm_handler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cfm_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_dev_info_cfm_handler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_gen_dh_key_ind_handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cfm_handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_cfm_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_send_msg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_local_ver_info_cmd_cmp_evt_handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_wlst_size_cmd_cmp_evt_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_size_cmd_cmp_evt_handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_ral_addr_cmd_cmp_evt_handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_max_data_len_cmd_cmp_evt_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmp_evt_handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_con_cmp_evt_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_cmp_evt_handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_dir_adv_report_evt_handler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_cmp_evt_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_wl_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_scan_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_rl_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_connect_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_adv_handler
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_basic_cmd_cmp_evt_addr_set_handler
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_con_enable
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rssi_cmd_cmp_evt_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmp_evt_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_chnl_map_cmd_cmp_evt_handler
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_auth_payl_to_cmd_cmp_evt_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_stat_evt_handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_cmp_evt_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_evt_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmp_evt_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_len_chg_evt_handler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmp_evt_handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disc_cmp_evt_handler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_auth_payl_to_exp_evt_handler
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
</UL>

<P><STRONG><a name="[270]"></a>ke_state_set</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ke_task.o(i.ke_state_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_extract
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_AddPrfTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dev_adv_tx_power_ind_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcDisconnectIndHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_terminate_ind_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_rsp_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmd_handler
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_finished
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_create
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cancel_cmd_handler
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_real_to_ind_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_update_state
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_cmd_handler
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_create
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_send_msg
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_con_enable
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_stat_event_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_tx_done_evt_handler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_tx_pw_cmd_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_crc_cmd_handler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
</UL>

<P><STRONG><a name="[3e4]"></a>ke_task_check</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ke_task.o(i.ke_task_check))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_task_from_id
</UL>

<P><STRONG><a name="[297]"></a>ke_task_create</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ke_task.o(i.ke_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ke_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_init
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
</UL>

<P><STRONG><a name="[47e]"></a>ke_task_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ke_task.o(i.ke_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ke_task_init &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
</UL>

<P><STRONG><a name="[482]"></a>ke_task_msg_flush</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ke_task.o(i.ke_task_msg_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ke_task_msg_flush &rArr; ke_msg_free &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
</UL>

<P><STRONG><a name="[3bf]"></a>ke_timer_active</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ke_timer.o(i.ke_timer_active))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_keypress_notification_pdu
</UL>

<P><STRONG><a name="[2a0]"></a>ke_timer_clear</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ke_timer.o(i.ke_timer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ke_timer_clear &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_extract
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfgHandler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_terminate_ind_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_resp_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_resp_handler
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_cleanup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_hdl_value_cfm
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_l2cc_pdu_recv_handler
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_irk_cmd_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_clear_timeout_timer
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
</UL>

<P><STRONG><a name="[47f]"></a>ke_timer_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ke_timer.o(i.ke_timer_init))
<BR><BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
</UL>

<P><STRONG><a name="[275]"></a>ke_timer_set</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ke_timer.o(i.ke_timer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_insert
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_extract
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfgHandler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLvlChkTimerHandler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmd_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_lsto_con_update
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_host_ch_class_cmd_handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_update
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enh_priv_addr_renew_timer_handler
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_req_pdu_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_real_to_ind_handler
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_disc_req
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_req
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_hdl_cfm
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_scan_op
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_address_op
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_keypress_notification_pdu
</UL>

<P><STRONG><a name="[485]"></a>ke_timer_sleep_check</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ke_timer.o(i.ke_timer_sleep_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ke_timer_sleep_check
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[490]"></a>l2cc_cleanup</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, l2cc.o(i.l2cc_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_cleanup
</UL>

<P><STRONG><a name="[491]"></a>l2cc_create</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, l2cc.o(i.l2cc_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2cc_create &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_create
</UL>

<P><STRONG><a name="[492]"></a>l2cc_data_send</STRONG> (Thumb, 736 bytes, Stack size 112 bytes, l2cc.o(i.l2cc_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = l2cc_data_send &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_pack
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_pdu_pack
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_pack
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_l2cap_tx_handler
</UL>

<P><STRONG><a name="[495]"></a>l2cc_dbg_pdu_pack</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2cc_pdu.o(i.l2cc_dbg_pdu_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_dbg_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
</UL>

<P><STRONG><a name="[428]"></a>l2cc_dbg_pdu_unpack</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, l2cc_pdu.o(i.l2cc_dbg_pdu_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_dbg_pdu_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
</UL>

<P><STRONG><a name="[48f]"></a>l2cc_get_operation</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, l2cc.o(i.l2cc_get_operation))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_signaling_trans_to_ind_handler
</UL>

<P><STRONG><a name="[489]"></a>l2cc_get_operation_ptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cc.o(i.l2cc_get_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_resp_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_resp_handler
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
</UL>

<P><STRONG><a name="[497]"></a>l2cc_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, l2cc.o(i.l2cc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
</UL>

<P><STRONG><a name="[426]"></a>l2cc_lecb_find</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, l2cc_lecb.o(i.l2cc_lecb_find))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_flow_control_credit_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_resp_handler
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_resp_handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_req_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_signaling_trans_to_ind_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_send_cmd_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_disconnect_cmd_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_add_cmd_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
</UL>

<P><STRONG><a name="[488]"></a>l2cc_lecb_free</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, l2cc_lecb.o(i.l2cc_lecb_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lecb_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_resp_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_resp_handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_req_handler
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_signaling_trans_to_ind_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
</UL>

<P><STRONG><a name="[427]"></a>l2cc_lecb_init_disconnect</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, l2cc_lecb.o(i.l2cc_lecb_init_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l2cc_lecb_init_disconnect &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_flow_control_credit_handler
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
</UL>

<P><STRONG><a name="[494]"></a>l2cc_lecb_pdu_pack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, l2cc_pdu.o(i.l2cc_lecb_pdu_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_lecb_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
</UL>

<P><STRONG><a name="[425]"></a>l2cc_lecb_pdu_unpack</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, l2cc_pdu.o(i.l2cc_lecb_pdu_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = l2cc_lecb_pdu_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
</UL>

<P><STRONG><a name="[49b]"></a>l2cc_lecb_send_con_req</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, l2cc_lecb.o(i.l2cc_lecb_send_con_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l2cc_lecb_send_con_req &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
</UL>

<P><STRONG><a name="[48c]"></a>l2cc_lecb_send_con_rsp</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, l2cc_lecb.o(i.l2cc_lecb_send_con_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l2cc_lecb_send_con_rsp &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_req_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cfm_handler
</UL>

<P><STRONG><a name="[499]"></a>l2cc_lecb_send_credit_add</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, l2cc_lecb.o(i.l2cc_lecb_send_credit_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_lecb_send_credit_add &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_add_cmd_handler
</UL>

<P><STRONG><a name="[49c]"></a>l2cc_lecb_send_disc_req</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, l2cc_lecb.o(i.l2cc_lecb_send_disc_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_lecb_send_disc_req &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_disconnect_cmd_handler
</UL>

<P><STRONG><a name="[487]"></a>l2cc_lecb_send_disc_rsp</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, l2cc_lecb.o(i.l2cc_lecb_send_disc_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_lecb_send_disc_rsp &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_req_handler
</UL>

<P><STRONG><a name="[354]"></a>l2cc_pdu_alloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, l2cc_task.o(i.l2cc_pdu_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_disc_rsp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_disc_req
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_credit_add
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_rsp
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_req
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_hdl_cfm
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_ind_handler
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_send_param_resp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
</UL>

<P><STRONG><a name="[423]"></a>l2cc_pdu_header_check</STRONG> (Thumb, 710 bytes, Stack size 48 bytes, l2cc_pdu.o(i.l2cc_pdu_header_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = l2cc_pdu_header_check &rArr; l2cc_lecb_init_disconnect &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_init_disconnect
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dbg_mode_en
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
</UL>

<P><STRONG><a name="[493]"></a>l2cc_pdu_pack</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, l2cc_pdu.o(i.l2cc_pdu_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = l2cc_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
</UL>

<P><STRONG><a name="[355]"></a>l2cc_pdu_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cc_task.o(i.l2cc_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = l2cc_pdu_send &rArr; ke_msg_send &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_disc_rsp
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_req
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_req
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_rd_by_type_rsp_handler
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_disc_req
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_credit_add
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_rsp
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_req
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_hdl_cfm
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_send_param_resp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_cmd_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
</UL>

<P><STRONG><a name="[424]"></a>l2cc_pdu_unpack</STRONG> (Thumb, 610 bytes, Stack size 64 bytes, l2cc_pdu.o(i.l2cc_pdu_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = l2cc_pdu_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_rx_handler
</UL>

<P><STRONG><a name="[498]"></a>l2cc_process_op</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, l2cc_task.o(i.l2cc_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l2cc_process_op &rArr; l2cc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_update_state
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_set_operation_ptr
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_error_evt
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_get_operation_ptr
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_disconnect_cmd_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_add_cmd_handler
</UL>

<P><STRONG><a name="[48a]"></a>l2cc_send_complete_evt</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, l2cc.o(i.l2cc_send_complete_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = l2cc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_reject_handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_cb_conn_resp_handler
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_disconnection_resp_handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_signaling_trans_to_ind_handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_disconnect_cmd_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_connect_cmd_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_add_cmd_handler
</UL>

<P><STRONG><a name="[496]"></a>l2cc_send_error_evt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, l2cc.o(i.l2cc_send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = l2cc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_send_cmd_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
</UL>

<P><STRONG><a name="[4a2]"></a>l2cc_set_operation_ptr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, l2cc.o(i.l2cc_set_operation_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
</UL>

<P><STRONG><a name="[4a1]"></a>l2cc_sig_pdu_recv_handler</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, l2cc_sig.o(i.l2cc_sig_pdu_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = l2cc_sig_pdu_recv_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[486]"></a>l2cc_sig_send_cmd_reject</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, l2cc_sig.o(i.l2cc_sig_send_cmd_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_resp_handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_conn_param_upd_req_handler
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_pdu_recv_handler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[4a3]"></a>l2cc_update_state</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, l2cc.o(i.l2cc_update_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2cc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
</UL>

<P><STRONG><a name="[3d1]"></a>l2cm_cleanup</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, l2cm.o(i.l2cm_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = l2cm_cleanup &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>

<P><STRONG><a name="[3d4]"></a>l2cm_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2cm.o(i.l2cm_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = l2cm_create &rArr; l2cc_create &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_create
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_create
</UL>

<P><STRONG><a name="[3eb]"></a>l2cm_get_nb_buffer_available</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l2cm.o(i.l2cm_get_nb_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_nb_cmp_pkts_evt_handler
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>

<P><STRONG><a name="[4a4]"></a>l2cm_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, l2cm.o(i.l2cm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
</UL>

<P><STRONG><a name="[456]"></a>l2cm_set_link_layer_buff_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, l2cm.o(i.l2cm_set_link_layer_buff_size))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_buff_size_cmd_cmp_evt_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_buff_size_cmd_cmp_evt_handler
</UL>

<P><STRONG><a name="[48e]"></a>l2cm_tx_status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, l2cm.o(i.l2cm_tx_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l2cm_tx_status &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2c_code_le_flow_control_credit_handler
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send_cmd_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_sdu_send_cmd_handler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_send_cmd_handler
</UL>

<P><STRONG><a name="[4a8]"></a>llc_ch_assess_get_current_ch_map</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llc_ch_asses.o(i.llc_ch_assess_get_current_ch_map))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler
</UL>

<P><STRONG><a name="[4a6]"></a>llc_ch_assess_get_local_ch_map</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, llc_ch_asses.o(i.llc_ch_assess_get_local_ch_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_ch_assess_get_local_ch_map
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
</UL>

<P><STRONG><a name="[4d1]"></a>llc_ch_assess_local</STRONG> (Thumb, 104 bytes, Stack size 4 bytes, llc_ch_asses.o(i.llc_ch_assess_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = llc_ch_assess_local
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer
</UL>

<P><STRONG><a name="[4ab]"></a>llc_ch_assess_merge_ch</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, llc_ch_asses.o(i.llc_ch_assess_merge_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_ch_assess_merge_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
</UL>

<P><STRONG><a name="[4a7]"></a>llc_ch_assess_reass_ch</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llc_ch_asses.o(i.llc_ch_assess_reass_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llc_ch_assess_reass_ch
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
</UL>

<P><STRONG><a name="[450]"></a>llc_common_cmd_complete_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, llc.o(i.llc_common_cmd_complete_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_data_len_cmd_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_reply_cmd_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
</UL>

<P><STRONG><a name="[432]"></a>llc_common_cmd_status_send</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, llc.o(i.llc_common_cmd_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llc_common_cmd_status_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmd_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmd_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
</UL>

<P><STRONG><a name="[4ac]"></a>llc_common_enc_change_evt_send</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, llc.o(i.llc_common_enc_change_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
</UL>

<P><STRONG><a name="[4ad]"></a>llc_common_enc_key_ref_comp_evt_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, llc.o(i.llc_common_enc_key_ref_comp_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_common_enc_key_ref_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
</UL>

<P><STRONG><a name="[438]"></a>llc_common_flush_occurred_send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llc.o(i.llc_common_flush_occurred_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llc_common_flush_occurred_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_flush_cmd_handler
</UL>

<P><STRONG><a name="[4ae]"></a>llc_common_nb_of_pkt_comp_evt_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llc.o(i.llc_common_nb_of_pkt_comp_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_acl_tx_ack_defer
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_hci_acl_data_tx_handler
</UL>

<P><STRONG><a name="[443]"></a>llc_con_update_complete_send</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, llc.o(i.llc_con_update_complete_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_con_update_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmd_handler
</UL>

<P><STRONG><a name="[4b4]"></a>llc_con_update_finished</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, llc.o(i.llc_con_update_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llc_con_update_finished &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[4b5]"></a>llc_con_update_ind</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, llc.o(i.llc_con_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llc_con_update_ind &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[4b7]"></a>llc_discon_event_complete_send</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, llc.o(i.llc_discon_event_complete_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_discon_event_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
</UL>

<P><STRONG><a name="[4bf]"></a>llc_end_evt_defer</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, llc_util.o(i.llc_end_evt_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llc_end_evt_defer &rArr; llc_util_bw_mgt &rArr; lld_util_anchor_point_move &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_bw_mgt
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[458]"></a>llc_feats_rd_event_send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, llc.o(i.llc_feats_rd_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_feats_rd_event_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmd_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
</UL>

<P><STRONG><a name="[14f]"></a>llc_hci_acl_data_tx_handler</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, llc_hci.o(i.llc_hci_acl_data_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = llc_hci_acl_data_tx_handler &rArr; lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_data_send
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_nb_of_pkt_comp_evt_send
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>llc_hci_command_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, llc_hci.o(i.llc_hci_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llc_hci_command_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[4c3]"></a>llc_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, llc.o(i.llc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llc_init &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[445]"></a>llc_le_con_cmp_evt_send</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, llc.o(i.llc_le_con_cmp_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llc_le_con_cmp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_6
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cancel_cmd_handler
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
</UL>

<P><STRONG><a name="[4a9]"></a>llc_llcp_ch_map_update_pdu_send</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, llc_llcp.o(i.llc_llcp_ch_map_update_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llc_llcp_ch_map_update_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_get
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chmap_update_req_ind_handler
</UL>

<P><STRONG><a name="[4b0]"></a>llc_llcp_con_param_req_pdu_send</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, llc_llcp.o(i.llc_llcp_con_param_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = llc_llcp_con_param_req_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[45b]"></a>llc_llcp_con_param_rsp_pdu_send</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, llc_llcp.o(i.llc_llcp_con_param_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = llc_llcp_con_param_rsp_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
</UL>

<P><STRONG><a name="[4b2]"></a>llc_llcp_con_update_pdu_send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, llc_llcp.o(i.llc_llcp_con_update_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_con_update_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[4b9]"></a>llc_llcp_enc_req_pdu_send</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, llc_llcp.o(i.llc_llcp_enc_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = llc_llcp_enc_req_pdu_send &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[4bc]"></a>llc_llcp_enc_rsp_pdu_send</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llc_llcp.o(i.llc_llcp_enc_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llc_llcp_enc_rsp_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[457]"></a>llc_llcp_feats_req_pdu_send</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, llc_llcp.o(i.llc_llcp_feats_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llc_llcp_feats_req_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_supp_features
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_rem_used_feats_cmd_handler
</UL>

<P><STRONG><a name="[511]"></a>llc_llcp_get_autorize</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, llc_llcp.o(i.llc_llcp_get_autorize))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
</UL>

<P><STRONG><a name="[4c5]"></a>llc_llcp_length_req_pdu_send</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, llc_llcp.o(i.llc_llcp_length_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_length_req_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler
</UL>

<P><STRONG><a name="[4b8]"></a>llc_llcp_pause_enc_req_pdu_send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, llc_llcp.o(i.llc_llcp_pause_enc_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_pause_enc_req_pdu_send &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[4bb]"></a>llc_llcp_pause_enc_rsp_pdu_send</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, llc_llcp.o(i.llc_llcp_pause_enc_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llc_llcp_pause_enc_rsp_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[4a5]"></a>llc_llcp_ping_req_pdu_send</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, llc_llcp.o(i.llc_llcp_ping_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llc_llcp_ping_req_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_auth_payl_nearly_to_ind_handler
</UL>

<P><STRONG><a name="[4c9]"></a>llc_llcp_recv_handler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, llc_llcp.o(i.llc_llcp_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llc_llcp_recv_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_ind_handler
</UL>

<P><STRONG><a name="[44f]"></a>llc_llcp_reject_ind_pdu_send</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, llc_llcp.o(i.llc_llcp_reject_ind_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_reject_ind_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[4be]"></a>llc_llcp_start_enc_req_pdu_send</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, llc_llcp.o(i.llc_llcp_start_enc_req_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llc_llcp_start_enc_req_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[4ba]"></a>llc_llcp_start_enc_rsp_pdu_send</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, llc_llcp.o(i.llc_llcp_start_enc_rsp_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_start_enc_rsp_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[431]"></a>llc_llcp_terminate_ind_pdu_send</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, llc_llcp.o(i.llc_llcp_terminate_ind_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = llc_llcp_terminate_ind_pdu_send &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_req_neg_reply_cmd_handler
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnect_cmd_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[46c]"></a>llc_llcp_version_ind_pdu_send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, llc_llcp.o(i.llc_llcp_version_ind_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_llcp_version_ind_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
</UL>

<P><STRONG><a name="[4cc]"></a>llc_lsto_con_update</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, llc.o(i.llc_lsto_con_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>

<P><STRONG><a name="[4bd]"></a>llc_ltk_req_send</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, llc.o(i.llc_ltk_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_ltk_req_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[4cd]"></a>llc_map_update_finished</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, llc.o(i.llc_map_update_finished))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llc_map_update_finished &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[4ce]"></a>llc_map_update_ind</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llc.o(i.llc_map_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = llc_map_update_ind &rArr; llm_util_check_map_validity
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>

<P><STRONG><a name="[4cf]"></a>llc_pdu_acl_tx_ack_defer</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, llc_util.o(i.llc_pdu_acl_tx_ack_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llc_pdu_acl_tx_ack_defer &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_nb_of_pkt_comp_evt_send
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[4d0]"></a>llc_pdu_defer</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, llc_util.o(i.llc_pdu_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llc_pdu_defer &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_local
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[4d2]"></a>llc_pdu_llcp_tx_ack_defer</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, llc_util.o(i.llc_pdu_llcp_tx_ack_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llc_pdu_llcp_tx_ack_defer &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[4d3]"></a>llc_reset</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, llc.o(i.llc_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llc_reset &rArr; llm_util_bl_rem &rArr; llm_wl_dev_add &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>

<P><STRONG><a name="[4d5]"></a>llc_start</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, llc.o(i.llc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = llc_start &rArr; llc_le_con_cmp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_supp_features
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_set_auth_payl_to_margin
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_channel_map
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[4d6]"></a>llc_stop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, llc.o(i.llc_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llc_stop &rArr; llm_util_bl_rem &rArr; llm_wl_dev_add &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_stop_ind_handler
</UL>

<P><STRONG><a name="[4c0]"></a>llc_util_bw_mgt</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, llc_util.o(i.llc_util_bw_mgt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llc_util_bw_mgt &rArr; lld_util_anchor_point_move &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_anchor_point_move
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer
</UL>

<P><STRONG><a name="[459]"></a>llc_util_clear_operation_ptr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llc_util.o(i.llc_util_clear_operation_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llc_util_clear_operation_ptr &rArr; ke_msg_free &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_neg_reply_cmd_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_length_req_ind_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
</UL>

<P><STRONG><a name="[4b6]"></a>llc_util_dicon_procedure</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, llc_util.o(i.llc_util_dicon_procedure))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_stop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_req_handler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_rsp_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_rsp_handler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_req_handler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_rsp_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_link_sup_to_ind_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_data_ind_handler
</UL>

<P><STRONG><a name="[4d9]"></a>llc_util_get_free_conhdl</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, llc_util.o(i.llc_util_get_free_conhdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llc_util_get_free_conhdl
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[478]"></a>llc_util_set_auth_payl_to_margin</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, llc_util.o(i.llc_util_set_auth_payl_to_margin))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_wr_auth_payl_to_cmd_handler
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
</UL>

<P><STRONG><a name="[42e]"></a>llc_util_set_llcp_discard_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llc_util.o(i.llc_util_set_llcp_discard_enable))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_llcp_discard_cmd_handler
</UL>

<P><STRONG><a name="[4da]"></a>llc_util_update_channel_map</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, llc_util.o(i.llc_util_update_channel_map))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[46b]"></a>llc_version_rd_event_send</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, llc.o(i.llc_version_rd_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llc_version_rd_event_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rd_rem_ver_info_cmd_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
</UL>

<P><STRONG><a name="[4e0]"></a>lld_adv_start</STRONG> (Thumb, 884 bytes, Stack size 56 bytes, lld.o(i.lld_adv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lld_adv_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_loop
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
</UL>

<P><STRONG><a name="[4e6]"></a>lld_adv_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lld.o(i.lld_adv_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lld_adv_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
</UL>

<P><STRONG><a name="[4dd]"></a>lld_ch_map_ind</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lld.o(i.lld_ch_map_ind))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
</UL>

<P><STRONG><a name="[4af]"></a>lld_con_param_req</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, lld.o(i.lld_con_param_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lld_con_param_req &rArr; ea_offset_req
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[45a]"></a>lld_con_param_rsp</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, lld.o(i.lld_con_param_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lld_con_param_rsp &rArr; ea_offset_req
</UL>
<BR>[Calls]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_local_offset
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
</UL>

<P><STRONG><a name="[4ec]"></a>lld_con_start</STRONG> (Thumb, 1734 bytes, Stack size 168 bytes, lld.o(i.lld_con_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lld_con_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_apply_bd_addr
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_connection_param_set
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_adv_pack
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_channel_map
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
</UL>

<P><STRONG><a name="[4d8]"></a>lld_con_stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lld.o(i.lld_con_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>

<P><STRONG><a name="[4b3]"></a>lld_con_update_after_param_req</STRONG> (Thumb, 574 bytes, Stack size 128 bytes, lld.o(i.lld_con_update_after_param_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lld_con_update_after_param_req &rArr; ea_elt_create &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_local_offset
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[4de]"></a>lld_con_update_ind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lld.o(i.lld_con_update_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lld_con_update_ind &rArr; lld_evt_slave_update &rArr; ea_elt_create &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
</UL>

<P><STRONG><a name="[4b1]"></a>lld_con_update_req</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lld.o(i.lld_con_update_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lld_con_update_req &rArr; lld_evt_update_create &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[536]"></a>lld_core_reset</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lld.o(i.lld_core_reset))
<BR><BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>

<P><STRONG><a name="[2ab]"></a>lld_crypt_isr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lld.o(i.lld_crypt_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_crypt_isr &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[4e1]"></a>lld_evt_adv_create</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lld_evt.o(i.lld_evt_adv_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lld_evt_adv_create &rArr; ea_elt_create &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_tx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_rx
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
</UL>

<P><STRONG><a name="[7f]"></a>lld_evt_canceled</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lld_evt.o(i.lld_evt_canceled))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lld_evt_canceled &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lld.o(i.lld_con_start)
<LI> lld_evt.o(i.lld_evt_move_to_slave)
<LI> lld_evt.o(i.lld_evt_scan_create)
<LI> lld_evt.o(i.lld_evt_adv_create)
</UL>
<P><STRONG><a name="[4fe]"></a>lld_evt_channel_next</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lld_evt.o(i.lld_evt_channel_next))
<BR><BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
</UL>

<P><STRONG><a name="[81]"></a>lld_evt_deffered_elt_handler</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_deffered_elt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lld_evt_deffered_elt_handler &rArr; lld_pdu_check &rArr; llm_pdu_defer &rArr; llm_con_req_tx_cfm &rArr; lld_move_to_master &rArr; lld_evt_move_to_master &rArr; lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_finished
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_tx_free
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_end_evt_defer
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_evt.o(i.lld_evt_init)
</UL>
<P><STRONG><a name="[4f2]"></a>lld_evt_delete_elt_push</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_delete_elt_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_stop
</UL>

<P><STRONG><a name="[4e7]"></a>lld_evt_elt_delete</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_elt_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_remove
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_stop
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_stop
</UL>

<P><STRONG><a name="[4e5]"></a>lld_evt_elt_insert</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lld_evt.o(i.lld_evt_elt_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_tx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_rx
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
</UL>

<P><STRONG><a name="[4f9]"></a>lld_evt_end</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lld_evt_end &rArr; lld_pdu_rx_handler &rArr; llc_llcp_recv_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr
</UL>

<P><STRONG><a name="[2a7]"></a>lld_evt_end_isr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lld_evt.o(i.lld_evt_end_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lld_evt_end_isr &rArr; lld_evt_end &rArr; lld_pdu_rx_handler &rArr; llc_llcp_recv_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[4fb]"></a>lld_evt_init</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_remove
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
</UL>

<P><STRONG><a name="[4ed]"></a>lld_evt_init_evt</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lld_evt.o(i.lld_evt_init_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_evt_init_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_update
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
</UL>

<P><STRONG><a name="[4fd]"></a>lld_evt_move_to_master</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, lld_evt.o(i.lld_evt_move_to_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lld_evt_move_to_master &rArr; lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_insert
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_create
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_stop
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
</UL>

<P><STRONG><a name="[4ff]"></a>lld_evt_move_to_slave</STRONG> (Thumb, 858 bytes, Stack size 128 bytes, lld_evt.o(i.lld_evt_move_to_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lld_evt_move_to_slave &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_insert
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_create
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_time_compute
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_peer_offset
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
</UL>

<P><STRONG><a name="[80]"></a>lld_evt_prevent_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lld_evt.o(i.lld_evt_prevent_stop))
<BR>[Address Reference Count : 4]<UL><LI> lld.o(i.lld_con_start)
<LI> lld_evt.o(i.lld_evt_move_to_slave)
<LI> lld_evt.o(i.lld_evt_scan_create)
<LI> lld_evt.o(i.lld_evt_adv_create)
</UL>
<P><STRONG><a name="[4f5]"></a>lld_evt_restart</STRONG> (Thumb, 2140 bytes, Stack size 48 bytes, lld_evt.o(i.lld_evt_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_ind
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_lsto_con_update
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_time_compute
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rxwin_compute
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_canceled
</UL>

<P><STRONG><a name="[2a8]"></a>lld_evt_rx_isr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lld_evt.o(i.lld_evt_rx_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lld_evt_rx_isr &rArr; lld_pdu_rx_handler &rArr; llc_llcp_recv_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_rx_handler
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[502]"></a>lld_evt_scan_create</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lld_evt.o(i.lld_evt_scan_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lld_evt_scan_create &rArr; ea_elt_create &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_priority_set
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
</UL>

<P><STRONG><a name="[7e]"></a>lld_evt_schedule</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, lld_evt.o(i.lld_evt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lld_evt_schedule &rArr; lld_pdu_tx_prog &rArr; lld_pdu_send_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_adv_data_update
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_dle_set_cs_fields
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_ral_force_rpa_renew
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lld.o(i.lld_con_start)
<LI> lld_evt.o(i.lld_evt_move_to_slave)
<LI> lld_evt.o(i.lld_evt_scan_create)
<LI> lld_evt.o(i.lld_evt_adv_create)
</UL>
<P><STRONG><a name="[4c2]"></a>lld_evt_schedule_next</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_schedule_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lld_evt_schedule_next &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_time_compute
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_hci_acl_data_tx_handler
</UL>

<P><STRONG><a name="[4dc]"></a>lld_evt_schedule_next_instant</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_schedule_next_instant))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lld_evt_schedule_next_instant &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_channel_next
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_slave_time_compute
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
</UL>

<P><STRONG><a name="[4f3]"></a>lld_evt_slave_update</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lld_evt.o(i.lld_evt_slave_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lld_evt_slave_update &rArr; ea_elt_create &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_ind
</UL>

<P><STRONG><a name="[2aa]"></a>lld_evt_timer_isr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lld_evt.o(i.lld_evt_timer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_evt_timer_isr &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[4f4]"></a>lld_evt_update_create</STRONG> (Thumb, 312 bytes, Stack size 96 bytes, lld_evt.o(i.lld_evt_update_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lld_evt_update_create &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_connection_param_set
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init_evt
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_req
</UL>

<P><STRONG><a name="[441]"></a>lld_get_mode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lld.o(i.lld_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_feats_req_pdu_send
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rem_con_param_req_reply_cmd_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmd_handler
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_finished
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_finished
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_bw_mgt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_enc_ind_handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_rsp_to_ind_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[506]"></a>lld_init</STRONG> (Thumb, 832 bytes, Stack size 80 bytes, lld.o(i.lld_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lld_init &rArr; lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_wlcoex_set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[509]"></a>lld_move_to_master</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, lld.o(i.lld_move_to_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lld_move_to_master &rArr; lld_evt_move_to_master &rArr; lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
</UL>

<P><STRONG><a name="[50a]"></a>lld_move_to_slave</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, lld.o(i.lld_move_to_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lld_move_to_slave &rArr; lld_evt_move_to_slave &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[4ef]"></a>lld_pdu_adv_pack</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lld_pdu.o(i.lld_pdu_adv_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lld_pdu_adv_pack &rArr; lld_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
</UL>

<P><STRONG><a name="[4f6]"></a>lld_pdu_check</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, lld_pdu.o(i.lld_pdu_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lld_pdu_check &rArr; llm_pdu_defer &rArr; llm_con_req_tx_cfm &rArr; lld_move_to_master &rArr; lld_evt_move_to_master &rArr; lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_tx_free
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_defer
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_acl_tx_ack_defer
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[4c1]"></a>lld_pdu_data_send</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lld_pdu.o(i.lld_pdu_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lld_pdu_data_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_hci_acl_data_tx_handler
</UL>

<P><STRONG><a name="[4fa]"></a>lld_pdu_rx_handler</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, lld_pdu.o(i.lld_pdu_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lld_pdu_rx_handler &rArr; llc_llcp_recv_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pkt_statistic
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr
</UL>

<P><STRONG><a name="[50f]"></a>lld_pdu_send_packet</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, lld_pdu.o(i.lld_pdu_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lld_pdu_send_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
</UL>

<P><STRONG><a name="[439]"></a>lld_pdu_tx_flush</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lld_pdu.o(i.lld_pdu_tx_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_nb_of_pkt_comp_evt_send
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_flush_cmd_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
</UL>

<P><STRONG><a name="[4e4]"></a>lld_pdu_tx_loop</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, lld_pdu.o(i.lld_pdu_tx_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lld_pdu_tx_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_tx
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
</UL>

<P><STRONG><a name="[505]"></a>lld_pdu_tx_prog</STRONG> (Thumb, 776 bytes, Stack size 64 bytes, lld_pdu.o(i.lld_pdu_tx_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lld_pdu_tx_prog &rArr; lld_pdu_send_packet
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_get_autorize
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_merge
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_send_packet
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
</UL>

<P><STRONG><a name="[4e3]"></a>lld_pdu_tx_push</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lld_pdu.o(i.lld_pdu_tx_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_pdu_tx_push
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_tx
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
</UL>

<P><STRONG><a name="[521]"></a>lld_ral_renew_req</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lld.o(i.lld_ral_renew_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_ral_renew_req
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enh_priv_addr_renew_timer_handler
</UL>

<P><STRONG><a name="[512]"></a>lld_scan_start</STRONG> (Thumb, 732 bytes, Stack size 80 bytes, lld.o(i.lld_scan_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lld_scan_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_connection_param_set
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_loop
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_duration_req
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
</UL>

<P><STRONG><a name="[444]"></a>lld_scan_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lld.o(i.lld_scan_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cancel_cmd_handler
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
</UL>

<P><STRONG><a name="[53c]"></a>lld_sleep_enter</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lld_sleep.o(i.lld_sleep_enter))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[507]"></a>lld_sleep_init</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, lld_sleep.o(i.lld_sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lld_sleep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_us_set
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set
</UL>
<BR>[Called By]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
</UL>

<P><STRONG><a name="[515]"></a>lld_sleep_us_2_lpcycles</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lld_sleep.o(i.lld_sleep_us_2_lpcycles))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_us_2_lpcycles
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[53d]"></a>lld_sleep_wakeup</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, lld_sleep.o(i.lld_sleep_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lld_sleep_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup
</UL>

<P><STRONG><a name="[53f]"></a>lld_sleep_wakeup_end</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lld_sleep.o(i.lld_sleep_wakeup_end))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_end
</UL>

<P><STRONG><a name="[516]"></a>lld_test_mode_rx</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, lld.o(i.lld_test_mode_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lld_test_mode_rx &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_freq2chnl
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx
</UL>

<P><STRONG><a name="[518]"></a>lld_test_mode_tx</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, lld.o(i.lld_test_mode_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lld_test_mode_tx &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_freq2chnl
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_push
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_loop
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_insert
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
</UL>

<P><STRONG><a name="[464]"></a>lld_test_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lld.o(i.lld_test_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_test_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
</UL>

<P><STRONG><a name="[4d7]"></a>lld_util_anchor_point_move</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, lld_util.o(i.lld_util_anchor_point_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lld_util_anchor_point_move &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_offset_req
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_bw_mgt
</UL>

<P><STRONG><a name="[4cb]"></a>lld_util_compute_ce_max</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, lld_util.o(i.lld_util_compute_ce_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_util_compute_ce_max
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send
</UL>

<P><STRONG><a name="[4f1]"></a>lld_util_connection_param_set</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_connection_param_set))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_update_create
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
</UL>

<P><STRONG><a name="[504]"></a>lld_util_dle_set_cs_fields</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_dle_set_cs_fields))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
</UL>

<P><STRONG><a name="[4df]"></a>lld_util_eff_tx_time_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_eff_tx_time_set))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
</UL>

<P><STRONG><a name="[4fc]"></a>lld_util_flush_list</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lld_util.o(i.lld_util_flush_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lld_util_flush_list &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
</UL>

<P><STRONG><a name="[517]"></a>lld_util_freq2chnl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_freq2chnl))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_tx
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_rx
</UL>

<P><STRONG><a name="[4eb]"></a>lld_util_get_local_offset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_get_local_offset))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
</UL>

<P><STRONG><a name="[4ea]"></a>lld_util_get_peer_offset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_get_peer_offset))
<BR><BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req
</UL>

<P><STRONG><a name="[463]"></a>lld_util_get_tx_pkt_cnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_get_tx_pkt_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_req_handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_enc_req_handler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_start_enc_cmd_handler
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_llcp_tx_ack_defer
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_pdu_acl_tx_ack_defer
</UL>

<P><STRONG><a name="[4c6]"></a>lld_util_instant_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_instant_get))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
</UL>

<P><STRONG><a name="[4db]"></a>lld_util_instant_ongoing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_instant_ongoing))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_upd_ind_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_channel_map_ind_handler
</UL>

<P><STRONG><a name="[4ee]"></a>lld_util_priority_set</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_priority_set))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_scan_create
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_master
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_adv_create
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
</UL>

<P><STRONG><a name="[44a]"></a>lld_util_ral_force_rpa_renew</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, lld_util.o(i.lld_util_ral_force_rpa_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lld_util_ral_force_rpa_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_enh_priv_addr_renew_timer_handler
</UL>

<P><STRONG><a name="[524]"></a>lld_util_set_bd_address</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lld_util.o(i.lld_util_set_bd_address))
<BR><BR>[Called By]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_apply_bd_addr
</UL>

<P><STRONG><a name="[508]"></a>lld_wlcoex_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lld_wlcoex.o(i.lld_wlcoex_set))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wlcoex_set
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
</UL>

<P><STRONG><a name="[519]"></a>llm_ble_ready</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llm.o(i.llm_ble_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llm_ble_ready &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[43b]"></a>llm_common_cmd_complete_send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llm.o(i.llm_common_cmd_complete_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_evt_mask_page_2_cmd_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_evt_mask_cmd_handler
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_ctrl_to_host_flow_ctrl_cmd_handler
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_cmd_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_wr_suggted_dft_data_len_cmd_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_wl_mngt_cmd_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_param_cmd_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_en_cmd_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_rand_add_cmd_handler
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_host_ch_class_cmd_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_evt_mask_cmd_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cancel_cmd_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_host_nb_cmp_pkts_cmd_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_host_buf_size_cmd_handler
</UL>

<P><STRONG><a name="[446]"></a>llm_common_cmd_status_send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llm.o(i.llm_common_cmd_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llm_common_cmd_status_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rd_local_p256_public_key_cmd_handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_cmd_handler
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cmd_handler
</UL>

<P><STRONG><a name="[51a]"></a>llm_con_req_ind</STRONG> (Thumb, 378 bytes, Stack size 88 bytes, llm.o(i.llm_con_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = llm_con_req_ind &rArr; lld_move_to_slave &rArr; lld_evt_move_to_slave &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_update_channel_map
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_get_free_conhdl
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
</UL>

<P><STRONG><a name="[51c]"></a>llm_con_req_tx_cfm</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, llm.o(i.llm_con_req_tx_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = llm_con_req_tx_cfm &rArr; lld_move_to_master &rArr; lld_evt_move_to_master &rArr; lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_master
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
</UL>

<P><STRONG><a name="[447]"></a>llm_create_con</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, llm.o(i.llm_create_con))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = llm_create_con &rArr; lld_con_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_get_free_conhdl
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_create_con_cmd_handler
</UL>

<P><STRONG><a name="[83]"></a>llm_encryption_done</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, llm.o(i.llm_encryption_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llm_encryption_done &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm.o(i.llm_init)
</UL>
<P><STRONG><a name="[448]"></a>llm_encryption_start</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, llm.o(i.llm_encryption_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = llm_encryption_start &rArr; rwip_prevent_sleep_set
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enc_cmd_handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_enc_req_handler
</UL>

<P><STRONG><a name="[4f7]"></a>llm_end_evt_defer</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, llm_util.o(i.llm_end_evt_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llm_end_evt_defer &rArr; llc_le_con_cmp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_update
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_deffered_elt_handler
</UL>

<P><STRONG><a name="[51e]"></a>llm_init</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, llm.o(i.llm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llm_init &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_clr
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>

<P><STRONG><a name="[520]"></a>llm_le_adv_report_ind</STRONG> (Thumb, 912 bytes, Stack size 64 bytes, llm.o(i.llm_le_adv_report_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = llm_le_adv_report_ind &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_pdu_defer
</UL>

<P><STRONG><a name="[50c]"></a>llm_pdu_defer</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, llm_util.o(i.llm_pdu_defer))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = llm_pdu_defer &rArr; llm_con_req_tx_cfm &rArr; lld_move_to_master &rArr; lld_evt_move_to_master &rArr; lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_check
</UL>

<P><STRONG><a name="[44b]"></a>llm_ral_clear</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, llm.o(i.llm_ral_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = llm_ral_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
</UL>

<P><STRONG><a name="[44c]"></a>llm_ral_dev_add</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, llm.o(i.llm_ral_dev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llm_ral_dev_add &rArr; llm_util_bd_addr_in_wl &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_wl
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
</UL>

<P><STRONG><a name="[44d]"></a>llm_ral_dev_rm</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, llm.o(i.llm_ral_dev_rm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = llm_ral_dev_rm &rArr; llm_util_bd_addr_in_ral
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
</UL>

<P><STRONG><a name="[449]"></a>llm_ral_get_rpa</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, llm.o(i.llm_ral_get_rpa))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llm_ral_get_rpa &rArr; llm_util_bd_addr_in_ral
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_6
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_info_cmd_handler
</UL>

<P><STRONG><a name="[44e]"></a>llm_ral_set_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, llm.o(i.llm_ral_set_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = llm_ral_set_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enh_privacy_mgmt_cmd_handler
</UL>

<P><STRONG><a name="[51d]"></a>llm_ral_update</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, llm.o(i.llm_ral_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llm_ral_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_end_evt_defer
</UL>

<P><STRONG><a name="[45c]"></a>llm_set_adv_data</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, llm.o(i.llm_set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llm_set_adv_data &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_data_cmd_handler
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_adv_data_update
</UL>

<P><STRONG><a name="[45d]"></a>llm_set_adv_en</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, llm.o(i.llm_set_adv_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = llm_set_adv_en &rArr; lld_adv_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_apply_bd_addr
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_stop
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_en_cmd_handler
</UL>

<P><STRONG><a name="[45e]"></a>llm_set_adv_param</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, llm.o(i.llm_set_adv_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llm_set_adv_param &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_address_validity
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_adv_param_cmd_handler
</UL>

<P><STRONG><a name="[460]"></a>llm_set_scan_en</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, llm.o(i.llm_set_scan_en))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = llm_set_scan_en &rArr; lld_scan_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_flush_list
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_apply_bd_addr
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_stop
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_en_cmd_handler
</UL>

<P><STRONG><a name="[461]"></a>llm_set_scan_param</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, llm.o(i.llm_set_scan_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llm_set_scan_param &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_param_cmd_handler
</UL>

<P><STRONG><a name="[462]"></a>llm_set_scan_rsp_data</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, llm.o(i.llm_set_scan_rsp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llm_set_scan_rsp_data &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_rsp_data_cmd_handler
</UL>

<P><STRONG><a name="[465]"></a>llm_test_mode_start_rx</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, llm.o(i.llm_test_mode_start_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = llm_test_mode_start_rx &rArr; lld_test_mode_rx &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
</UL>

<P><STRONG><a name="[466]"></a>llm_test_mode_start_tx</STRONG> (Thumb, 532 bytes, Stack size 296 bytes, llm.o(i.llm_test_mode_start_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = llm_test_mode_start_tx &rArr; lld_test_mode_tx &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_mode_tx
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_test_mode_mngt_cmd_handler
</UL>

<P><STRONG><a name="[503]"></a>llm_util_adv_data_update</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, llm_util.o(i.llm_util_adv_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llm_util_adv_data_update &rArr; llm_set_adv_data &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_data
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule
</UL>

<P><STRONG><a name="[4f0]"></a>llm_util_apply_bd_addr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llm_util.o(i.llm_util_apply_bd_addr))
<BR><BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_set_bd_address
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
</UL>

<P><STRONG><a name="[4e2]"></a>llm_util_bd_addr_in_ral</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, llm_util.o(i.llm_util_bd_addr_in_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llm_util_bd_addr_in_ral
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem_hdl
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add_hdl
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_get_rpa
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_rm
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_add
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_adv_start
</UL>

<P><STRONG><a name="[522]"></a>llm_util_bd_addr_in_wl</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, llm_util.o(i.llm_util_bd_addr_in_wl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llm_util_bd_addr_in_wl &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_wl_position
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem_hdl
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add_hdl
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_add
</UL>

<P><STRONG><a name="[525]"></a>llm_util_bd_addr_wl_position</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, llm_util.o(i.llm_util_bd_addr_wl_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_wl
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add
</UL>

<P><STRONG><a name="[51b]"></a>llm_util_bl_add</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, llm_util.o(i.llm_util_bl_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llm_util_bl_add &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_wl_position
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Called By]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_tx_cfm
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[468]"></a>llm_util_bl_check</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, llm_util.o(i.llm_util_bl_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llm_util_bl_check
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_wl_mngt_cmd_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem_hdl
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add_hdl
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_con_req_ind
</UL>

<P><STRONG><a name="[4d4]"></a>llm_util_bl_rem</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, llm_util.o(i.llm_util_bl_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = llm_util_bl_rem &rArr; llm_wl_dev_add &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
</UL>

<P><STRONG><a name="[523]"></a>llm_util_check_address_validity</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, llm_util.o(i.llm_util_check_address_validity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = llm_util_check_address_validity
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param
</UL>

<P><STRONG><a name="[442]"></a>llm_util_check_evt_mask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llm_util.o(i.llm_util_check_evt_mask))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_unknown_rsp_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_rsp_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_con_update_cmd_handler
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_ind
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_le_adv_report_ind
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ecc_result_ind_handler
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_enc_mgt_ind_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_upd_req_ind_handler
</UL>

<P><STRONG><a name="[45f]"></a>llm_util_check_map_validity</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, llm_util.o(i.llm_util_check_map_validity))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = llm_util_check_map_validity
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_map_update_ind
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_host_ch_class_cmd_handler
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_move_to_slave
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
</UL>

<P><STRONG><a name="[4aa]"></a>llm_util_get_channel_map</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, llm_util.o(i.llm_util_get_channel_map))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_chnl_assess_timer_handler
</UL>

<P><STRONG><a name="[4c8]"></a>llm_util_get_supp_features</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llm_util.o(i.llm_util_get_supp_features))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_req_handler
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_feats_req_pdu_send
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_start
</UL>

<P><STRONG><a name="[42f]"></a>llm_util_set_public_addr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llm_util.o(i.llm_util_set_public_addr))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_set_bd_addr_cmd_handler
</UL>

<P><STRONG><a name="[467]"></a>llm_wl_clr</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, llm.o(i.llm_wl_clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = llm_wl_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_wl_mngt_cmd_handler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
</UL>

<P><STRONG><a name="[527]"></a>llm_wl_dev_add</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, llm.o(i.llm_wl_dev_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llm_wl_dev_add &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_wl_position
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_rem
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add_hdl
</UL>

<P><STRONG><a name="[469]"></a>llm_wl_dev_add_hdl</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, llm.o(i.llm_wl_dev_add_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = llm_wl_dev_add_hdl &rArr; llm_util_bd_addr_in_wl &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_wl
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_wl_mngt_cmd_handler
</UL>

<P><STRONG><a name="[526]"></a>llm_wl_dev_rem</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, llm.o(i.llm_wl_dev_rem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = llm_wl_dev_rem &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_wl_position
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_add
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem_hdl
</UL>

<P><STRONG><a name="[46a]"></a>llm_wl_dev_rem_hdl</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, llm.o(i.llm_wl_dev_rem_hdl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = llm_wl_dev_rem_hdl &rArr; llm_util_bd_addr_in_wl &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_wl
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bd_addr_in_ral
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_wl_mngt_cmd_handler
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = main &rArr; accelInit &rArr; accel_SelfTest &rArr; adxl362ReadReg &rArr; ADXL362_GetRegisterValue &rArr; ADXL362_SPI_Read &rArr; SPI_MasterTransferBlocking &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ConfigRxMode
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableDCDC
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_SetGpioWakeupLevel
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Init
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2eb]"></a>notEqual256</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ecc_p256.o(i.notEqual256))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
</UL>

<P><STRONG><a name="[176]"></a>nvds_del</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, nvds.o(i.nvds_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvds_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>nvds_get</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, nvds.o(i.nvds_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvds_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConstructAdvData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcGetDevInfoReqIndHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[2af]"></a>nvds_init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, nvds.o(i.nvds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nvds_init &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[177]"></a>nvds_lock</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, nvds.o(i.nvds_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvds_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>nvds_put</STRONG> (Thumb, 418 bytes, Stack size 312 bytes, nvds.o(i.nvds_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nvds_put &rArr; nvds_purge
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_purge
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GapcSetDevInfoReqIndHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[3f1]"></a>platform_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rwip.o(i.platform_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_plf_reset_cmd_handler
</UL>

<P><STRONG><a name="[cc]"></a>prf_add_profile</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, prf.o(i.prf_add_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prf_add_profile &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>prf_cleanup</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, prf.o(i.prf_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prf_cleanup &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>prf_create</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, prf.o(i.prf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prf_create &rArr; prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[412]"></a>prf_dst_task_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, prf.o(i.prf_dst_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_cleanup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
</UL>

<P><STRONG><a name="[cd]"></a>prf_env_get</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, prf.o(i.prf_env_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prf_env_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dev_adv_tx_power_ind_handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_enable_req_handler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_batt_level_upd_req_handler
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_handle
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_req_ind_handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>prf_get_id_from_task</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, prf.o(i.prf_get_id_from_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_id_from_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>prf_get_task_from_id</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, prf.o(i.prf_get_task_from_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_get_task_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassBattLevelUpdReq
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BassEnableReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>prf_init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, prf.o(i.prf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prf_init &rArr; ke_task_msg_flush &rArr; ke_msg_free &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_msg_flush
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qnble.o(.constdata)
</UL>
<P><STRONG><a name="[40c]"></a>prf_pack_char_pres_fmt</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, prf_utils.o(i.prf_pack_char_pres_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prf_pack_char_pres_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_req_ind_handler
</UL>

<P><STRONG><a name="[386]"></a>prf_src_task_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, prf.o(i.prf_src_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_cleanup
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_notify_batt_lvl
</UL>

<P><STRONG><a name="[531]"></a>proxr_prf_itf_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proxr.o(i.proxr_prf_itf_get))
<BR><BR>[Called By]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_itf_get
</UL>

<P><STRONG><a name="[537]"></a>rf_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rf.o(i.rf_init))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[533]"></a>rwble_hl_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rwble_hl.o(i.rwble_hl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rwble_hl_init &rArr; l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[3f0]"></a>rwble_hl_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rwble_hl.o(i.rwble_hl_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rwble_hl_reset &rArr; l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reset_cmd_handler
</UL>

<P><STRONG><a name="[534]"></a>rwble_init</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, rwble.o(i.rwble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rwble_init &rArr; lld_init &rArr; lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ble_ready
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init
</UL>

<P><STRONG><a name="[535]"></a>rwble_reset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rwble.o(i.rwble_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rwble_reset &rArr; lld_init &rArr; lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_init
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_init
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_core_reset
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_reset
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>

<P><STRONG><a name="[539]"></a>rwble_sleep_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rwble.o(i.rwble_sleep_check))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[2b1]"></a>rwip_init</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, rwip.o(i.rwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rwip_init &rArr; rwble_init &rArr; lld_init &rArr; lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_init
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[419]"></a>rwip_prevent_sleep_clear</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, rwip.o(i.rwip_prevent_sleep_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rwip_prevent_sleep_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_tx_evt_handler
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_read_start
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_out_of_sync
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_pld_rx_evt_handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_init
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_init
</UL>

<P><STRONG><a name="[30e]"></a>rwip_prevent_sleep_set</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rwip.o(i.rwip_prevent_sleep_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rwip_prevent_sleep_set
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_done
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_handler
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_elt_delete
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_delete_elt_push
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_write
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
</UL>

<P><STRONG><a name="[46e]"></a>rwip_reset</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, rwip.o(i.rwip_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rwip_reset &rArr; rwble_reset &rArr; lld_init &rArr; lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_flush
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_init
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_reset_cmd_handler
</UL>

<P><STRONG><a name="[52c]"></a>rwip_schedule</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rwip.o(i.rwip_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rwip_schedule &rArr; ke_event_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[301]"></a>rwip_sleep</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, rwip.o(i.rwip_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rwip_sleep &rArr; h4tl_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_stop
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_sleep_check
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_sleep_check
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_sleep_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
</UL>

<P><STRONG><a name="[2a3]"></a>rwip_wakeup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rwip.o(i.rwip_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rwip_wakeup &rArr; h4tl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[513]"></a>rwip_wakeup_delay_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rwip.o(i.rwip_wakeup_delay_set))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
</UL>

<P><STRONG><a name="[514]"></a>rwip_wakeup_delay_us_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwip.o(i.rwip_wakeup_delay_us_set))
<BR><BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init
</UL>

<P><STRONG><a name="[2a4]"></a>rwip_wakeup_end</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rwip.o(i.rwip_wakeup_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rwip_wakeup_end &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_wakeup_end
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>

<P><STRONG><a name="[430]"></a>rwip_wlcoex_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwip.o(i.rwip_wlcoex_set))
<BR><BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_wlcoex_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wlan_coex_cmd_handler
</UL>

<P><STRONG><a name="[542]"></a>smpc_ShiftLeft1Bit16ByteNum</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, smpc_crypto.o(i.smpc_ShiftLeft1Bit16ByteNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_ShiftLeft1Bit16ByteNum
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue
</UL>

<P><STRONG><a name="[540]"></a>smpc_aes_cmac_continue</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, smpc_crypto.o(i.smpc_aes_cmac_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpc_aes_cmac_continue &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_ShiftLeft1Bit16ByteNum
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_process_aes_cmac
</UL>

<P><STRONG><a name="[543]"></a>smpc_aes_cmac_init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, smpc_crypto.o(i.smpc_aes_cmac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_aes_cmac_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[401]"></a>smpc_calc_confirm_cont</STRONG> (Thumb, 1924 bytes, Stack size 48 bytes, smpc_api.o(i.smpc_calc_confirm_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = smpc_calc_confirm_cont &rArr; smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_process_aes_cmac
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_complete
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_complete
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_complete
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_complete
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_check
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_cfm
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler
</UL>

<P><STRONG><a name="[56e]"></a>smpc_calc_subkeys</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, smpc.o(i.smpc_calc_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smpc_calc_subkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
</UL>

<P><STRONG><a name="[567]"></a>smpc_check_key_distrib</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, smpc.o(i.smpc_check_key_distrib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_check_key_distrib
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[552]"></a>smpc_check_max_key_size</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, smpc.o(i.smpc_check_max_key_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_check_max_key_size
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_set
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[56a]"></a>smpc_check_pairing_feat</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, smpc.o(i.smpc_check_pairing_feat))
<BR><BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[56b]"></a>smpc_check_param</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_check_param))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
</UL>

<P><STRONG><a name="[554]"></a>smpc_check_repeated_attempts</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, smpc.o(i.smpc_check_repeated_attempts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpc_check_repeated_attempts &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
</UL>

<P><STRONG><a name="[3ae]"></a>smpc_clear_timeout_timer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, smpc.o(i.smpc_clear_timeout_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = smpc_clear_timeout_timer &rArr; ke_timer_clear &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cleanup
</UL>

<P><STRONG><a name="[3e2]"></a>smpc_confirm_gen_rand</STRONG> (Thumb, 716 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_confirm_gen_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = smpc_confirm_gen_rand &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_next_passkey_bit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_nb_ind_handler
</UL>

<P><STRONG><a name="[3b8]"></a>smpc_encrypt_cfm</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, smpc_api.o(i.smpc_encrypt_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_encrypt_cfm &rArr; smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cfm_handler
</UL>

<P><STRONG><a name="[3ba]"></a>smpc_encrypt_start</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_encrypt_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = smpc_encrypt_start &rArr; smpc_send_start_enc_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_start_enc_cmd
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_set
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
</UL>

<P><STRONG><a name="[3b9]"></a>smpc_encrypt_start_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, smpc_api.o(i.smpc_encrypt_start_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_encrypt_start_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_cmd_handler
</UL>

<P><STRONG><a name="[556]"></a>smpc_f4_Init</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, smpc_crypto.o(i.smpc_f4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smpc_f4_Init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[547]"></a>smpc_f4_complete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_f4_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_f4_complete &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[54e]"></a>smpc_f5_complete</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_f5_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_f5_complete &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[559]"></a>smpc_f5_init</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, smpc_crypto.o(i.smpc_f5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
</UL>

<P><STRONG><a name="[550]"></a>smpc_f6_complete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_f6_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_f6_complete &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[55a]"></a>smpc_f6_init</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, smpc_crypto.o(i.smpc_f6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpc_f6_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_check
</UL>

<P><STRONG><a name="[54d]"></a>smpc_g2_complete</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smpc_crypto.o(i.smpc_g2_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smpc_g2_complete &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[54c]"></a>smpc_g2_init</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, smpc_crypto.o(i.smpc_g2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smpc_g2_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[544]"></a>smpc_generate_cfm</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, smpc.o(i.smpc_generate_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smpc_generate_cfm &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[55b]"></a>smpc_generate_ci</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, smpc.o(i.smpc_generate_ci))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpc_generate_ci &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_csrk
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
</UL>

<P><STRONG><a name="[555]"></a>smpc_generate_e1</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, smpc.o(i.smpc_generate_e1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpc_generate_e1 &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[55d]"></a>smpc_generate_l</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, smpc.o(i.smpc_generate_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = smpc_generate_l &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_csrk
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
</UL>

<P><STRONG><a name="[549]"></a>smpc_generate_rand</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, smpc.o(i.smpc_generate_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_generate_rand &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
</UL>

<P><STRONG><a name="[453]"></a>smpc_generate_stk</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, smpc.o(i.smpc_generate_stk))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpc_generate_stk &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
</UL>

<P><STRONG><a name="[568]"></a>smpc_get_key_sec_prop</STRONG> (Thumb, 330 bytes, Stack size 12 bytes, smpc.o(i.smpc_get_key_sec_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = smpc_get_key_sec_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[557]"></a>smpc_get_next_passkey_bit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, smpc.o(i.smpc_get_next_passkey_bit))
<BR><BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
</UL>

<P><STRONG><a name="[3bb]"></a>smpc_handle_dh_key_check_complete</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, smpc.o(i.smpc_handle_dh_key_check_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smpc_handle_dh_key_check_complete &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_gen_dh_key_ind_handler
</UL>

<P><STRONG><a name="[434]"></a>smpc_handle_enc_change_evt</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, smpc.o(i.smpc_handle_enc_change_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smpc_handle_enc_change_evt &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_link_encrypted
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_auth_get
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_key_refr_evt_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_enc_chg_evt_handler
</UL>

<P><STRONG><a name="[54a]"></a>smpc_init_mac_key_calculation</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, smpc.o(i.smpc_init_mac_key_calculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_dh_key_check_complete
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu
</UL>

<P><STRONG><a name="[54f]"></a>smpc_initiate_dhkey_check</STRONG> (Thumb, 298 bytes, Stack size 80 bytes, smpc.o(i.smpc_initiate_dhkey_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = smpc_initiate_dhkey_check &rArr; smpc_f6_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[551]"></a>smpc_initiate_dhkey_verification</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, smpc.o(i.smpc_initiate_dhkey_verification))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_dhkey_check_pdu
</UL>

<P><STRONG><a name="[569]"></a>smpc_is_sec_mode_reached</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, smpc.o(i.smpc_is_sec_mode_reached))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[563]"></a>smpc_key_press_notification_ind</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, smpc_api.o(i.smpc_key_press_notification_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpc_key_press_notification_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_keypress_notification_pdu
</UL>

<P><STRONG><a name="[3a0]"></a>smpc_pairing_csrk_exch</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_pairing_csrk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = smpc_pairing_csrk_exch &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3a8]"></a>smpc_pairing_end</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, smpc.o(i.smpc_pairing_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_smp_timeout_timer_ind_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_fail_pdu
</UL>

<P><STRONG><a name="[3a3]"></a>smpc_pairing_irk_exch</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_pairing_irk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = smpc_pairing_irk_exch &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3a2]"></a>smpc_pairing_ltk_exch</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_ltk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = smpc_pairing_ltk_exch &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3a5]"></a>smpc_pairing_nc_exch</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, smpc_api.o(i.smpc_pairing_nc_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = smpc_pairing_nc_exch &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3a4]"></a>smpc_pairing_oob_exch</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_oob_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smpc_pairing_oob_exch &rArr; smpc_f4_Init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3aa]"></a>smpc_pairing_req_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, smpc_api.o(i.smpc_pairing_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smpc_pairing_req_handler &rArr; smpc_send_pairing_req_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
</UL>

<P><STRONG><a name="[39f]"></a>smpc_pairing_rsp</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_pairing_rsp &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_is_sec_mode_reached
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_key_sec_prop
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_key_distrib
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[3ab]"></a>smpc_pairing_start</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_pairing_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpc_pairing_start &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_pairing_feat
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cmd_handler
</UL>

<P><STRONG><a name="[3a1]"></a>smpc_pairing_tk_exch</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_pairing_tk_exch))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smpc_pairing_tk_exch &rArr; smpc_generate_rand &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
</UL>

<P><STRONG><a name="[4a0]"></a>smpc_pdu_recv</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, smpc.o(i.smpc_pdu_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_pdu_recv &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_param
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler
</UL>

<P><STRONG><a name="[3a6]"></a>smpc_pdu_send</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, smpc.o(i.smpc_pdu_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_key_press_notification_cmd_handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_cfm_handler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rand_pdu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
</UL>

<P><STRONG><a name="[546]"></a>smpc_process_aes_cmac</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, smpc_crypto.o(i.smpc_process_aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smpc_process_aes_cmac &rArr; smpc_aes_cmac_continue &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_use_enc_block_cmd
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[451]"></a>smpc_secure_connections_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, smpc.o(i.smpc_secure_connections_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_cfm_pdu
</UL>

<P><STRONG><a name="[3ca]"></a>smpc_security_req_send</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, smpc_api.o(i.smpc_security_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpc_security_req_send &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_security_cmd_handler
</UL>

<P><STRONG><a name="[56c]"></a>smpc_send_gen_dh_key_cmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, smpc.o(i.smpc_send_gen_dh_key_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpc_send_gen_dh_key_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
</UL>

<P><STRONG><a name="[452]"></a>smpc_send_ltk_req_rsp</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, smpc.o(i.smpc_send_ltk_req_rsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_cfm
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_ltk_request_evt_handler
</UL>

<P><STRONG><a name="[564]"></a>smpc_send_pairing_ind</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, smpc.o(i.smpc_send_pairing_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_link_encrypted
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_auth_set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sign_info_pdu
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sec_req_pdu
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_req_pdu
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_fail_pdu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_addr_info_pdu
</UL>

<P><STRONG><a name="[548]"></a>smpc_send_pairing_req_ind</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, smpc.o(i.smpc_send_pairing_req_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = smpc_send_pairing_req_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_public_key_pdu
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_pair_rsp_pdu
</UL>

<P><STRONG><a name="[545]"></a>smpc_send_start_enc_cmd</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, smpc.o(i.smpc_send_start_enc_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpc_send_start_enc_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_update_state
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
</UL>

<P><STRONG><a name="[541]"></a>smpc_send_use_enc_block_cmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, smpc.o(i.smpc_send_use_enc_block_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_process_aes_cmac
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_init
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f6_init
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f5_init
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_aes_cmac_continue
</UL>

<P><STRONG><a name="[3cc]"></a>smpc_sign_command</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, smpc_api.o(i.smpc_sign_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = smpc_sign_command &rArr; smpc_generate_ci &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_sign_counter
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sign_cmd_handler
</UL>

<P><STRONG><a name="[402]"></a>smpc_sign_cont</STRONG> (Thumb, 506 bytes, Stack size 64 bytes, smpc_api.o(i.smpc_sign_cont))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = smpc_sign_cont &rArr; smpc_generate_ci &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_xor
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_l
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_ci
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_subkeys
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_sign_counter
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_ind_handler
</UL>

<P><STRONG><a name="[562]"></a>smpc_tkdp_rcp_continue</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, smpc.o(i.smpc_tkdp_rcp_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_start
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_sign_info_pdu
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_mst_id_pdu
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_info_pdu
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_id_addr_info_pdu
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_recv_enc_info_pdu
</UL>

<P><STRONG><a name="[561]"></a>smpc_tkdp_send_continue</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, smpc.o(i.smpc_tkdp_send_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_bdaddr
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_irk
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_start
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>

<P><STRONG><a name="[570]"></a>smpc_tkdp_send_start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, smpc.o(i.smpc_tkdp_send_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = smpc_tkdp_send_start &rArr;  smpc_tkdp_send_continue (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
</UL>

<P><STRONG><a name="[56f]"></a>smpc_xor</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, smpc.o(i.smpc_xor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = smpc_xor
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
</UL>

<P><STRONG><a name="[3e0]"></a>smpm_gen_rand_addr</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smpm_api.o(i.smpm_gen_rand_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpm_gen_rand_addr &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_addr_cmd_handler
</UL>

<P><STRONG><a name="[3ff]"></a>smpm_gen_rand_nb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, smpm_api.o(i.smpm_gen_rand_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smpm_gen_rand_nb &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_cmd_handler
</UL>

<P><STRONG><a name="[3f2]"></a>smpm_resolv_addr</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, smpm_api.o(i.smpm_resolv_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpm_resolv_addr &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_resolv_addr_cmd_handler
</UL>

<P><STRONG><a name="[455]"></a>smpm_send_encrypt_req</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, smpm_api.o(i.smpm_send_encrypt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpm_send_encrypt_req &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_rand_cmd_cmp_evt_handler
</UL>

<P><STRONG><a name="[3df]"></a>smpm_send_generate_dh_key</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, smpm_api.o(i.smpm_send_generate_dh_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpm_send_generate_dh_key &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_dh_key_cmd_handler
</UL>

<P><STRONG><a name="[400]"></a>smpm_use_enc_block</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, smpm_api.o(i.smpm_use_enc_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = smpm_use_enc_block &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_cmd_handler
</UL>

<P><STRONG><a name="[2f8]"></a>specialModP256</STRONG> (Thumb, 316 bytes, Stack size 112 bytes, ecc_p256.o(i.specialModP256))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHexSign256
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractFromSelfBigHex256
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubtractBigHex256
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexByUint32_256
</UL>

<P><STRONG><a name="[333]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt_full.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2b0]"></a>unloaded_area_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rwip.o(i.unloaded_area_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[2fd]"></a>POWER_RegisterWakeupEntry</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fw_symbols_keil.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init (via Veneer)
</UL>

<P><STRONG><a name="[314]"></a>POWER_EnterPowerDownInRam</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, fsl_power_in_ram.o(in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterPowerDown (via Veneer)
</UL>

<P><STRONG><a name="[66]"></a>POWER_WakeupEntry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fsl_power_in_ram.o(in_ram))
<BR>[Address Reference Count : 1]<UL><LI> power_manager.o(i.PM_Init)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2da]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(i.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[2d6]"></a>CLOCK_Get32KFreq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_Get32KFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtFreq
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[2d1]"></a>CLOCK_GetAhbClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetAhbClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetApbClkFreq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[2d3]"></a>CLOCK_GetApbClkFreq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetApbClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetWdtFreq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[2d2]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetXinFreq
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetRco32MFreq
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Get32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetAhbClkFreq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[2d4]"></a>CLOCK_GetRco32MFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetRco32MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[2d8]"></a>CLOCK_GetWdtFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_clock.o(i.CLOCK_GetWdtFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLOCK_GetWdtFreq &rArr; CLOCK_GetApbClkFreq &rArr; CLOCK_GetAhbClkFreq &rArr; CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetApbClkFreq
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_Get32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[2d5]"></a>CLOCK_GetXinFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(i.CLOCK_GetXinFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[2ca]"></a>Clk32KConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.Clk32KConfig))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[2cd]"></a>ClkBleConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.ClkBleConfig))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[2cb]"></a>ClkSysConfig</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, fsl_clock.o(i.ClkSysConfig))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[2cc]"></a>ClkWdtConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_clock.o(i.ClkWdtConfig))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
</UL>

<P><STRONG><a name="[2cf]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[2d0]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>

<P><STRONG><a name="[310]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_power.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterPowerDown
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>

<P><STRONG><a name="[311]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_power.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>

<P><STRONG><a name="[313]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, fsl_power.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_RestoreSwd
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableSwdWakeup
</UL>

<P><STRONG><a name="[2c3]"></a>CALIB_HFRCO</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, fsl_calibration.o(i.CALIB_HFRCO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CALIB_HFRCO &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[2c4]"></a>CALIB_HFXO</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, fsl_calibration.o(i.CALIB_HFXO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CALIB_HFXO &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[2c5]"></a>CALIB_LFRCO</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fsl_calibration.o(i.CALIB_LFRCO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CALIB_LFRCO &rArr; POWER_WritePmuCtrl1
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[2c9]"></a>CALIB_PowerOn</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, fsl_calibration.o(i.CALIB_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[2c6]"></a>CALIB_RC</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, fsl_calibration.o(i.CALIB_RC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CALIB_RC &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALIB_SystemCalib
</UL>

<P><STRONG><a name="[32e]"></a>USART_TransferGetRxRingBufferLength</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_usart.o(i.USART_TransferGetRxRingBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = USART_TransferGetRxRingBufferLength &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TransferReceiveNonBlocking
</UL>

<P><STRONG><a name="[2e9]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_flexcomm.o(i.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[319]"></a>SPI_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[29c]"></a>APP_BleIsActive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_ble.o(i.APP_BleIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MsgSend
</UL>

<P><STRONG><a name="[279]"></a>APP_BleSoftwareWakeup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_ble.o(i.APP_BleSoftwareWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_BleSoftwareWakeup &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MsgSend
</UL>

<P><STRONG><a name="[296]"></a>APP_InitEnv</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, app_ble.o(i.APP_InitEnv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = APP_InitEnv &rArr; APP_ConstructAdvData &rArr; nvds_get
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConstructAdvData
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_InitSmp
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Init
</UL>

<P><STRONG><a name="[29a]"></a>APP_InitSmp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_ble.o(i.APP_InitSmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_InitSmp &rArr; APP_SecGenKey
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SecGenKey
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_InitEnv
</UL>

<P><STRONG><a name="[294]"></a>APP_GetHandler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, app_ble_task.o(i.APP_GetHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = APP_GetHandler &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_MsgHandler
</UL>

<P><STRONG><a name="[ad]"></a>APP_GattcCmpEvtHandler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, app_gatt.o(i.APP_GattcCmpEvtHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GattcCmpEvtHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>APP_GattcMtuChangedIndHandler</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_gatt.o(i.APP_GattcMtuChangedIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GattcMtuChangedIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>APP_GattcSvcChangedCfgIndHandler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_gatt.o(i.APP_GattcSvcChangedCfgIndHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP_GattcSvcChangedCfgIndHandler &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gatt.o(.constdata)
</UL>
<P><STRONG><a name="[530]"></a>prf_itf_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, prf.o(i.prf_itf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_itf_get
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proxr_prf_itf_get
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_prf_itf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_create
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_add_profile
</UL>

<P><STRONG><a name="[b7]"></a>bass_cleanup</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bass.o(i.bass_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bass_cleanup &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>bass_create</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bass.o(i.bass_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bass_create &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>bass_destroy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bass.o(i.bass_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bass_destroy &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>bass_init</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, bass.o(i.bass_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = bass_init &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass.o(.constdata)
</UL>
<P><STRONG><a name="[385]"></a>bass_notify_batt_lvl</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bass.o(i.bass_notify_batt_lvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bass_notify_batt_lvl &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_handle
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>

<P><STRONG><a name="[b9]"></a>bass_batt_level_upd_req_handler</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bass_task.o(i.bass_batt_level_upd_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bass_batt_level_upd_req_handler &rArr; bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>bass_enable_req_handler</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, bass_task.o(i.bass_enable_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bass_enable_req_handler &rArr; bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bass_task.o(i.gattc_att_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattc_att_info_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bass_task.o(i.gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gattc_cmp_evt_handler &rArr; bass_exe_operation &rArr; bass_notify_batt_lvl &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_exe_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, bass_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattc_read_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_pack_char_pres_fmt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, bass_task.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gattc_write_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bass_get_att_idx
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bass_task.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>proxr_cleanup</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, proxr.o(i.proxr_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = proxr_cleanup &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_src_task_get
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>proxr_create</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, proxr.o(i.proxr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proxr_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>proxr_destroy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, proxr.o(i.proxr_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = proxr_destroy &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>proxr_init</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, proxr.o(i.proxr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = proxr_init &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, proxr_task.o(i.gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_cmp_evt_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr_task.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>gapm_dev_adv_tx_power_ind_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, proxr_task.o(i.gapm_dev_adv_tx_power_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapm_dev_adv_tx_power_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr_task.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, proxr_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattc_read_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr_task.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, proxr_task.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattc_write_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_env_get
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_dst_task_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proxr_task.o(.constdata)
</UL>
<P><STRONG><a name="[2ba]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, pin_mux.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[2f2]"></a>GPIO_ClearPinsOutput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.GPIO_ClearPinsOutput))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BlinkTimerHandler
</UL>

<P><STRONG><a name="[2f3]"></a>GPIO_SetPinsOutput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led.o(i.GPIO_SetPinsOutput))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_BlinkTimerHandler
</UL>

<P><STRONG><a name="[65]"></a>LED_BlinkTimerHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, led.o(i.LED_BlinkTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LED_BlinkTimerHandler &rArr; TM_UpdateInterval &rArr; TM_GetTimerEntryAddress &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UpdateInterval
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearTimer
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinsOutput
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPinsOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.LED_Blink)
</UL>
<P><STRONG><a name="[27c]"></a>APP_ProxrStopAlert</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.APP_ProxrStopAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = APP_ProxrStopAlert &rArr; LED_Blink &rArr; TM_SetTimer &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ProxrAlertCallback
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConnectionTerminatedCallback
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ConnectionEstablishedCallback
</UL>

<P><STRONG><a name="[528]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52a]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27a]"></a>APP_BleSoftwareWakeup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, qnble.o(i.APP_BleSoftwareWakeup), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>

<P><STRONG><a name="[34a]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbg_assert.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>

<P><STRONG><a name="[31d]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer_adapter.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StopTimer
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_Init
</UL>

<P><STRONG><a name="[324]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_manager.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UpdateInterval
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearTimer
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_AllocateTimer
</UL>

<P><STRONG><a name="[326]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_manager.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UpdateInterval
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearTimer
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_AllocateTimer
</UL>

<P><STRONG><a name="[69]"></a>TM_CompareTargetTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer_manager.o(i.TM_CompareTargetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM_CompareTargetTime
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timer_manager.o(i.TM_ExpiredTimerHandler)
<LI> timer_manager.o(i.TM_SetTimer)
</UL>
<P><STRONG><a name="[68]"></a>TM_CompareTimerId</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_manager.o(i.TM_CompareTimerId))
<BR>[Address Reference Count : 2]<UL><LI> timer_manager.o(i.TM_SetTimer)
<LI> timer_manager.o(i.TM_ClearTimer)
</UL>
<P><STRONG><a name="[6a]"></a>TM_ExpiredTimerHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, timer_manager.o(i.TM_ExpiredTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = TM_ExpiredTimerHandler &rArr; TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_queue_insert
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimerStatus
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StopTimer
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TA_StartTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_manager.o(i.TM_Init)
</UL>
<P><STRONG><a name="[32a]"></a>TM_GetTimerEntryAddress</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer_manager.o(i.TM_GetTimerEntryAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = TM_GetTimerEntryAddress &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_UpdateInterval
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
</UL>

<P><STRONG><a name="[325]"></a>TM_SetTimerStatus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer_manager.o(i.TM_SetTimerStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = TM_SetTimerStatus &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_SetTimer
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_AllocateTimer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ExpiredTimerHandler
</UL>

<P><STRONG><a name="[2fa]"></a>DisableGlobalIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, power_manager.o(i.DisableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetReq
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_ClrReq
</UL>

<P><STRONG><a name="[2fb]"></a>EnableGlobalIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, power_manager.o(i.EnableGlobalIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetReq
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_ClrReq
</UL>

<P><STRONG><a name="[304]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, power_manager.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTAL_READY_IRQHandler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[306]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, power_manager.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTAL_READY_IRQHandler
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[305]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, power_manager.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_SetPowerDownMode
</UL>

<P><STRONG><a name="[2f9]"></a>PM_ClrReq</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, power_manager.o(i.PM_ClrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PM_ClrReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
</UL>

<P><STRONG><a name="[303]"></a>PM_SetPowerDownMode</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, power_manager.o(i.PM_SetPowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = PM_SetPowerDownMode &rArr; BOARD_WakeupRestore &rArr; accel_spi_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_WritePmuCtrl1
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_RestoreSwd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_RestoreIO
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_LatchIO
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterSleep
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnterPowerDown
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnableSwdWakeup
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ble_sleep
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_TimerCfg
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_WakeupRestore
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveBleReg
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RestoreBleReg
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
</UL>

<P><STRONG><a name="[300]"></a>PM_SetReq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, power_manager.o(i.PM_SetReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PM_SetReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGlobalIRQ
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableGlobalIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_PowerManagement
</UL>

<P><STRONG><a name="[2e5]"></a>APP_BleIsActive</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eif_adapter.o(i.APP_BleIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_RxCallback
</UL>

<P><STRONG><a name="[27b]"></a>APP_BleSoftwareWakeup</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eif_adapter.o(i.APP_BleSoftwareWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP_BleSoftwareWakeup &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIF_RxCallback
</UL>

<P><STRONG><a name="[63]"></a>EIF_RxCallback</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, eif_adapter.o(i.EIF_RxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EIF_RxCallback &rArr; APP_BleSoftwareWakeup &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleSoftwareWakeup
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleIsActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eif_adapter.o(i.EIF_Read)
</UL>
<P><STRONG><a name="[64]"></a>EIF_TxCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, eif_adapter.o(i.EIF_TxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EIF_TxCallback &rArr; assert_err &rArr;  assert_err (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eif_adapter.o(i.EIF_Write)
</UL>
<P><STRONG><a name="[2db]"></a>DbgConsole_ConvertFloatRadixNumToString</STRONG> (Thumb, 570 bytes, Stack size 144 bytes, fsl_debug_console.o(i.DbgConsole_ConvertFloatRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[2e1]"></a>DbgConsole_ConvertRadixNumToString</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, fsl_debug_console.o(i.DbgConsole_ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DbgConsole_ConvertRadixNumToString &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[2e2]"></a>DbgConsole_PrintfFormattedData</STRONG> (Thumb, 1496 bytes, Stack size 152 bytes, fsl_debug_console.o(i.DbgConsole_PrintfFormattedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = DbgConsole_PrintfFormattedData &rArr; DbgConsole_ConvertFloatRadixNumToString &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfPaddingCharacter
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertRadixNumToString
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_ConvertFloatRadixNumToString
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[2e3]"></a>DbgConsole_PrintfPaddingCharacter</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, fsl_debug_console.o(i.DbgConsole_PrintfPaddingCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DbgConsole_PrintfPaddingCharacter
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintfFormattedData
</UL>

<P><STRONG><a name="[33b]"></a>accelPowerInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, accel_spi.o(i.accelPowerInit))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accelInit
</UL>

<P><STRONG><a name="[33e]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, spi_for_accel.o(i.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_spi_init
</UL>

<P><STRONG><a name="[6c]"></a>ahi_ke_msg_tx_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ahi_task.o(i.ahi_ke_msg_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ahi_ke_msg_tx_done &rArr; ke_msg_free &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ahi_task.o(i.ahi_msg_send_handler)
</UL>
<P><STRONG><a name="[d2]"></a>ahi_msg_send_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ahi_task.o(i.ahi_msg_send_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ahi_msg_send_handler &rArr; ahi_send_msg &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_id_from_task
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ahi_send_msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ahi_task.o(.constdata)
</UL>
<P><STRONG><a name="[3ad]"></a>gapc_cleanup</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, gapc.o(i.gapc_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapc_cleanup &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_clear_timeout_timer
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_con_cleanup
</UL>

<P><STRONG><a name="[dd]"></a>gapc_bond_cfm_handler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_bond_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = gapc_bond_cfm_handler &rArr; smpc_pairing_nc_exch &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_tk_exch
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_rsp
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_oob_exch
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_nc_exch
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_ltk_exch
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_irk_exch
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_csrk_exch
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>gapc_bond_cmd_handler</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gapc_task.o(i.gapc_bond_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gapc_bond_cmd_handler &rArr; smpc_pairing_start &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_req_handler
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>gapc_connection_cfm_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_connection_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gapc_connection_cfm_handler &rArr; gapm_con_enable &rArr; gattc_con_enable &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_enable
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_auth_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>gapc_disconnect_cmd_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_disconnect_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapc_disconnect_cmd_handler &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>gapc_encrypt_cfm_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_encrypt_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapc_encrypt_cfm_handler &rArr; smpc_encrypt_cfm &rArr; smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_cfm
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>gapc_encrypt_cmd_handler</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gapc_task.o(i.gapc_encrypt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gapc_encrypt_cmd_handler &rArr; smpc_encrypt_start &rArr; smpc_send_start_enc_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start_handler
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_encrypt_start
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>gapc_gen_dh_key_ind_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_gen_dh_key_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gapc_gen_dh_key_ind_handler &rArr; smpc_handle_dh_key_check_complete &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_dh_key_check_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>gapc_get_dev_info_cfm_handler</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_get_dev_info_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapc_get_dev_info_cfm_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>gapc_get_info_cmd_handler</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, gapc_task.o(i.gapc_get_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gapc_get_info_cmd_handler &rArr; gapc_process_op &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>gapc_key_press_notification_cmd_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_key_press_notification_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapc_key_press_notification_cmd_handler &rArr; gapc_process_op &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>gapc_param_update_cfm_handler</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_param_update_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapc_param_update_cfm_handler &rArr; gapc_sig_send_param_resp &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_send_param_resp
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>gapc_param_update_cmd_handler</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, gapc_task.o(i.gapc_param_update_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gapc_param_update_cmd_handler &rArr; gapc_process_op &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_sanity
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>gapc_security_cmd_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_security_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gapc_security_cmd_handler &rArr; smpc_security_req_send &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_security_req_send
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>gapc_set_dev_info_cfm_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_dev_info_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapc_set_dev_info_cfm_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>gapc_set_le_ping_to_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_le_ping_to_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapc_set_le_ping_to_handler &rArr; gapc_process_op &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>gapc_set_le_pkt_size_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_set_le_pkt_size_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapc_set_le_pkt_size_handler &rArr; gapc_process_op &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>gapc_set_phy_cmd_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_set_phy_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapc_set_phy_cmd_handler &rArr; gapc_process_op &rArr; gapc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>gapc_sign_cmd_handler</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, gapc_task.o(i.gapc_sign_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gapc_sign_cmd_handler &rArr; smpc_sign_command &rArr; smpc_generate_ci &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_command
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_process_op
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>gapc_smp_rep_attempts_timer_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gapc_task.o(i.gapc_smp_rep_attempts_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_smp_rep_attempts_timer_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>gapc_smp_timeout_timer_ind_handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gapc_task.o(i.gapc_smp_timeout_timer_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapc_smp_timeout_timer_ind_handler &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>gapc_update_conn_param_to_ind_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapc_task.o(i.gapc_update_conn_param_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapc_update_conn_param_to_ind_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gapc_task.o(i.gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapm_cmp_evt_handler &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>gapm_gen_rand_nb_ind_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gapc_task.o(i.gapm_gen_rand_nb_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gapm_gen_rand_nb_ind_handler &rArr; smpc_confirm_gen_rand &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_confirm_gen_rand
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>gapm_use_enc_block_ind_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gapc_task.o(i.gapm_use_enc_block_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = gapm_use_enc_block_ind_handler &rArr; smpc_calc_confirm_cont &rArr; smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_sign_cont
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_calc_confirm_cont
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gapc_task.o(i.gattc_att_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattc_att_info_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gapc_task.o(i.gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattc_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>gattc_read_ind_handler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, gapc_task.o(i.gattc_read_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattc_read_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, gapc_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattc_read_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_pref_con_param_pres
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, gapc_task.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattc_write_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>l2cc_cmp_evt_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gapc_task.o(i.l2cc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2cc_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, gapc_task.o(i.l2cc_pdu_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = l2cc_pdu_recv_ind_handler &rArr; smpc_pdu_recv &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_recv
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_sig_pdu_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_task.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gapm_task.o(i.gapc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapc_cmp_evt_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>gapc_peer_att_info_ind_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, gapm_task.o(i.gapc_peer_att_info_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gapc_peer_att_info_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_bdaddr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>gapm_addr_renew_to_ind_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gapm_task.o(i.gapm_addr_renew_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_addr_renew_to_ind_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>gapm_cancel_cmd_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_cancel_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_cancel_cmd_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gapm_task.o(i.gapm_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_cmp_evt_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>gapm_connection_cfm_handler</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_connection_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_connection_cfm_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>gapm_default_msg_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gapm_task.o(i.gapm_default_msg_handler))
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>gapm_gen_dh_key_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_gen_dh_key_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_gen_dh_key_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_send_generate_dh_key
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>gapm_gen_rand_addr_cmd_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_gen_rand_addr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_gen_rand_addr_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_gen_rand_addr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>gapm_get_dev_info_cmd_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gapm_task.o(i.gapm_get_dev_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapm_get_dev_info_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_basic_hci_cmd_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>gapm_lepsm_register_cmd_handler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_lepsm_register_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_lepsm_register_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_le_psm_find
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_task_from_id
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>gapm_lepsm_unregister_cmd_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_lepsm_unregister_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_lepsm_unregister_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_le_psm_find
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>gapm_lim_disc_to_ind_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gapm_task.o(i.gapm_lim_disc_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_lim_disc_to_ind_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[3de]"></a>gapm_process_op</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_state
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_white_list_mgt_cmd_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_use_enc_block_cmd_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_advertise_data_cmd_handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_scan_cmd_handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_connection_cmd_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_start_advertise_cmd_handler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_irk_cmd_handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_dev_config_cmd_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_channel_map_cmd_handler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_resolv_addr_cmd_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_ral_mgt_cmd_handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_profile_task_add_cmd_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_unregister_cmd_handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lepsm_register_cmd_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_dev_info_cmd_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_rand_addr_cmd_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_gen_dh_key_cmd_handler
</UL>

<P><STRONG><a name="[109]"></a>gapm_profile_task_add_cmd_handler</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, gapm_task.o(i.gapm_profile_task_add_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gapm_profile_task_add_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_task_from_id
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_id_from_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>gapm_ral_mgt_cmd_handler</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_ral_mgt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_ral_mgt_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_basic_hci_cmd_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>gapm_reset_cmd_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_reset_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = gapm_reset_cmd_handler &rArr; rwble_hl_reset &rArr; l2cm_init &rArr; l2cc_init &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwble_hl_reset
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>gapm_resolv_addr_cmd_handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_resolv_addr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_resolv_addr_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_resolv_addr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>gapm_scan_to_ind_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gapm_task.o(i.gapm_scan_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_scan_to_ind_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>gapm_set_channel_map_cmd_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_set_channel_map_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_set_channel_map_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_role
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>gapm_set_dev_config_cmd_handler</STRONG> (Thumb, 524 bytes, Stack size 96 bytes, gapm_task.o(i.gapm_set_dev_config_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = gapm_set_dev_config_cmd_handler &rArr; gattm_init_attr &rArr; attm_svc_create_db &rArr; attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_init_attr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_max_mtu
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_max_mps
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_le_psm_cleanup
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_init_attr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_dle_val_check
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_addr_check
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_update_perm
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_att_handle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>gapm_set_irk_cmd_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_set_irk_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_set_irk_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>gapm_start_advertise_cmd_handler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_start_advertise_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapm_start_advertise_cmd_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_op_sanity
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>gapm_start_connection_cmd_handler</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_start_connection_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapm_start_connection_cmd_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_connect_op
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_connect_op_sanity
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>gapm_start_scan_cmd_handler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_start_scan_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapm_start_scan_cmd_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_scan_op_sanity
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_scan_op
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>gapm_unknown_task_msg_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_unknown_task_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapm_unknown_task_msg_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>gapm_update_advertise_data_cmd_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapm_task.o(i.gapm_update_advertise_data_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapm_update_advertise_data_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_adv_data
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>gapm_use_enc_block_cmd_handler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_use_enc_block_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_use_enc_block_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_use_enc_block
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_gen_rand_nb
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>gapm_white_list_mgt_cmd_handler</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, gapm_task.o(i.gapm_white_list_mgt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_white_list_mgt_cmd_handler &rArr; gapm_process_op &rArr; gapm_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_basic_hci_cmd_send
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_process_op
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_task.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gattc_task.o(i.gapc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gapc_cmp_evt_handler &rArr; atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>gapc_sign_ind_handler</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, gattc_task.o(i.gapc_sign_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gapc_sign_ind_handler &rArr; atts_write_signed_cfm &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attm_svc_get_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>gattc_att_info_cfm_handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_att_info_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gattc_att_info_cfm_handler &rArr; atts_send_error &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>gattc_att_info_req_ind_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_att_info_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattc_att_info_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_start_hdl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>gattc_cmp_evt_handler</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, gattc_task.o(i.gattc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gattc_cmp_evt_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_check_malloc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>gattc_default_msg_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gattc_task.o(i.gattc_default_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gattc_default_msg_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>gattc_disc_char_desc_ind_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_char_desc_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_char_desc_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>gattc_disc_char_ind_handler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_char_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_char_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>gattc_disc_cmd_handler</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, gattc_task.o(i.gattc_disc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gattc_disc_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>gattc_disc_svc_incl_ind_handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_svc_incl_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_svc_incl_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>gattc_disc_svc_ind_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattc_task.o(i.gattc_disc_svc_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gattc_disc_svc_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>gattc_event_cfm_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gattc_task.o(i.gattc_event_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gattc_event_cfm_handler &rArr; attc_send_hdl_cfm &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_hdl_cfm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>gattc_exc_mtu_cmd_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_exc_mtu_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gattc_exc_mtu_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>gattc_execute_write_cmd_handler</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_execute_write_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gattc_execute_write_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[407]"></a>gattc_process_op</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, gattc_task.o(i.gattc_process_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_operation_ptr
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_src_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_evt_cmd_handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_sdp_svc_disc_cmd_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reg_to_peer_evt_cmd_handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_read_cmd_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_execute_write_cmd_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_exc_mtu_cmd_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_disc_cmd_handler
</UL>

<P><STRONG><a name="[11f]"></a>gattc_read_cfm_handler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_read_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gattc_read_cfm_handler &rArr; ke_msg_forward &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>gattc_read_cmd_handler</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, gattc_task.o(i.gattc_read_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gattc_read_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_convert_to128
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>gattc_read_req_ind_handler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_read_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattc_read_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_start_hdl
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_svc_chg_ccc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>gattc_reg_to_peer_evt_cmd_handler</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, gattc_task.o(i.gattc_reg_to_peer_evt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gattc_reg_to_peer_evt_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>gattc_sdp_svc_disc_cmd_handler</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, gattc_task.o(i.gattc_sdp_svc_disc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = gattc_sdp_svc_disc_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>gattc_send_evt_cmd_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_send_evt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gattc_send_evt_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>gattc_send_svc_changed_cmd_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gattc_task.o(i.gattc_send_svc_changed_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattc_send_svc_changed_cmd_handler &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattm_svc_get_start_hdl
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_error_evt
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_svc_chg_en
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_svc_chg_ccc_get
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>gattc_timeout_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gattc_timeout_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_disc_connection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>gattc_write_cfm_handler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_write_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gattc_write_cfm_handler &rArr; atts_write_rsp_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_error
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_rsp_data
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_read_cache
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_clear_prep_data
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>gattc_write_cmd_handler</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, gattc_task.o(i.gattc_write_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = gattc_write_cmd_handler &rArr; gattc_process_op &rArr; gattc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_execute
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_att_req
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_process_op
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_lk_sec_lvl_get
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_is_sec_set
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>gattc_write_req_ind_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gattc_task.o(i.gattc_write_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gattc_write_req_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_svc_chg_ccc_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>l2cc_cmp_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gattc_task.o(i.l2cc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_cmp_evt_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gattc_task.o(i.l2cc_pdu_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = l2cc_pdu_recv_ind_handler &rArr; atts_l2cc_pdu_recv_handler &rArr; atts_clear_rsp_data &rArr; gattc_update_state &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_l2cc_pdu_recv_handler
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_l2cc_pdu_recv_handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattc_task.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>gattm_add_svc_req_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gattm_task.o(i.gattm_add_svc_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = gattm_add_svc_req_handler &rArr; attmdb_add_service &rArr; attm_is_bt32_uuid &rArr; attm_uuid_comp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_task_from_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>gattm_att_get_info_req_handler</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, gattm_task.o(i.gattm_att_get_info_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattm_att_get_info_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>gattm_att_get_permission_req_handler</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, gattm_task.o(i.gattm_att_get_permission_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gattm_att_get_permission_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>gattm_att_get_value_req_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, gattm_task.o(i.gattm_att_get_value_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gattm_att_get_value_req_handler &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>gattm_att_set_permission_req_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gattm_task.o(i.gattm_att_set_permission_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattm_att_set_permission_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_permission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>gattm_att_set_value_req_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gattm_task.o(i.gattm_att_set_value_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattm_att_set_value_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_att_set_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>gattm_default_msg_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gattm_task.o(i.gattm_default_msg_handler))
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>gattm_destroy_db_req_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gattm_task.o(i.gattm_destroy_db_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattm_destroy_db_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_svc_start_hdl
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>gattm_svc_get_list_req_handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gattm_task.o(i.gattm_svc_get_list_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattm_svc_get_list_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_svc_info
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_nb_svc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>gattm_svc_get_permission_req_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gattm_task.o(i.gattm_svc_get_permission_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattm_svc_get_permission_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_get_permission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>gattm_svc_set_permission_req_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gattm_task.o(i.gattm_svc_set_permission_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gattm_svc_set_permission_req_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_set_permission
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gattm_task.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>hci_acl_data_rx_handler</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, l2cc_task.o(i.hci_acl_data_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hci_acl_data_rx_handler &rArr; l2cc_pdu_header_check &rArr; l2cc_lecb_init_disconnect &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_unpack
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_header_check
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_pdu_unpack
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_init_disconnect
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_dbg_pdu_unpack
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_buff_addr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>hci_nb_cmp_pkts_evt_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, l2cc_task.o(i.hci_nb_cmp_pkts_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_nb_cmp_pkts_evt_handler &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_get_nb_buffer_available
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>l2cc_dbg_pdu_send_cmd_handler</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, l2cc_task.o(i.l2cc_dbg_pdu_send_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_dbg_pdu_send_cmd_handler &rArr; l2cc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_error_evt
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>l2cc_lecb_add_cmd_handler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, l2cc_task.o(i.l2cc_lecb_add_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = l2cc_lecb_add_cmd_handler &rArr; l2cc_process_op &rArr; l2cc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_credit_add
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>l2cc_lecb_connect_cfm_handler</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, l2cc_task.o(i.l2cc_lecb_connect_cfm_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = l2cc_lecb_connect_cfm_handler &rArr; l2cc_lecb_send_con_rsp &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_rsp
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mps
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>l2cc_lecb_connect_cmd_handler</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, l2cc_task.o(i.l2cc_lecb_connect_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = l2cc_lecb_connect_cmd_handler &rArr; l2cc_lecb_send_con_req &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_req
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lecb_register
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mps
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>l2cc_lecb_disconnect_cmd_handler</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, l2cc_task.o(i.l2cc_lecb_disconnect_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = l2cc_lecb_disconnect_cmd_handler &rArr; l2cc_process_op &rArr; l2cc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_disc_req
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_process_op
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>l2cc_lecb_sdu_send_cmd_handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, l2cc_task.o(i.l2cc_lecb_sdu_send_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l2cc_lecb_sdu_send_cmd_handler &rArr; l2cc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_error_evt
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, l2cc_task.o(i.l2cc_pdu_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = l2cc_pdu_recv_ind_handler &rArr; l2cc_sig_pdu_recv_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_pdu_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>l2cc_pdu_send_cmd_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, l2cc_task.o(i.l2cc_pdu_send_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2cc_pdu_send_cmd_handler &rArr; l2cc_send_error_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_error_evt
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>l2cc_signaling_trans_to_ind_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, l2cc_task.o(i.l2cc_signaling_trans_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l2cc_signaling_trans_to_ind_handler &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_task.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>llc_auth_payl_nearly_to_ind_handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, llc_task.o(i.llc_auth_payl_nearly_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = llc_auth_payl_nearly_to_ind_handler &rArr; llc_llcp_ping_req_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ping_req_pdu_send
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>llc_auth_payl_real_to_ind_handler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, llc_task.o(i.llc_auth_payl_real_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llc_auth_payl_real_to_ind_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>llc_chmap_update_req_ind_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, llc_task.o(i.llc_chmap_update_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llc_chmap_update_req_ind_handler &rArr; llc_llcp_ch_map_update_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_get_current_ch_map
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>llc_chnl_assess_timer_handler</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, llc_task.o(i.llc_chnl_assess_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llc_chnl_assess_timer_handler &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_channel_map
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_reass_ch
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_merge_ch
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ch_assess_get_local_ch_map
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>llc_con_upd_req_ind_handler</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, llc_task.o(i.llc_con_upd_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = llc_con_upd_req_ind_handler &rArr; lld_con_update_req &rArr; lld_evt_update_create &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_req
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_after_param_req
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_req
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>llc_data_ind_handler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, llc_task.o(i.llc_data_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llc_data_ind_handler &rArr; llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_key_ref_comp_evt_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>llc_dft_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_task.o(i.llc_dft_handler))
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>llc_enc_mgt_ind_handler</STRONG> (Thumb, 686 bytes, Stack size 32 bytes, llc_task.o(i.llc_enc_mgt_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llc_enc_mgt_ind_handler &rArr; llc_ltk_req_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_ltk_req_send
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_req_pdu_send
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_rsp_pdu_send
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_rsp_pdu_send
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_req_pdu_send
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>llc_length_req_ind_handler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, llc_task.o(i.llc_length_req_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = llc_length_req_ind_handler &rArr; llc_llcp_length_req_pdu_send &rArr; llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_length_req_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>llc_link_sup_to_ind_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, llc_task.o(i.llc_link_sup_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = llc_link_sup_to_ind_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>llc_llcp_recv_ind_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, llc_task.o(i.llc_llcp_recv_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llc_llcp_recv_ind_handler &rArr; llc_llcp_recv_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>llc_llcp_rsp_to_ind_handler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, llc_task.o(i.llc_llcp_rsp_to_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llc_llcp_rsp_to_ind_handler &rArr; llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_version_rd_event_send
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_key_ref_comp_evt_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>lld_stop_ind_handler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, llc_task.o(i.lld_stop_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lld_stop_ind_handler &rArr; llc_discon_event_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_stop
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_discon_event_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>llm_enc_ind_handler</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, llc_task.o(i.llm_enc_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = llm_enc_ind_handler &rArr; ke_msg_send_basic &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_task.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>lld_stop_ind_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llm_task.o(i.lld_stop_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lld_stop_ind_handler &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>llm_dft_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llm_task.o(i.llm_dft_handler))
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>llm_ecc_result_ind_handler</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, llm_task.o(i.llm_ecc_result_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llm_ecc_result_ind_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>llm_enc_req_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llm_task.o(i.llm_enc_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = llm_enc_req_handler &rArr; llm_encryption_start &rArr; rwip_prevent_sleep_set
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>llm_le_enh_priv_addr_renew_timer_handler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llm_task.o(i.llm_le_enh_priv_addr_renew_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = llm_le_enh_priv_addr_renew_timer_handler &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_ral_force_rpa_renew
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_ral_renew_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>llm_le_set_host_ch_class_cmd_sto_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, llm_task.o(i.llm_le_set_host_ch_class_cmd_sto_handler))
<BR>[Address Reference Count : 1]<UL><LI> llm_task.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>hci_command_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dbg_task.o(i.hci_command_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hci_command_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>hci_dbg_del_par_cmd_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dbg_task.o(i.hci_dbg_del_par_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_dbg_del_par_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>hci_dbg_er_flash_cmd_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_er_flash_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_er_flash_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>hci_dbg_hw_reg_rd_cmd_handler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_hw_reg_rd_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_hw_reg_rd_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>hci_dbg_hw_reg_wr_cmd_handler</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_hw_reg_wr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_hw_reg_wr_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>hci_dbg_id_flash_cmd_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_id_flash_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_id_flash_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>hci_dbg_llcp_discard_cmd_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_llcp_discard_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_llcp_discard_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_set_llcp_discard_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>hci_dbg_plf_reset_cmd_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dbg_task.o(i.hci_dbg_plf_reset_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_dbg_plf_reset_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>hci_dbg_rd_flash_cmd_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_rd_flash_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_rd_flash_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>hci_dbg_rd_ke_stats_cmd_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_rd_ke_stats_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_rd_ke_stats_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>hci_dbg_rd_mem_cmd_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_rd_mem_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_rd_mem_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>hci_dbg_rd_mem_info_cmd_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_rd_mem_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_rd_mem_info_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>hci_dbg_rd_par_cmd_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dbg_task.o(i.hci_dbg_rd_par_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_dbg_rd_par_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>hci_dbg_reset_rx_cnt_cmd_handler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_reset_rx_cnt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_reset_rx_cnt_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>hci_dbg_reset_tx_cnt_cmd_handler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_reset_tx_cnt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_reset_tx_cnt_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>hci_dbg_rf_reg_rd_cmd_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dbg_task.o(i.hci_dbg_rf_reg_rd_cmd_handler))
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>hci_dbg_rf_reg_wr_cmd_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dbg_task.o(i.hci_dbg_rf_reg_wr_cmd_handler))
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>hci_dbg_set_bd_addr_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_set_bd_addr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_set_bd_addr_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_set_public_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>hci_dbg_set_crc_cmd_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dbg_task.o(i.hci_dbg_set_crc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_dbg_set_crc_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>hci_dbg_set_tx_pw_cmd_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, dbg_task.o(i.hci_dbg_set_tx_pw_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_dbg_set_tx_pw_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>hci_dbg_wlan_coex_cmd_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dbg_task.o(i.hci_dbg_wlan_coex_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_dbg_wlan_coex_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wlcoex_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>hci_dbg_wr_dle_dft_value_cmd_handler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_wr_dle_dft_value_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_wr_dle_dft_value_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>hci_dbg_wr_flash_cmd_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_wr_flash_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_wr_flash_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>hci_dbg_wr_mem_cmd_handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dbg_task.o(i.hci_dbg_wr_mem_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_dbg_wr_mem_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>hci_dbg_wr_par_cmd_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dbg_task.o(i.hci_dbg_wr_par_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_dbg_wr_par_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>hci_user_ext_func_cmd_handler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dbg_task.o(i.hci_user_ext_func_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_user_ext_func_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dbg_task.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>cmp_dest_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ke_task.o(i.cmp_dest_id))
<BR>[Address Reference Count : 1]<UL><LI> ke_task.o(i.ke_state_set)
</UL>
<P><STRONG><a name="[79]"></a>ke_task_schedule</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, ke_task.o(i.ke_task_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ke_task_schedule &rArr; ke_msg_free &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_is_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ke_task.o(i.ke_task_init)
</UL>
<P><STRONG><a name="[7c]"></a>cmp_abs_time</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ke_timer.o(i.cmp_abs_time))
<BR>[Address Reference Count : 1]<UL><LI> ke_timer.o(i.ke_timer_set)
</UL>
<P><STRONG><a name="[7a]"></a>cmp_timer_id</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ke_timer.o(i.cmp_timer_id))
<BR>[Address Reference Count : 2]<UL><LI> ke_timer.o(i.ke_timer_clear)
<LI> ke_timer.o(i.ke_timer_set)
</UL>
<P><STRONG><a name="[7b]"></a>ke_timer_schedule</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ke_timer.o(i.ke_timer_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ke_timer_schedule &rArr; ke_msg_send_basic &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_time_get_halfslot_rounded
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ke_timer.o(i.ke_timer_init)
</UL>
<P><STRONG><a name="[174]"></a>nvds_erase</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nvds.o(i.nvds_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nvds_erase &rArr; flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>nvds_null_erase</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nvds.o(i.nvds_null_erase))
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>nvds_null_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nvds.o(i.nvds_null_read))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>nvds_null_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nvds.o(i.nvds_null_write))
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[52f]"></a>nvds_purge</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, nvds.o(i.nvds_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvds_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_put
</UL>

<P><STRONG><a name="[172]"></a>nvds_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nvds.o(i.nvds_read))
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>nvds_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nvds.o(i.nvds_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvds_write &rArr; flash_write
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvds.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>ahi_tx_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ahi.o(i.ahi_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ahi_tx_done &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ahi.o(i.ahi_send_msg)
<LI> ahi.o(i.ahi_tx_done_evt_handler)
</UL>
<P><STRONG><a name="[6b]"></a>ahi_tx_done_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ahi.o(i.ahi_tx_done_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ahi_tx_done_evt_handler &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_write
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ahi.o(i.ahi_init)
</UL>
<P><STRONG><a name="[18b]"></a>hci_auth_payl_to_exp_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gapc_hci.o(i.hci_auth_payl_to_exp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_auth_payl_to_exp_evt_handler &rArr; ke_msg_send_basic &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>hci_cmd_stat_event_handler</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_cmd_stat_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_cmd_stat_event_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>hci_disc_cmp_evt_handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_disc_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hci_disc_cmp_evt_handler &rArr; gapm_con_cleanup &rArr; l2cm_cleanup &rArr; l2cc_cleanup &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_error_evt
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_con_cleanup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>hci_enc_chg_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_enc_chg_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hci_enc_chg_evt_handler &rArr; smpc_handle_enc_change_evt &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>hci_enc_key_refr_evt_handler</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_enc_key_refr_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hci_enc_key_refr_evt_handler &rArr; smpc_handle_enc_change_evt &rArr; smpc_tkdp_send_continue &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_handle_enc_change_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>hci_le_con_update_cmp_evt_handler</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_con_update_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_con_update_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_reschedule_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>hci_le_data_len_chg_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_data_len_chg_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_data_len_chg_evt_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>hci_le_ltk_request_evt_handler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_ltk_request_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_ltk_request_evt_handler &rArr; smpc_send_ltk_req_rsp &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_ltk_req_rsp
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_stk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>hci_le_rd_rem_used_feats_cmp_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_rd_rem_used_feats_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_rd_rem_used_feats_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>hci_le_rem_con_param_req_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_rem_con_param_req_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hci_le_rem_con_param_req_evt_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>hci_le_set_data_len_cmd_cmp_evt_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_set_data_len_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_set_data_len_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>hci_le_start_enc_stat_evt_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_le_start_enc_stat_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_start_enc_stat_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>hci_rd_auth_payl_to_cmd_cmp_evt_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_rd_auth_payl_to_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_rd_auth_payl_to_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>hci_rd_chnl_map_cmd_cmp_evt_handler</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, gapc_hci.o(i.hci_rd_chnl_map_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_rd_chnl_map_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>hci_rd_rem_ver_info_cmp_evt_handler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_rd_rem_ver_info_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_rd_rem_ver_info_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>hci_rd_rssi_cmd_cmp_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_rd_rssi_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_rd_rssi_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_requester
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>hci_wr_auth_payl_to_cmd_cmp_evt_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gapc_hci.o(i.hci_wr_auth_payl_to_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_wr_auth_payl_to_cmd_cmp_evt_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>l2c_code_conn_param_upd_req_handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gapc_sig.o(i.l2c_code_conn_param_upd_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2c_code_conn_param_upd_req_handler &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_param_update_sanity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_sig.o(i.gapc_sig_pdu_recv_handler)
</UL>
<P><STRONG><a name="[71]"></a>l2c_code_conn_param_upd_resp_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapc_sig.o(i.l2c_code_conn_param_upd_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l2c_code_conn_param_upd_resp_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_sig.o(i.gapc_sig_pdu_recv_handler)
</UL>
<P><STRONG><a name="[6f]"></a>l2c_code_reject_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gapc_sig.o(i.l2c_code_reject_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l2c_code_reject_handler &rArr; gapc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_complete_evt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation_ptr
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapc_sig.o(i.gapc_sig_pdu_recv_handler)
</UL>
<P><STRONG><a name="[19b]"></a>hci_basic_cmd_cmp_evt_addr_set_handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gapm_hci.o(i.hci_basic_cmd_cmp_evt_addr_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_basic_cmd_cmp_evt_addr_set_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>hci_basic_cmd_cmp_evt_adv_handler</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, gapm_hci.o(i.hci_basic_cmd_cmp_evt_adv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_basic_cmd_cmp_evt_adv_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_error_evt
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>hci_basic_cmd_cmp_evt_cfg_handler</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, gapm_hci.o(i.hci_basic_cmd_cmp_evt_cfg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_basic_cmd_cmp_evt_cfg_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>hci_basic_cmd_cmp_evt_connect_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_basic_cmd_cmp_evt_connect_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_basic_cmd_cmp_evt_connect_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>hci_basic_cmd_cmp_evt_rl_handler</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_basic_cmd_cmp_evt_rl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_basic_cmd_cmp_evt_rl_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reschedule_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>hci_basic_cmd_cmp_evt_scan_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_basic_cmd_cmp_evt_scan_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_basic_cmd_cmp_evt_scan_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>hci_basic_cmd_cmp_evt_wl_handler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_basic_cmd_cmp_evt_wl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_basic_cmd_cmp_evt_wl_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reschedule_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>hci_le_adv_report_evt_handler</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, gapm_hci.o(i.hci_le_adv_report_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_adv_report_evt_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_filtered
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_adv_mode
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_ad_type_flag
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_add_to_filter
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>hci_le_con_cmp_evt_handler</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, gapm_hci.o(i.hci_le_con_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hci_le_con_cmp_evt_handler &rArr; gapm_setup_conn &rArr; gapm_con_create &rArr; gapc_con_create &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_setup_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>hci_le_dir_adv_report_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gapm_hci.o(i.hci_le_dir_adv_report_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hci_le_dir_adv_report_evt_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_adv_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>hci_le_enc_cmd_cmp_evt_handler</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, gapm_hci.o(i.hci_le_enc_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_le_enc_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_reschedule_operation
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>hci_le_enh_con_cmp_evt_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_enh_con_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hci_le_enh_con_cmp_evt_handler &rArr; gapm_setup_conn &rArr; gapm_con_create &rArr; gapc_con_create &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_setup_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>hci_le_generate_dhkey_cmp_evt_handler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_generate_dhkey_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_generate_dhkey_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>hci_le_rand_cmd_cmp_evt_handler</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, gapm_hci.o(i.hci_le_rand_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_le_rand_cmd_cmp_evt_handler &rArr; gapm_update_air_op_state &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpm_send_encrypt_req
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_irk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_rd_adv_chnl_tx_pw_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>hci_le_rd_buff_size_cmd_cmp_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gapm_hci.o(i.hci_le_rd_buff_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_le_rd_buff_size_cmd_cmp_evt_handler &rArr; gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_set_link_layer_buff_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>hci_le_rd_local_p256_public_key_cmp_evt_handler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_rd_local_p256_public_key_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_local_p256_public_key_cmp_evt_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>hci_le_rd_max_data_len_cmd_cmp_evt_handler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_rd_max_data_len_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_rd_max_data_len_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>hci_le_rd_ral_addr_cmd_cmp_evt_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_rd_ral_addr_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_rd_ral_addr_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>hci_le_rd_ral_size_cmd_cmp_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_rd_ral_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_rd_ral_size_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_rd_suggted_dft_data_len_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>hci_le_rd_wlst_size_cmd_cmp_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_le_rd_wlst_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_le_rd_wlst_size_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>hci_no_operation_cmd_cmp_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gapm_hci.o(i.hci_no_operation_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_no_operation_cmd_cmp_evt_handler &rArr; ke_msg_send_basic &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>hci_rd_bd_addr_cmd_cmp_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gapm_hci.o(i.hci_rd_bd_addr_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_rd_bd_addr_cmd_cmp_evt_handler &rArr; gapm_op_setup_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_setup_continue
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>hci_rd_buff_size_cmd_cmp_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gapm_hci.o(i.hci_rd_buff_size_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_rd_buff_size_cmd_cmp_evt_handler &rArr; gapm_op_reset_continue &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_op_reset_continue
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_set_link_layer_buff_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>hci_rd_local_ver_info_cmd_cmp_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gapm_hci.o(i.hci_rd_local_ver_info_cmd_cmp_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_rd_local_ver_info_cmd_cmp_evt_handler &rArr; gapm_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_send_complete_evt
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_requester
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[3db]"></a>gapm_set_address_op</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, gapm_util.o(i.gapm_set_address_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gapm_set_address_op &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_scan_op
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_connect_op
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_execute_adv_op
</UL>

<P><STRONG><a name="[3fe]"></a>gapm_update_address_op_state</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gapm_util.o(i.gapm_update_address_op_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_update_address_op_state
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_address_type
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_update_air_op_state
</UL>

<P><STRONG><a name="[1b2]"></a>attc_err_rsp_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, attc.o(i.attc_err_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attc_err_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>attc_exc_mtu_rsp_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, attc.o(i.attc_exc_mtu_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = attc_exc_mtu_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>attc_exe_wr_rsp_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, attc.o(i.attc_exe_wr_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attc_exe_wr_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>attc_find_by_type_rsp_handler</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, attc.o(i.attc_find_by_type_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = attc_find_by_type_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>attc_find_info_rsp_handler</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, attc.o(i.attc_find_info_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = attc_find_info_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>attc_hdl_val_ntf_ind_handler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, attc.o(i.attc_hdl_val_ntf_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = attc_hdl_val_ntf_ind_handler &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>attc_prep_wr_rsp_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, attc.o(i.attc_prep_wr_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = attc_prep_wr_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>attc_rd_by_grp_type_rsp_handler</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, attc.o(i.attc_rd_by_grp_type_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = attc_rd_by_grp_type_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>attc_rd_by_type_rsp_handler</STRONG> (Thumb, 742 bytes, Stack size 48 bytes, attc.o(i.attc_rd_by_type_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = attc_rd_by_type_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>attc_rd_mult_rsp_handler</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, attc.o(i.attc_rd_mult_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = attc_rd_mult_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_requester
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>attc_rd_rsp_handler</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, attc.o(i.attc_rd_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = attc_rd_rsp_handler &rArr; attc_send_read_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_reschedule_operation
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attc_send_read_ind
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation_ptr
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>attc_wr_rsp_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, attc.o(i.attc_wr_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = attc_wr_rsp_handler &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attc.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>atts_execute_write_req</STRONG> (Thumb, 554 bytes, Stack size 104 bytes, atts.o(i.atts_execute_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = atts_execute_write_req &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_max_len
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>atts_find_by_type_req</STRONG> (Thumb, 452 bytes, Stack size 88 bytes, atts.o(i.atts_find_by_type_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = atts_find_by_type_req &rArr; atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>atts_find_info_req</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, atts.o(i.atts_find_info_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = atts_find_info_req &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_next_att
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>atts_find_value_by_uuid</STRONG> (Thumb, 266 bytes, Stack size 96 bytes, atts.o(i.atts_find_value_by_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_next_att
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_uuid16_comp
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_uuid
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_attribute
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_uuid_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_req
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_req
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_req
</UL>

<P><STRONG><a name="[378]"></a>atts_get_att_chk_perm</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, atts.o(i.atts_get_att_chk_perm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attm_svc_get_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_permission
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_lk_sec_lvl_get
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_is_sec_set
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_req
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_signed_cfm
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_event
</UL>

<P><STRONG><a name="[379]"></a>atts_get_value</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, atts.o(i.atts_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_get_value
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_req
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_req
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_req
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
</UL>

<P><STRONG><a name="[1c1]"></a>atts_hdl_value_cfm</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, atts.o(i.atts_hdl_value_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = atts_hdl_value_cfm &rArr; gattc_send_complete_evt &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_operation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>atts_mtu_exc_req</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, atts.o(i.atts_mtu_exc_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atts_mtu_exc_req &rArr; gattc_set_mtu &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_set_mtu
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_max_mtu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>atts_prepare_write_req</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, atts.o(i.atts_prepare_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = atts_prepare_write_req &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_update_state
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_insert_before
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>atts_read_blob_req</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, atts.o(i.atts_read_blob_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = atts_read_blob_req &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>atts_read_by_grp_type_req</STRONG> (Thumb, 510 bytes, Stack size 96 bytes, atts.o(i.atts_read_by_grp_type_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = atts_read_by_grp_type_req &rArr; atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>atts_read_by_type_req</STRONG> (Thumb, 492 bytes, Stack size 96 bytes, atts.o(i.atts_read_by_type_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = atts_read_by_type_req &rArr; atts_find_value_by_uuid &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_value_by_uuid
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>atts_read_mult_req</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, atts.o(i.atts_read_mult_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atts_read_mult_req &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_size
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>atts_read_req</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, atts.o(i.atts_read_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = atts_read_req &rArr; atts_get_value &rArr; attm_get_value &rArr; attmdb_get_uuid &rArr; attm_convert_to128
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_value
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_get_mtu
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>atts_write_cmd</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, atts.o(i.atts_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atts_write_cmd &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attm_svc_get_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_max_len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>atts_write_req</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, atts.o(i.atts_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atts_write_req &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_max_len
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_service
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_send
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_alloc
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>atts_write_signed</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, atts.o(i.atts_write_signed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = atts_write_signed &rArr; atts_get_att_chk_perm &rArr; attmdb_att_get_permission &rArr; attm_svc_get_permission
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_get_att_chk_perm
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_get_max_len
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atts.o(.constdata)
</UL>
<P><STRONG><a name="[409]"></a>gattc_operation_cleanup</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, gattc.o(i.gattc_operation_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gattc_operation_cleanup &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_in_queue
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_send_complete_evt
</UL>

<P><STRONG><a name="[1c3]"></a>l2c_code_conn_param_upd_req_handler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, l2cc_sig.o(i.l2c_code_conn_param_upd_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = l2c_code_conn_param_upd_req_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>l2c_code_conn_param_upd_resp_handler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, l2cc_sig.o(i.l2c_code_conn_param_upd_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = l2c_code_conn_param_upd_resp_handler &rArr; l2cc_sig_send_cmd_reject &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_sig_send_cmd_reject
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>l2c_code_disconnection_req_handler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, l2cc_sig.o(i.l2c_code_disconnection_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l2c_code_disconnection_req_handler &rArr; l2cc_lecb_send_disc_rsp &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_disc_rsp
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>l2c_code_disconnection_resp_handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, l2cc_sig.o(i.l2c_code_disconnection_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = l2c_code_disconnection_resp_handler &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_get_operation_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>l2c_code_le_cb_conn_req_handler</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, l2cc_sig.o(i.l2c_code_le_cb_conn_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = l2c_code_le_cb_conn_req_handler &rArr; l2cc_lecb_send_con_rsp &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_send_con_rsp
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_lecb_register
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_front
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_lk_sec_lvl_get
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_is_sec_set
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_le_psm_get_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>l2c_code_le_cb_conn_resp_handler</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, l2cc_sig.o(i.l2c_code_le_cb_conn_resp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = l2c_code_le_cb_conn_resp_handler &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_get_operation_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>l2c_code_le_flow_control_credit_handler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, l2cc_sig.o(i.l2c_code_le_flow_control_credit_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = l2c_code_le_flow_control_credit_handler &rArr; l2cc_lecb_init_disconnect &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cm_tx_status
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_init_disconnect
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>l2c_code_reject_handler</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, l2cc_sig.o(i.l2c_code_reject_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = l2c_code_reject_handler &rArr; l2cc_lecb_free &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_send_complete_evt
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_free
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_lecb_find
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_get_operation_ptr
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_get_operation
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cc_sig.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>l2cm_l2cap_tx_handler</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, l2cm.o(i.l2cm_l2cap_tx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = l2cm_l2cap_tx_handler &rArr; l2cc_data_send &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_data_send
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2cm.o(i.l2cm_init)
</UL>
<P><STRONG><a name="[1ca]"></a>hci_disconnect_cmd_handler</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, llc_hci.o(i.hci_disconnect_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_disconnect_cmd_handler &rArr; llc_common_cmd_status_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_status_send
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>hci_flush_cmd_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, llc_hci.o(i.hci_flush_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hci_flush_cmd_handler &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_flush_occurred_send
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>hci_le_con_update_cmd_handler</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, llc_hci.o(i.hci_le_con_update_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hci_le_con_update_cmd_handler &rArr; llc_con_update_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_status_send
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>hci_le_ltk_req_neg_reply_cmd_handler</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, llc_hci.o(i.hci_le_ltk_req_neg_reply_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_ltk_req_neg_reply_cmd_handler &rArr; llc_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_complete_send
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>hci_le_ltk_req_reply_cmd_handler</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, llc_hci.o(i.hci_le_ltk_req_reply_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_ltk_req_reply_cmd_handler &rArr; llc_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>hci_le_rd_chnl_map_cmd_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, llc_hci.o(i.hci_le_rd_chnl_map_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_rd_chnl_map_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>hci_le_rd_rem_used_feats_cmd_handler</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, llc_hci.o(i.hci_le_rd_rem_used_feats_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_rd_rem_used_feats_cmd_handler &rArr; llc_feats_rd_event_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_feats_req_pdu_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_status_send
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>hci_le_rem_con_param_req_neg_reply_cmd_handler</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, llc_hci.o(i.hci_le_rem_con_param_req_neg_reply_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hci_le_rem_con_param_req_neg_reply_cmd_handler &rArr; llc_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_complete_send
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>hci_le_rem_con_param_req_reply_cmd_handler</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, llc_hci.o(i.hci_le_rem_con_param_req_reply_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hci_le_rem_con_param_req_reply_cmd_handler &rArr; llc_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_rsp_pdu_send
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_complete_send
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>hci_le_set_data_len_cmd_handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, llc_hci.o(i.hci_le_set_data_len_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_set_data_len_cmd_handler &rArr; llc_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_complete_send
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>hci_le_start_enc_cmd_handler</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, llc_hci.o(i.hci_le_start_enc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_le_start_enc_cmd_handler &rArr; llc_common_cmd_status_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_status_send
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>hci_rd_auth_payl_to_cmd_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, llc_hci.o(i.hci_rd_auth_payl_to_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_rd_auth_payl_to_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>hci_rd_rem_ver_info_cmd_handler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, llc_hci.o(i.hci_rd_rem_ver_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hci_rd_rem_ver_info_cmd_handler &rArr; llc_version_rd_event_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_version_ind_pdu_send
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_cmd_status_send
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_version_rd_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>hci_rd_rssi_cmd_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, llc_hci.o(i.hci_rd_rssi_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_rd_rssi_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>hci_rd_tx_pwr_lvl_cmd_handler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, llc_hci.o(i.hci_rd_tx_pwr_lvl_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_rd_tx_pwr_lvl_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>hci_wr_auth_payl_to_cmd_handler</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, llc_hci.o(i.hci_wr_auth_payl_to_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_wr_auth_payl_to_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_set_auth_payl_to_margin
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_hci.o(.constdata)
</UL>
<P><STRONG><a name="[4ca]"></a>llc_llcp_reject_ind</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, llc_llcp.o(i.llc_llcp_reject_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = llc_llcp_reject_ind &rArr; llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_reject_ind_ext_handler
</UL>

<P><STRONG><a name="[4c7]"></a>llc_llcp_send</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, llc_llcp.o(i.llc_llcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = llc_llcp_send &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_vers_ind_handler
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_start_enc_rsp_handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_ping_req_handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_pause_enc_rsp_handler
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_length_req_handler
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_req_handler
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_con_param_req_handler
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_version_ind_pdu_send
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_feats_req_pdu_send
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_rsp_pdu_send
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_terminate_ind_pdu_send
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_rsp_pdu_send
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_start_enc_req_pdu_send
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_recv_handler
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ping_req_pdu_send
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_rsp_pdu_send
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_pause_enc_req_pdu_send
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_length_req_pdu_send
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_rsp_pdu_send
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_enc_req_pdu_send
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_update_pdu_send
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_con_param_req_pdu_send
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_ch_map_update_pdu_send
</UL>

<P><STRONG><a name="[1db]"></a>llcp_channel_map_ind_handler</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, llc_llcp.o(i.llcp_channel_map_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = llcp_channel_map_ind_handler &rArr; lld_evt_schedule_next_instant &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_ongoing
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_ch_map_ind
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>llcp_con_param_req_handler</STRONG> (Thumb, 708 bytes, Stack size 112 bytes, llc_llcp.o(i.llcp_con_param_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = llcp_con_param_req_handler &rArr; lld_con_param_rsp &rArr; ea_offset_req
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_param_rsp
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>llcp_con_param_rsp_handler</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, llc_llcp.o(i.llcp_con_param_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llcp_con_param_rsp_handler &rArr; llc_con_update_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>llcp_con_upd_ind_handler</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, llc_llcp.o(i.llcp_con_upd_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = llcp_con_upd_ind_handler &rArr; lld_evt_schedule_next_instant &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_instant_ongoing
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_ind
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>llcp_enc_req_handler</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, llc_llcp.o(i.llcp_enc_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llcp_enc_req_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>llcp_enc_rsp_handler</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, llc_llcp.o(i.llcp_enc_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llcp_enc_rsp_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>llcp_feats_req_handler</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, llc_llcp.o(i.llcp_feats_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llcp_feats_req_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_get_supp_features
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_slave_feature_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>llcp_feats_rsp_handler</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, llc_llcp.o(i.llcp_feats_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llcp_feats_rsp_handler &rArr; llc_feats_rd_event_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>llcp_length_req_handler</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, llc_llcp.o(i.llcp_length_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llcp_length_req_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>llcp_length_rsp_handler</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, llc_llcp.o(i.llcp_length_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = llcp_length_rsp_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_eff_tx_time_set
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind_pdu_send
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>llcp_pause_enc_req_handler</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, llc_llcp.o(i.llcp_pause_enc_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = llcp_pause_enc_req_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_get_tx_pkt_cnt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>llcp_pause_enc_rsp_handler</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, llc_llcp.o(i.llcp_pause_enc_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = llcp_pause_enc_rsp_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>llcp_ping_req_handler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, llc_llcp.o(i.llcp_ping_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llcp_ping_req_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>llcp_ping_rsp_handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, llc_llcp.o(i.llcp_ping_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = llcp_ping_rsp_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>llcp_reject_ind_ext_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, llc_llcp.o(i.llcp_reject_ind_ext_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llcp_reject_ind_ext_handler &rArr; llc_llcp_reject_ind &rArr; llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>llcp_reject_ind_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, llc_llcp.o(i.llcp_reject_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llcp_reject_ind_handler &rArr; llc_llcp_reject_ind &rArr; llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_reject_ind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>llcp_slave_feature_req_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, llc_llcp.o(i.llcp_slave_feature_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llcp_slave_feature_req_handler &rArr; llcp_feats_req_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llcp_feats_req_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>llcp_start_enc_req_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, llc_llcp.o(i.llcp_start_enc_req_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = llcp_start_enc_req_handler &rArr; llc_util_dicon_procedure &rArr; lld_con_stop &rArr; lld_evt_delete_elt_push &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>llcp_start_enc_rsp_handler</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, llc_llcp.o(i.llcp_start_enc_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = llcp_start_enc_rsp_handler &rArr; llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_compute_ce_max
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_key_ref_comp_evt_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>llcp_terminate_ind_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, llc_llcp.o(i.llcp_terminate_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = llcp_terminate_ind_handler &rArr; ke_state_set &rArr; ke_queue_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>llcp_unknown_rsp_handler</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, llc_llcp.o(i.llcp_unknown_rsp_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = llcp_unknown_rsp_handler &rArr; llc_common_enc_change_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_con_update_complete_send
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_evt_mask
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_get_mode
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_clear_operation_ptr
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_feats_rd_event_send
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_common_enc_change_evt_send
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>llcp_vers_ind_handler</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, llc_llcp.o(i.llcp_vers_ind_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = llcp_vers_ind_handler &rArr; llc_version_rd_event_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_llcp_send
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_version_rd_event_send
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llc_llcp.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>lld_evt_delete_elt_handler</STRONG> (Thumb, 574 bytes, Stack size 48 bytes, lld_evt.o(i.lld_evt_delete_elt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lld_evt_delete_elt_handler &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_interval_remove
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send_basic
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_extract
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_find
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_evt.o(i.lld_evt_init)
</UL>
<P><STRONG><a name="[501]"></a>lld_evt_rxwin_compute</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, lld_evt.o(i.lld_evt_rxwin_compute))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
</UL>

<P><STRONG><a name="[500]"></a>lld_evt_slave_time_compute</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, lld_evt.o(i.lld_evt_slave_time_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_evt_slave_time_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next_instant
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_schedule_next
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_restart
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_move_to_slave
</UL>

<P><STRONG><a name="[20f]"></a>hci_host_buf_size_cmd_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, llm_hci.o(i.hci_host_buf_size_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_host_buf_size_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_acl_buf_size_set
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>hci_host_nb_cmp_pkts_cmd_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, llm_hci.o(i.hci_host_nb_cmp_pkts_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_host_nb_cmp_pkts_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_host_nb_acl_pkts_complete
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>hci_le_create_con_cancel_cmd_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_create_con_cancel_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hci_le_create_con_cancel_cmd_handler &rArr; lld_scan_stop &rArr; lld_evt_elt_delete &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_le_con_cmp_evt_send
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_scan_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>hci_le_create_con_cmd_handler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_create_con_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = hci_le_create_con_cmd_handler &rArr; llm_create_con &rArr; lld_con_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_create_con
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>hci_le_enc_cmd_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_enc_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hci_le_enc_cmd_handler &rArr; llm_encryption_start &rArr; rwip_prevent_sleep_set
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_encryption_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>hci_le_enh_privacy_info_cmd_handler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_enh_privacy_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_le_enh_privacy_info_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_get_rpa
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>hci_le_enh_privacy_mgmt_cmd_handler</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, llm_hci.o(i.hci_le_enh_privacy_mgmt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_enh_privacy_mgmt_cmd_handler &rArr; llm_ral_dev_add &rArr; llm_util_bd_addr_in_wl &rArr; llm_util_bd_addr_wl_position
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_set_timeout
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_rm
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_dev_add
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_ral_clear
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_util_ral_force_rpa_renew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>hci_le_generate_dhkey_cmd_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_generate_dhkey_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2248<LI>Call Chain = hci_le_generate_dhkey_cmd_handler &rArr; ecc_generate_key256 &rArr; ecc_point_multiplication_uint8_256 &rArr; GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_status_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>hci_le_rand_cmd_handler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_rand_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_le_rand_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>hci_le_rd_adv_ch_tx_pw_cmd_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_rd_adv_ch_tx_pw_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_adv_ch_tx_pw_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>hci_le_rd_buff_size_cmd_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_rd_buff_size_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_buff_size_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>hci_le_rd_local_p256_public_key_cmd_handler</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, llm_hci.o(i.hci_le_rd_local_p256_public_key_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2272<LI>Call Chain = hci_le_rd_local_p256_public_key_cmd_handler &rArr; ecc_gen_new_public_key &rArr; ecc_generate_key256 &rArr; ecc_point_multiplication_uint8_256 &rArr; GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_public_key
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_status_send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_gen_new_secret_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>hci_le_rd_local_supp_feats_cmd_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_rd_local_supp_feats_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_local_supp_feats_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>hci_le_rd_max_data_len_cmd_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_rd_max_data_len_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_max_data_len_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>hci_le_rd_suggted_dft_data_len_cmd_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_rd_suggted_dft_data_len_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_suggted_dft_data_len_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[202]"></a>hci_le_rd_supp_states_cmd_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_rd_supp_states_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_supp_states_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>hci_le_rd_wl_size_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_rd_wl_size_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_le_rd_wl_size_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>hci_le_set_adv_data_cmd_handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, llm_hci.o(i.hci_le_set_adv_data_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_le_set_adv_data_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_data
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>hci_le_set_adv_en_cmd_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_set_adv_en_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = hci_le_set_adv_en_cmd_handler &rArr; llm_set_adv_en &rArr; lld_adv_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_en
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>hci_le_set_adv_param_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_set_adv_param_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_set_adv_param_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_adv_param
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>hci_le_set_evt_mask_cmd_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, llm_hci.o(i.hci_le_set_evt_mask_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_le_set_evt_mask_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1fd]"></a>hci_le_set_host_ch_class_cmd_handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, llm_hci.o(i.hci_le_set_host_ch_class_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hci_le_set_host_ch_class_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_check_map_validity
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>hci_le_set_rand_add_cmd_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_set_rand_add_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_set_rand_add_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_bdaddr_compare
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>hci_le_set_scan_en_cmd_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_set_scan_en_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = hci_le_set_scan_en_cmd_handler &rArr; llm_set_scan_en &rArr; lld_scan_start &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_en
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>hci_le_set_scan_param_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_set_scan_param_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_set_scan_param_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_param
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>hci_le_set_scan_rsp_data_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_set_scan_rsp_data_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_set_scan_rsp_data_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_set_scan_rsp_data
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>hci_le_test_mode_mngt_cmd_handler</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, llm_hci.o(i.hci_le_test_mode_mngt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hci_le_test_mode_mngt_cmd_handler &rArr; llm_test_mode_start_tx &rArr; lld_test_mode_tx &rArr; lld_evt_elt_insert &rArr; lld_evt_restart &rArr; llc_lsto_con_update &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_tx
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_test_mode_start_rx
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_test_stop
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>hci_le_wl_mngt_cmd_handler</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, llm_hci.o(i.hci_le_wl_mngt_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hci_le_wl_mngt_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_util_bl_check
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_rem_hdl
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_dev_add_hdl
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_wl_clr
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>hci_le_wr_suggted_dft_data_len_cmd_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, llm_hci.o(i.hci_le_wr_suggted_dft_data_len_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_wr_suggted_dft_data_len_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>hci_rd_bd_addr_cmd_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, llm_hci.o(i.hci_rd_bd_addr_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_rd_bd_addr_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>hci_rd_buff_size_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llm_hci.o(i.hci_rd_buff_size_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_rd_buff_size_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>hci_rd_local_supp_cmds_cmd_handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, llm_hci.o(i.hci_rd_local_supp_cmds_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_rd_local_supp_cmds_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[20b]"></a>hci_rd_local_supp_feats_cmd_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llm_hci.o(i.hci_rd_local_supp_feats_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_rd_local_supp_feats_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>hci_rd_local_ver_info_cmd_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, llm_hci.o(i.hci_rd_local_ver_info_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = hci_rd_local_ver_info_cmd_handler &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>hci_reset_cmd_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, llm_hci.o(i.hci_reset_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hci_reset_cmd_handler &rArr; rwip_reset &rArr; rwble_reset &rArr; lld_init &rArr; lld_evt_init &rArr; lld_pdu_tx_flush &rArr; llc_common_nb_of_pkt_comp_evt_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>hci_set_ctrl_to_host_flow_ctrl_cmd_handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, llm_hci.o(i.hci_set_ctrl_to_host_flow_ctrl_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_set_ctrl_to_host_flow_ctrl_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_acl_en
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>hci_set_evt_mask_cmd_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llm_hci.o(i.hci_set_evt_mask_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_set_evt_mask_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_evt_mask_set
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>hci_set_evt_mask_page_2_cmd_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, llm_hci.o(i.hci_set_evt_mask_page_2_cmd_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hci_set_evt_mask_page_2_cmd_handler &rArr; llm_common_cmd_complete_send &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_evt_mask_set
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llm_common_cmd_complete_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llm_hci.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>ea_prog_timer</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, ea.o(i.ea_prog_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ea_prog_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_remove
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_elt_insert
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ea_finetimer_isr
</UL>

<P><STRONG><a name="[6e]"></a>ecc_multiplication_event_handler</STRONG> (Thumb, 284 bytes, Stack size 160 bytes, ecc_p256.o(i.ecc_multiplication_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = ecc_multiplication_event_handler &rArr; ecc_point_multiplication_uint8_256 &rArr; GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bigHexInversion256
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiplyBigHexModP256
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_point_multiplication_uint8_256
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ecc_p256.o(i.ecc_init)
</UL>
<P><STRONG><a name="[39b]"></a>ecc_point_multiplication_uint8_256</STRONG> (Thumb, 262 bytes, Stack size 296 bytes, ecc_p256.o(i.ecc_point_multiplication_uint8_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = ecc_point_multiplication_uint8_256 &rArr; GF_Jacobian_Point_Addition256 &rArr; GF_Jacobian_Point_Double256 &rArr; MultiplyBigHexModP256 &rArr; specialModP256 &rArr; SubtractFromSelfBigHexSign256 &rArr; SubtractBigHex256
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Double256
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GF_Jacobian_Point_Addition256
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_multiplication_event_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecc_generate_key256
</UL>

<P><STRONG><a name="[74]"></a>h4tl_cmd_hdr_rx_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, h4tl.o(i.h4tl_cmd_hdr_rx_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = h4tl_cmd_hdr_rx_evt_handler &rArr; hci_cmd_received &rArr; hci_cmd_reject &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_malloc
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_get_max_param_size
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_out_of_sync
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(i.h4tl_init)
</UL>
<P><STRONG><a name="[75]"></a>h4tl_cmd_pld_rx_evt_handler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, h4tl.o(i.h4tl_cmd_pld_rx_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = h4tl_cmd_pld_rx_evt_handler &rArr; hci_cmd_received &rArr; hci_cmd_reject &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(i.h4tl_init)
</UL>
<P><STRONG><a name="[41a]"></a>h4tl_out_of_sync</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, h4tl.o(i.h4tl_out_of_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = h4tl_out_of_sync &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_embedded_host
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_cmd_hdr_rx_evt_handler
</UL>

<P><STRONG><a name="[41e]"></a>h4tl_read_start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, h4tl.o(i.h4tl_read_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = h4tl_read_start &rArr; rwip_prevent_sleep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_rx_done
</UL>

<P><STRONG><a name="[72]"></a>h4tl_rx_done</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, h4tl.o(i.h4tl_rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = h4tl_rx_done &rArr; hci_cmd_received &rArr; hci_cmd_reject &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_received
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_tx_data_alloc
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_read_start
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_out_of_sync
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_set
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_task_from_id
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_embedded_host
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_embedded_host
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 6]<UL><LI> h4tl.o(i.h4tl_read_start)
<LI> h4tl.o(i.h4tl_rx_done)
<LI> h4tl.o(i.h4tl_cmd_hdr_rx_evt_handler)
<LI> h4tl.o(i.h4tl_cmd_pld_rx_evt_handler)
<LI> h4tl.o(i.h4tl_init)
<LI> h4tl.o(i.h4tl_out_of_sync)
</UL>
<P><STRONG><a name="[76]"></a>h4tl_tx_done</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h4tl.o(i.h4tl_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = h4tl_tx_done &rArr; ke_event_set
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(i.h4tl_write)
</UL>
<P><STRONG><a name="[73]"></a>h4tl_tx_evt_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, h4tl.o(i.h4tl_tx_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = h4tl_tx_evt_handler &rArr; ke_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_clear
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> h4tl.o(i.h4tl_init)
</UL>
<P><STRONG><a name="[86]"></a>rf_force_agc_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf.o(i.rf_force_agc_enable))
<BR>[Address Reference Count : 1]<UL><LI> rf.o(i.rf_init)
</UL>
<P><STRONG><a name="[88]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf.o(i.rf_reset))
<BR>[Address Reference Count : 1]<UL><LI> rf.o(i.rf_init)
</UL>
<P><STRONG><a name="[85]"></a>rf_rssi_convert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_rssi_convert))
<BR>[Address Reference Count : 1]<UL><LI> rf.o(i.rf_init)
</UL>
<P><STRONG><a name="[87]"></a>rf_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf.o(i.rf_sleep))
<BR>[Address Reference Count : 1]<UL><LI> rf.o(i.rf_init)
</UL>
<P><STRONG><a name="[84]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_txpwr_dbm_get))
<BR>[Address Reference Count : 1]<UL><LI> rf.o(i.rf_init)
</UL>
<P><STRONG><a name="[222]"></a>smpc_construct_dhkey_check_pdu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_dhkey_check_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>smpc_construct_enc_info_pdu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_enc_info_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>smpc_construct_id_addr_info_pdu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_construct_id_addr_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smpc_construct_id_addr_info_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_bdaddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>smpc_construct_id_info_pdu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_id_info_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[223]"></a>smpc_construct_keypress_notification_pdu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_keypress_notification_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>smpc_construct_mst_id_pdu</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_mst_id_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>smpc_construct_pair_cfm_pdu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_cfm_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>smpc_construct_pair_fail_pdu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_fail_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>smpc_construct_pair_rand_pdu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_rand_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>smpc_construct_pair_req_pdu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_req_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>smpc_construct_pair_rsp_pdu</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_pair_rsp_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>smpc_construct_public_key_pdu</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_public_key_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[220]"></a>smpc_construct_sec_req_pdu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_sec_req_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[21f]"></a>smpc_construct_sign_info_pdu</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, smpc_util.o(i.smpc_construct_sign_info_pdu))
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>smpc_recv_dhkey_check_pdu</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, smpc_util.o(i.smpc_recv_dhkey_check_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = smpc_recv_dhkey_check_pdu &rArr; smpc_initiate_dhkey_verification &rArr; smpc_f6_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_initiate_dhkey_verification
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>smpc_recv_enc_info_pdu</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_recv_enc_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpc_recv_enc_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>smpc_recv_id_addr_info_pdu</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, smpc_util.o(i.smpc_recv_id_addr_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = smpc_recv_id_addr_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>smpc_recv_id_info_pdu</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_recv_id_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpc_recv_id_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>smpc_recv_keypress_notification_pdu</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smpc_util.o(i.smpc_recv_keypress_notification_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = smpc_recv_keypress_notification_pdu &rArr; ke_timer_set &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_key_press_notification_ind
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[22a]"></a>smpc_recv_mst_id_pdu</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, smpc_util.o(i.smpc_recv_mst_id_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = smpc_recv_mst_id_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_enc_keysize_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[226]"></a>smpc_recv_pair_cfm_pdu</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_pair_cfm_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpc_recv_pair_cfm_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[228]"></a>smpc_recv_pair_fail_pdu</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, smpc_util.o(i.smpc_recv_pair_fail_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smpc_recv_pair_fail_pdu &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[227]"></a>smpc_recv_pair_rand_pdu</STRONG> (Thumb, 752 bytes, Stack size 32 bytes, smpc_util.o(i.smpc_recv_pair_rand_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = smpc_recv_pair_rand_pdu &rArr; smpc_init_mac_key_calculation &rArr; smpc_f5_init &rArr; smpc_send_use_enc_block_cmd &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_g2_init
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_f4_Init
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_init_mac_key_calculation
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_next_passkey_bit
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_e1
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[224]"></a>smpc_recv_pair_req_pdu</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_pair_req_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpc_recv_pair_req_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_sec_con_pairing_supp
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>smpc_recv_pair_rsp_pdu</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_pair_rsp_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpc_recv_pair_rsp_pdu &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_is_sec_mode_reached
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_key_sec_prop
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_pairing_feat
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_key_distrib
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_secure_connections_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[22f]"></a>smpc_recv_public_key_pdu</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_public_key_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpc_recv_public_key_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_gen_dh_key_cmd
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_local_public_key
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>smpc_recv_sec_req_pdu</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, smpc_util.o(i.smpc_recv_sec_req_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = smpc_recv_sec_req_pdu &rArr; smpc_pdu_send &rArr; l2cc_pdu_alloc &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_repeated_attempts
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_is_legacy_pairing_supp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>smpc_recv_sign_info_pdu</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, smpc_util.o(i.smpc_recv_sign_info_pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smpc_recv_sign_info_pdu &rArr; smpc_tkdp_rcp_continue &rArr; smpc_pairing_end &rArr; smpc_send_pairing_ind &rArr; ke_msg_alloc &rArr; ke_malloc &rArr; platform_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_continue
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_ind
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smpc_util.o(.constdata)
</UL>
<P><STRONG><a name="[232]"></a>lld_pdu_cntl_aligned_unpk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lld_pdu.o(i.lld_pdu_cntl_aligned_unpk))
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lld_pdu.o(.constdata)
</UL>
<P><STRONG><a name="[233]"></a>lld_pdu_llcp_con_param_req_unpk</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, lld_pdu.o(i.lld_pdu_llcp_con_param_req_unpk))
<BR>[Address Reference Count : 1]<UL><LI> lld_pdu.o(.constdata)
</UL>
<P><STRONG><a name="[234]"></a>lld_pdu_llcp_con_param_rsp_unpk</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, lld_pdu.o(i.lld_pdu_llcp_con_param_rsp_unpk))
<BR>[Address Reference Count : 1]<UL><LI> lld_pdu.o(.constdata)
</UL>
<P><STRONG><a name="[235]"></a>lld_pdu_llcp_length_req_unpk</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lld_pdu.o(i.lld_pdu_llcp_length_req_unpk))
<BR>[Address Reference Count : 1]<UL><LI> lld_pdu.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>lld_pdu_llcp_length_rsp_unpk</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lld_pdu.o(i.lld_pdu_llcp_length_rsp_unpk))
<BR>[Address Reference Count : 1]<UL><LI> lld_pdu.o(.constdata)
</UL>
<P><STRONG><a name="[50b]"></a>lld_pdu_pack</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, lld_pdu.o(i.lld_pdu_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lld_pdu_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_prog
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_adv_pack
</UL>

<P><STRONG><a name="[510]"></a>lld_pdu_tx_flush_list</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lld_pdu.o(i.lld_pdu_tx_flush_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lld_pdu_tx_flush_list &rArr; ke_free
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_free
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_tx_free
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_pdu_tx_flush
</UL>

<P><STRONG><a name="[237]"></a>hci_dbg_assert_err_evt_pkupk</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, hci_msg.o(i.hci_dbg_assert_err_evt_pkupk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_dbg_assert_err_evt_pkupk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>hci_dbg_rd_data_cmd_cmp_evt_pk</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, hci_msg.o(i.hci_dbg_rd_data_cmd_cmp_evt_pk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_dbg_rd_data_cmd_cmp_evt_pk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>hci_dbg_wr_flash_cmd_upk</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, hci_msg.o(i.hci_dbg_wr_flash_cmd_upk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_dbg_wr_flash_cmd_upk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[23a]"></a>hci_dbg_wr_mem_cmd_upk</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, hci_msg.o(i.hci_dbg_wr_mem_cmd_upk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_dbg_wr_mem_cmd_upk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[23c]"></a>hci_dbg_wr_par_cmd_upk</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, hci_msg.o(i.hci_dbg_wr_par_cmd_upk))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hci_dbg_wr_par_cmd_upk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[238]"></a>hci_host_nb_cmp_pkts_cmd_pkupk</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, hci_msg.o(i.hci_host_nb_cmp_pkts_cmd_pkupk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = hci_host_nb_cmp_pkts_cmd_pkupk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>hci_le_adv_report_evt_pkupk</STRONG> (Thumb, 280 bytes, Stack size 120 bytes, hci_msg.o(i.hci_le_adv_report_evt_pkupk))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_le_adv_report_evt_pkupk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[23e]"></a>hci_le_dir_adv_report_evt_pkupk</STRONG> (Thumb, 274 bytes, Stack size 96 bytes, hci_msg.o(i.hci_le_dir_adv_report_evt_pkupk))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hci_le_dir_adv_report_evt_pkupk &rArr; hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_pack_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_msg.o(.constdata)
</UL>
<P><STRONG><a name="[42d]"></a>hci_pack_bytes</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, hci_msg.o(i.hci_pack_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hci_pack_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_dir_adv_report_evt_pkupk
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_adv_report_evt_pkupk
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_host_nb_cmp_pkts_cmd_pkupk
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_par_cmd_upk
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_mem_cmd_upk
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_wr_flash_cmd_upk
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_rd_data_cmd_cmp_evt_pk
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_dbg_assert_err_evt_pkupk
</UL>

<P><STRONG><a name="[42b]"></a>hci_cmd_reject</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, hci_tl.o(i.hci_cmd_reject))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hci_cmd_reject &rArr; hci_send_2_host &rArr; hci_tl_send &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_2_host
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_util_unpack
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_cmd_received
</UL>

<P><STRONG><a name="[77]"></a>hci_tx_done</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, hci_tl.o(i.hci_tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hci_tx_done &rArr; hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_free
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_start
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_acl_packet_sent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci_tl.o(i.hci_tx_start)
</UL>
<P><STRONG><a name="[473]"></a>hci_tx_start</STRONG> (Thumb, 586 bytes, Stack size 32 bytes, hci_tl.o(i.hci_tx_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = hci_tx_start &rArr; hci_util_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_le_evt_desc
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_evt_desc
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_cmd_desc
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;em_buf_rx_buff_addr_get
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h4tl_write
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_util_pack
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_look_for_dbg_evt_desc
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_fc_check_host_available_nb_acl_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tl_send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_done
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
